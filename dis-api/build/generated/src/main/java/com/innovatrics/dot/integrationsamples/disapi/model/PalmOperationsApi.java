/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import com.innovatrics.dot.integrationsamples.disapi.ApiCallback;
import com.innovatrics.dot.integrationsamples.disapi.ApiClient;
import com.innovatrics.dot.integrationsamples.disapi.ApiException;
import com.innovatrics.dot.integrationsamples.disapi.ApiResponse;
import com.innovatrics.dot.integrationsamples.disapi.Configuration;
import com.innovatrics.dot.integrationsamples.disapi.Pair;
import com.innovatrics.dot.integrationsamples.disapi.ProgressRequestBody;
import com.innovatrics.dot.integrationsamples.disapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.innovatrics.dot.integrationsamples.disapi.model.CreatePalmRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreatePalmResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.ErrorResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.PalmInspectResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.PalmSimilarityRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.PalmSimilarityResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.PalmTemplateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PalmOperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PalmOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PalmOperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkSimilarity
     * @param probePalmId  (required)
     * @param palmSimilarityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSimilarityCall(String probePalmId, PalmSimilarityRequest palmSimilarityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = palmSimilarityRequest;

        // create path and map variables
        String localVarPath = "/api/v1/palms/{probe_palm_id}/similarity"
            .replace("{" + "probe_palm_id" + "}", localVarApiClient.escapeString(probePalmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSimilarityValidateBeforeCall(String probePalmId, PalmSimilarityRequest palmSimilarityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'probePalmId' is set
        if (probePalmId == null) {
            throw new ApiException("Missing the required parameter 'probePalmId' when calling checkSimilarity(Async)");
        }

        // verify the required parameter 'palmSimilarityRequest' is set
        if (palmSimilarityRequest == null) {
            throw new ApiException("Missing the required parameter 'palmSimilarityRequest' when calling checkSimilarity(Async)");
        }

        return checkSimilarityCall(probePalmId, palmSimilarityRequest, _callback);

    }

    /**
     * Match the probe palm to the reference palm
     * 
     * @param probePalmId  (required)
     * @param palmSimilarityRequest  (required)
     * @return PalmSimilarityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public PalmSimilarityResponse checkSimilarity(String probePalmId, PalmSimilarityRequest palmSimilarityRequest) throws ApiException {
        ApiResponse<PalmSimilarityResponse> localVarResp = checkSimilarityWithHttpInfo(probePalmId, palmSimilarityRequest);
        return localVarResp.getData();
    }

    /**
     * Match the probe palm to the reference palm
     * 
     * @param probePalmId  (required)
     * @param palmSimilarityRequest  (required)
     * @return ApiResponse&lt;PalmSimilarityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PalmSimilarityResponse> checkSimilarityWithHttpInfo(String probePalmId, PalmSimilarityRequest palmSimilarityRequest) throws ApiException {
        okhttp3.Call localVarCall = checkSimilarityValidateBeforeCall(probePalmId, palmSimilarityRequest, null);
        Type localVarReturnType = new TypeToken<PalmSimilarityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Match the probe palm to the reference palm (asynchronously)
     * 
     * @param probePalmId  (required)
     * @param palmSimilarityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSimilarityAsync(String probePalmId, PalmSimilarityRequest palmSimilarityRequest, final ApiCallback<PalmSimilarityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSimilarityValidateBeforeCall(probePalmId, palmSimilarityRequest, _callback);
        Type localVarReturnType = new TypeToken<PalmSimilarityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPalm1
     * @param createPalmRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPalm1Call(CreatePalmRequest createPalmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPalmRequest;

        // create path and map variables
        String localVarPath = "/api/v1/palms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPalm1ValidateBeforeCall(CreatePalmRequest createPalmRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPalmRequest' is set
        if (createPalmRequest == null) {
            throw new ApiException("Missing the required parameter 'createPalmRequest' when calling createPalm1(Async)");
        }

        return createPalm1Call(createPalmRequest, _callback);

    }

    /**
     * Create a palm from the photo
     * 
     * @param createPalmRequest  (required)
     * @return CreatePalmResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreatePalmResponse createPalm1(CreatePalmRequest createPalmRequest) throws ApiException {
        ApiResponse<CreatePalmResponse> localVarResp = createPalm1WithHttpInfo(createPalmRequest);
        return localVarResp.getData();
    }

    /**
     * Create a palm from the photo
     * 
     * @param createPalmRequest  (required)
     * @return ApiResponse&lt;CreatePalmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePalmResponse> createPalm1WithHttpInfo(CreatePalmRequest createPalmRequest) throws ApiException {
        okhttp3.Call localVarCall = createPalm1ValidateBeforeCall(createPalmRequest, null);
        Type localVarReturnType = new TypeToken<CreatePalmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a palm from the photo (asynchronously)
     * 
     * @param createPalmRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPalm1Async(CreatePalmRequest createPalmRequest, final ApiCallback<CreatePalmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPalm1ValidateBeforeCall(createPalmRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePalmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePalm
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePalmCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/palms/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePalmValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePalm(Async)");
        }

        return deletePalmCall(id, _callback);

    }

    /**
     * Delete the palm
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deletePalm(String id) throws ApiException {
        deletePalmWithHttpInfo(id);
    }

    /**
     * Delete the palm
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePalmWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deletePalmValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the palm (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePalmAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePalmValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPalmTemplate
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPalmTemplateCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/palms/{id}/template"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPalmTemplateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPalmTemplate(Async)");
        }

        return getPalmTemplateCall(id, _callback);

    }

    /**
     * Get the palm&#39;s template
     * 
     * @param id  (required)
     * @return PalmTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public PalmTemplateResponse getPalmTemplate(String id) throws ApiException {
        ApiResponse<PalmTemplateResponse> localVarResp = getPalmTemplateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the palm&#39;s template
     * 
     * @param id  (required)
     * @return ApiResponse&lt;PalmTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PalmTemplateResponse> getPalmTemplateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPalmTemplateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PalmTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the palm&#39;s template (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPalmTemplateAsync(String id, final ApiCallback<PalmTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPalmTemplateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PalmTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inspectPalm
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectPalmCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/palms/{id}/inspect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inspectPalmValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inspectPalm(Async)");
        }

        return inspectPalmCall(id, _callback);

    }

    /**
     * Inspect palm
     * 
     * @param id  (required)
     * @return PalmInspectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public PalmInspectResponse inspectPalm(String id) throws ApiException {
        ApiResponse<PalmInspectResponse> localVarResp = inspectPalmWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Inspect palm
     * 
     * @param id  (required)
     * @return ApiResponse&lt;PalmInspectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PalmInspectResponse> inspectPalmWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = inspectPalmValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PalmInspectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inspect palm (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectPalmAsync(String id, final ApiCallback<PalmInspectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inspectPalmValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PalmInspectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
