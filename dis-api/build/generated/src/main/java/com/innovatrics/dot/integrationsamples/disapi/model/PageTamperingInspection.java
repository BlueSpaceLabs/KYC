/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Result of the visual detection indicating possibly fraudulent documents based on the appearance of the image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class PageTamperingInspection {
  public static final String SERIALIZED_NAME_COLOR_PROFILE_CHANGE_DETECTED = "colorProfileChangeDetected";
  @SerializedName(SERIALIZED_NAME_COLOR_PROFILE_CHANGE_DETECTED)
  private Boolean colorProfileChangeDetected;

  public static final String SERIALIZED_NAME_LOOKS_LIKE_SCREENSHOT = "looksLikeScreenshot";
  @SerializedName(SERIALIZED_NAME_LOOKS_LIKE_SCREENSHOT)
  private Boolean looksLikeScreenshot;

  public static final String SERIALIZED_NAME_TAMPERED_TEXTS = "tamperedTexts";
  @SerializedName(SERIALIZED_NAME_TAMPERED_TEXTS)
  private Boolean tamperedTexts;

  public static final String SERIALIZED_NAME_LOOKS_LIKE_PRINT_COPY = "looksLikePrintCopy";
  @SerializedName(SERIALIZED_NAME_LOOKS_LIKE_PRINT_COPY)
  private Boolean looksLikePrintCopy;

  public PageTamperingInspection() {
  }

  public PageTamperingInspection(
     Boolean colorProfileChangeDetected, 
     Boolean looksLikeScreenshot, 
     Boolean tamperedTexts, 
     Boolean looksLikePrintCopy
  ) {
    this();
    this.colorProfileChangeDetected = colorProfileChangeDetected;
    this.looksLikeScreenshot = looksLikeScreenshot;
    this.tamperedTexts = tamperedTexts;
    this.looksLikePrintCopy = looksLikePrintCopy;
  }

  /**
   * True if there is a significant change in color profile of the submitted document against a supported document (e.g. the supplied photo is in greyscale)
   * @return colorProfileChangeDetected
   */
  @javax.annotation.Nullable
  public Boolean getColorProfileChangeDetected() {
    return colorProfileChangeDetected;
  }



  /**
   * True if the submitted document was detected to be photographed from a screen
   * @return looksLikeScreenshot
   */
  @javax.annotation.Nullable
  public Boolean getLooksLikeScreenshot() {
    return looksLikeScreenshot;
  }



  /**
   * True if the submitted document shows signs of text manipulation
   * @return tamperedTexts
   */
  @javax.annotation.Nullable
  public Boolean getTamperedTexts() {
    return tamperedTexts;
  }



  /**
   * True if the submitted document shows signs of Print Copy manipulation
   * @return looksLikePrintCopy
   */
  @javax.annotation.Nullable
  public Boolean getLooksLikePrintCopy() {
    return looksLikePrintCopy;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTamperingInspection pageTamperingInspection = (PageTamperingInspection) o;
    return Objects.equals(this.colorProfileChangeDetected, pageTamperingInspection.colorProfileChangeDetected) &&
        Objects.equals(this.looksLikeScreenshot, pageTamperingInspection.looksLikeScreenshot) &&
        Objects.equals(this.tamperedTexts, pageTamperingInspection.tamperedTexts) &&
        Objects.equals(this.looksLikePrintCopy, pageTamperingInspection.looksLikePrintCopy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorProfileChangeDetected, looksLikeScreenshot, tamperedTexts, looksLikePrintCopy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTamperingInspection {\n");
    sb.append("    colorProfileChangeDetected: ").append(toIndentedString(colorProfileChangeDetected)).append("\n");
    sb.append("    looksLikeScreenshot: ").append(toIndentedString(looksLikeScreenshot)).append("\n");
    sb.append("    tamperedTexts: ").append(toIndentedString(tamperedTexts)).append("\n");
    sb.append("    looksLikePrintCopy: ").append(toIndentedString(looksLikePrintCopy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorProfileChangeDetected");
    openapiFields.add("looksLikeScreenshot");
    openapiFields.add("tamperedTexts");
    openapiFields.add("looksLikePrintCopy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageTamperingInspection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageTamperingInspection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTamperingInspection is not found in the empty JSON string", PageTamperingInspection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageTamperingInspection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageTamperingInspection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTamperingInspection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTamperingInspection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTamperingInspection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTamperingInspection.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTamperingInspection>() {
           @Override
           public void write(JsonWriter out, PageTamperingInspection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTamperingInspection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageTamperingInspection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageTamperingInspection
   * @throws IOException if the JSON string is invalid with respect to PageTamperingInspection
   */
  public static PageTamperingInspection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTamperingInspection.class);
  }

  /**
   * Convert an instance of PageTamperingInspection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

