/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.BiometricMultiValueAttribute;
import com.innovatrics.dot.integrationsamples.disapi.model.CustomerDocument;
import com.innovatrics.dot.integrationsamples.disapi.model.MultiValueAttribute;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Details of the customer retrieved by OCR from ID document photo and by facial biometry from the selfie. The date of birth is in format YYYY-MM-DD and the gender is represented by: M for male, F for female, X for undefined.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class Customer {
  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private BiometricMultiValueAttribute age;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private BiometricMultiValueAttribute gender;

  public static final String SERIALIZED_NAME_GIVEN_NAMES = "givenNames";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAMES)
  private MultiValueAttribute givenNames;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private MultiValueAttribute surname;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private MultiValueAttribute fullName;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private MultiValueAttribute dateOfBirth;

  public static final String SERIALIZED_NAME_PERSONAL_NUMBER = "personalNumber";
  @SerializedName(SERIALIZED_NAME_PERSONAL_NUMBER)
  private MultiValueAttribute personalNumber;

  public static final String SERIALIZED_NAME_CITIZENSHIP = "citizenship";
  @SerializedName(SERIALIZED_NAME_CITIZENSHIP)
  private MultiValueAttribute citizenship;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private MultiValueAttribute nationality;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private CustomerDocument document;

  public Customer() {
  }

  public Customer age(BiometricMultiValueAttribute age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public BiometricMultiValueAttribute getAge() {
    return age;
  }

  public void setAge(BiometricMultiValueAttribute age) {
    this.age = age;
  }


  public Customer gender(BiometricMultiValueAttribute gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public BiometricMultiValueAttribute getGender() {
    return gender;
  }

  public void setGender(BiometricMultiValueAttribute gender) {
    this.gender = gender;
  }


  public Customer givenNames(MultiValueAttribute givenNames) {
    this.givenNames = givenNames;
    return this;
  }

  /**
   * Get givenNames
   * @return givenNames
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getGivenNames() {
    return givenNames;
  }

  public void setGivenNames(MultiValueAttribute givenNames) {
    this.givenNames = givenNames;
  }


  public Customer surname(MultiValueAttribute surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getSurname() {
    return surname;
  }

  public void setSurname(MultiValueAttribute surname) {
    this.surname = surname;
  }


  public Customer fullName(MultiValueAttribute fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getFullName() {
    return fullName;
  }

  public void setFullName(MultiValueAttribute fullName) {
    this.fullName = fullName;
  }


  public Customer dateOfBirth(MultiValueAttribute dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(MultiValueAttribute dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Customer personalNumber(MultiValueAttribute personalNumber) {
    this.personalNumber = personalNumber;
    return this;
  }

  /**
   * Get personalNumber
   * @return personalNumber
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getPersonalNumber() {
    return personalNumber;
  }

  public void setPersonalNumber(MultiValueAttribute personalNumber) {
    this.personalNumber = personalNumber;
  }


  public Customer citizenship(MultiValueAttribute citizenship) {
    this.citizenship = citizenship;
    return this;
  }

  /**
   * Get citizenship
   * @return citizenship
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getCitizenship() {
    return citizenship;
  }

  public void setCitizenship(MultiValueAttribute citizenship) {
    this.citizenship = citizenship;
  }


  public Customer nationality(MultiValueAttribute nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Get nationality
   * @return nationality
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getNationality() {
    return nationality;
  }

  public void setNationality(MultiValueAttribute nationality) {
    this.nationality = nationality;
  }


  public Customer document(CustomerDocument document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public CustomerDocument getDocument() {
    return document;
  }

  public void setDocument(CustomerDocument document) {
    this.document = document;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.age, customer.age) &&
        Objects.equals(this.gender, customer.gender) &&
        Objects.equals(this.givenNames, customer.givenNames) &&
        Objects.equals(this.surname, customer.surname) &&
        Objects.equals(this.fullName, customer.fullName) &&
        Objects.equals(this.dateOfBirth, customer.dateOfBirth) &&
        Objects.equals(this.personalNumber, customer.personalNumber) &&
        Objects.equals(this.citizenship, customer.citizenship) &&
        Objects.equals(this.nationality, customer.nationality) &&
        Objects.equals(this.document, customer.document);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, gender, givenNames, surname, fullName, dateOfBirth, personalNumber, citizenship, nationality, document);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    givenNames: ").append(toIndentedString(givenNames)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    personalNumber: ").append(toIndentedString(personalNumber)).append("\n");
    sb.append("    citizenship: ").append(toIndentedString(citizenship)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("age");
    openapiFields.add("gender");
    openapiFields.add("givenNames");
    openapiFields.add("surname");
    openapiFields.add("fullName");
    openapiFields.add("dateOfBirth");
    openapiFields.add("personalNumber");
    openapiFields.add("citizenship");
    openapiFields.add("nationality");
    openapiFields.add("document");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Customer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `age`
      if (jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull()) {
        BiometricMultiValueAttribute.validateJsonElement(jsonObj.get("age"));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        BiometricMultiValueAttribute.validateJsonElement(jsonObj.get("gender"));
      }
      // validate the optional field `givenNames`
      if (jsonObj.get("givenNames") != null && !jsonObj.get("givenNames").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("givenNames"));
      }
      // validate the optional field `surname`
      if (jsonObj.get("surname") != null && !jsonObj.get("surname").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("surname"));
      }
      // validate the optional field `fullName`
      if (jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("fullName"));
      }
      // validate the optional field `dateOfBirth`
      if (jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("dateOfBirth"));
      }
      // validate the optional field `personalNumber`
      if (jsonObj.get("personalNumber") != null && !jsonObj.get("personalNumber").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("personalNumber"));
      }
      // validate the optional field `citizenship`
      if (jsonObj.get("citizenship") != null && !jsonObj.get("citizenship").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("citizenship"));
      }
      // validate the optional field `nationality`
      if (jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("nationality"));
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        CustomerDocument.validateJsonElement(jsonObj.get("document"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Customer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Customer
   * @throws IOException if the JSON string is invalid with respect to Customer
   */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

  /**
   * Convert an instance of Customer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

