/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Recognized type of document and issuing country, in case it is recognized.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class DocumentType {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_MACHINE_READABLE_TRAVEL_DOCUMENT = "machineReadableTravelDocument";
  @SerializedName(SERIALIZED_NAME_MACHINE_READABLE_TRAVEL_DOCUMENT)
  private String machineReadableTravelDocument;

  public static final String SERIALIZED_NAME_SUPPORT_LEVEL = "supportLevel";
  @SerializedName(SERIALIZED_NAME_SUPPORT_LEVEL)
  private String supportLevel;

  public DocumentType() {
  }

  public DocumentType(
     String country, 
     String edition, 
     String type, 
     String machineReadableTravelDocument, 
     String supportLevel
  ) {
    this();
    this.country = country;
    this.edition = edition;
    this.type = type;
    this.machineReadableTravelDocument = machineReadableTravelDocument;
    this.supportLevel = supportLevel;
  }

  /**
   * The Alpha-3 ISO 3166 country code
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  /**
   * The edition
   * @return edition
   */
  @javax.annotation.Nullable
  public String getEdition() {
    return edition;
  }



  /**
   * The identity document type: passport, identity-card,...
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }



  /**
   * ICAO Machine Readable Travel Document (MRTD) Specification
   * @return machineReadableTravelDocument
   */
  @javax.annotation.Nullable
  public String getMachineReadableTravelDocument() {
    return machineReadableTravelDocument;
  }



  /**
   * The support level of the document. Possible values: &#39;FULL_SUPPORT&#39;, &#39;MRZ_EXTRACTION_ONLY&#39;, &#39;NOT_SUPPORTED&#39;
   * @return supportLevel
   */
  @javax.annotation.Nullable
  public String getSupportLevel() {
    return supportLevel;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentType documentType = (DocumentType) o;
    return Objects.equals(this.country, documentType.country) &&
        Objects.equals(this.edition, documentType.edition) &&
        Objects.equals(this.type, documentType.type) &&
        Objects.equals(this.machineReadableTravelDocument, documentType.machineReadableTravelDocument) &&
        Objects.equals(this.supportLevel, documentType.supportLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, edition, type, machineReadableTravelDocument, supportLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentType {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    machineReadableTravelDocument: ").append(toIndentedString(machineReadableTravelDocument)).append("\n");
    sb.append("    supportLevel: ").append(toIndentedString(supportLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("edition");
    openapiFields.add("type");
    openapiFields.add("machineReadableTravelDocument");
    openapiFields.add("supportLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentType is not found in the empty JSON string", DocumentType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("machineReadableTravelDocument") != null && !jsonObj.get("machineReadableTravelDocument").isJsonNull()) && !jsonObj.get("machineReadableTravelDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineReadableTravelDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineReadableTravelDocument").toString()));
      }
      if ((jsonObj.get("supportLevel") != null && !jsonObj.get("supportLevel").isJsonNull()) && !jsonObj.get("supportLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentType.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentType>() {
           @Override
           public void write(JsonWriter out, DocumentType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentType
   * @throws IOException if the JSON string is invalid with respect to DocumentType
   */
  public static DocumentType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentType.class);
  }

  /**
   * Convert an instance of DocumentType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

