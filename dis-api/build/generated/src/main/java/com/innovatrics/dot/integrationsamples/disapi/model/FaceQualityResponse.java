/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceAttribute;
import com.innovatrics.dot.integrationsamples.disapi.model.HeadPoseAttribute;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * FaceQualityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class FaceQualityResponse {
  public static final String SERIALIZED_NAME_SHARPNESS = "sharpness";
  @SerializedName(SERIALIZED_NAME_SHARPNESS)
  private FaceAttribute sharpness;

  public static final String SERIALIZED_NAME_BRIGHTNESS = "brightness";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS)
  private FaceAttribute brightness;

  public static final String SERIALIZED_NAME_CONTRAST = "contrast";
  @SerializedName(SERIALIZED_NAME_CONTRAST)
  private FaceAttribute contrast;

  public static final String SERIALIZED_NAME_UNIQUE_INTENSITY_LEVELS = "uniqueIntensityLevels";
  @SerializedName(SERIALIZED_NAME_UNIQUE_INTENSITY_LEVELS)
  private FaceAttribute uniqueIntensityLevels;

  public static final String SERIALIZED_NAME_SHADOW = "shadow";
  @SerializedName(SERIALIZED_NAME_SHADOW)
  private FaceAttribute shadow;

  public static final String SERIALIZED_NAME_NOSE_SHADOW = "noseShadow";
  @SerializedName(SERIALIZED_NAME_NOSE_SHADOW)
  private FaceAttribute noseShadow;

  public static final String SERIALIZED_NAME_SPECULARITY = "specularity";
  @SerializedName(SERIALIZED_NAME_SPECULARITY)
  private FaceAttribute specularity;

  public static final String SERIALIZED_NAME_BACKGROUND_UNIFORMITY = "backgroundUniformity";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_UNIFORMITY)
  private FaceAttribute backgroundUniformity;

  public static final String SERIALIZED_NAME_RED_RIGHT_EYE = "redRightEye";
  @SerializedName(SERIALIZED_NAME_RED_RIGHT_EYE)
  private FaceAttribute redRightEye;

  public static final String SERIALIZED_NAME_RED_LEFT_EYE = "redLeftEye";
  @SerializedName(SERIALIZED_NAME_RED_LEFT_EYE)
  private FaceAttribute redLeftEye;

  public static final String SERIALIZED_NAME_ROLL = "roll";
  @SerializedName(SERIALIZED_NAME_ROLL)
  private HeadPoseAttribute roll;

  public static final String SERIALIZED_NAME_YAW = "yaw";
  @SerializedName(SERIALIZED_NAME_YAW)
  private HeadPoseAttribute yaw;

  public static final String SERIALIZED_NAME_PITCH = "pitch";
  @SerializedName(SERIALIZED_NAME_PITCH)
  private HeadPoseAttribute pitch;

  public static final String SERIALIZED_NAME_EYE_DISTANCE = "eyeDistance";
  @SerializedName(SERIALIZED_NAME_EYE_DISTANCE)
  private FaceAttribute eyeDistance;

  public static final String SERIALIZED_NAME_EYE_GAZE = "eyeGaze";
  @SerializedName(SERIALIZED_NAME_EYE_GAZE)
  private FaceAttribute eyeGaze;

  public static final String SERIALIZED_NAME_RIGHT_EYE = "rightEye";
  @SerializedName(SERIALIZED_NAME_RIGHT_EYE)
  private FaceAttribute rightEye;

  public static final String SERIALIZED_NAME_LEFT_EYE = "leftEye";
  @SerializedName(SERIALIZED_NAME_LEFT_EYE)
  private FaceAttribute leftEye;

  public static final String SERIALIZED_NAME_MOUTH = "mouth";
  @SerializedName(SERIALIZED_NAME_MOUTH)
  private FaceAttribute mouth;

  public static final String SERIALIZED_NAME_FACE_SIZE = "faceSize";
  @SerializedName(SERIALIZED_NAME_FACE_SIZE)
  private FaceAttribute faceSize;

  public static final String SERIALIZED_NAME_FACE_RELATIVE_AREA = "faceRelativeArea";
  @SerializedName(SERIALIZED_NAME_FACE_RELATIVE_AREA)
  private FaceAttribute faceRelativeArea;

  public static final String SERIALIZED_NAME_FACE_RELATIVE_AREA_IN_IMAGE = "faceRelativeAreaInImage";
  @SerializedName(SERIALIZED_NAME_FACE_RELATIVE_AREA_IN_IMAGE)
  private FaceAttribute faceRelativeAreaInImage;

  public FaceQualityResponse() {
  }

  public FaceQualityResponse sharpness(FaceAttribute sharpness) {
    this.sharpness = sharpness;
    return this;
  }

  /**
   * Get sharpness
   * @return sharpness
   */
  @javax.annotation.Nullable
  public FaceAttribute getSharpness() {
    return sharpness;
  }

  public void setSharpness(FaceAttribute sharpness) {
    this.sharpness = sharpness;
  }


  public FaceQualityResponse brightness(FaceAttribute brightness) {
    this.brightness = brightness;
    return this;
  }

  /**
   * Get brightness
   * @return brightness
   */
  @javax.annotation.Nullable
  public FaceAttribute getBrightness() {
    return brightness;
  }

  public void setBrightness(FaceAttribute brightness) {
    this.brightness = brightness;
  }


  public FaceQualityResponse contrast(FaceAttribute contrast) {
    this.contrast = contrast;
    return this;
  }

  /**
   * Get contrast
   * @return contrast
   */
  @javax.annotation.Nullable
  public FaceAttribute getContrast() {
    return contrast;
  }

  public void setContrast(FaceAttribute contrast) {
    this.contrast = contrast;
  }


  public FaceQualityResponse uniqueIntensityLevels(FaceAttribute uniqueIntensityLevels) {
    this.uniqueIntensityLevels = uniqueIntensityLevels;
    return this;
  }

  /**
   * Get uniqueIntensityLevels
   * @return uniqueIntensityLevels
   */
  @javax.annotation.Nullable
  public FaceAttribute getUniqueIntensityLevels() {
    return uniqueIntensityLevels;
  }

  public void setUniqueIntensityLevels(FaceAttribute uniqueIntensityLevels) {
    this.uniqueIntensityLevels = uniqueIntensityLevels;
  }


  public FaceQualityResponse shadow(FaceAttribute shadow) {
    this.shadow = shadow;
    return this;
  }

  /**
   * Get shadow
   * @return shadow
   */
  @javax.annotation.Nullable
  public FaceAttribute getShadow() {
    return shadow;
  }

  public void setShadow(FaceAttribute shadow) {
    this.shadow = shadow;
  }


  public FaceQualityResponse noseShadow(FaceAttribute noseShadow) {
    this.noseShadow = noseShadow;
    return this;
  }

  /**
   * Get noseShadow
   * @return noseShadow
   */
  @javax.annotation.Nullable
  public FaceAttribute getNoseShadow() {
    return noseShadow;
  }

  public void setNoseShadow(FaceAttribute noseShadow) {
    this.noseShadow = noseShadow;
  }


  public FaceQualityResponse specularity(FaceAttribute specularity) {
    this.specularity = specularity;
    return this;
  }

  /**
   * Get specularity
   * @return specularity
   */
  @javax.annotation.Nullable
  public FaceAttribute getSpecularity() {
    return specularity;
  }

  public void setSpecularity(FaceAttribute specularity) {
    this.specularity = specularity;
  }


  public FaceQualityResponse backgroundUniformity(FaceAttribute backgroundUniformity) {
    this.backgroundUniformity = backgroundUniformity;
    return this;
  }

  /**
   * Get backgroundUniformity
   * @return backgroundUniformity
   */
  @javax.annotation.Nullable
  public FaceAttribute getBackgroundUniformity() {
    return backgroundUniformity;
  }

  public void setBackgroundUniformity(FaceAttribute backgroundUniformity) {
    this.backgroundUniformity = backgroundUniformity;
  }


  public FaceQualityResponse redRightEye(FaceAttribute redRightEye) {
    this.redRightEye = redRightEye;
    return this;
  }

  /**
   * Get redRightEye
   * @return redRightEye
   */
  @javax.annotation.Nullable
  public FaceAttribute getRedRightEye() {
    return redRightEye;
  }

  public void setRedRightEye(FaceAttribute redRightEye) {
    this.redRightEye = redRightEye;
  }


  public FaceQualityResponse redLeftEye(FaceAttribute redLeftEye) {
    this.redLeftEye = redLeftEye;
    return this;
  }

  /**
   * Get redLeftEye
   * @return redLeftEye
   */
  @javax.annotation.Nullable
  public FaceAttribute getRedLeftEye() {
    return redLeftEye;
  }

  public void setRedLeftEye(FaceAttribute redLeftEye) {
    this.redLeftEye = redLeftEye;
  }


  public FaceQualityResponse roll(HeadPoseAttribute roll) {
    this.roll = roll;
    return this;
  }

  /**
   * Get roll
   * @return roll
   */
  @javax.annotation.Nullable
  public HeadPoseAttribute getRoll() {
    return roll;
  }

  public void setRoll(HeadPoseAttribute roll) {
    this.roll = roll;
  }


  public FaceQualityResponse yaw(HeadPoseAttribute yaw) {
    this.yaw = yaw;
    return this;
  }

  /**
   * Get yaw
   * @return yaw
   */
  @javax.annotation.Nullable
  public HeadPoseAttribute getYaw() {
    return yaw;
  }

  public void setYaw(HeadPoseAttribute yaw) {
    this.yaw = yaw;
  }


  public FaceQualityResponse pitch(HeadPoseAttribute pitch) {
    this.pitch = pitch;
    return this;
  }

  /**
   * Get pitch
   * @return pitch
   */
  @javax.annotation.Nullable
  public HeadPoseAttribute getPitch() {
    return pitch;
  }

  public void setPitch(HeadPoseAttribute pitch) {
    this.pitch = pitch;
  }


  public FaceQualityResponse eyeDistance(FaceAttribute eyeDistance) {
    this.eyeDistance = eyeDistance;
    return this;
  }

  /**
   * Get eyeDistance
   * @return eyeDistance
   */
  @javax.annotation.Nullable
  public FaceAttribute getEyeDistance() {
    return eyeDistance;
  }

  public void setEyeDistance(FaceAttribute eyeDistance) {
    this.eyeDistance = eyeDistance;
  }


  public FaceQualityResponse eyeGaze(FaceAttribute eyeGaze) {
    this.eyeGaze = eyeGaze;
    return this;
  }

  /**
   * Get eyeGaze
   * @return eyeGaze
   */
  @javax.annotation.Nullable
  public FaceAttribute getEyeGaze() {
    return eyeGaze;
  }

  public void setEyeGaze(FaceAttribute eyeGaze) {
    this.eyeGaze = eyeGaze;
  }


  public FaceQualityResponse rightEye(FaceAttribute rightEye) {
    this.rightEye = rightEye;
    return this;
  }

  /**
   * Get rightEye
   * @return rightEye
   */
  @javax.annotation.Nullable
  public FaceAttribute getRightEye() {
    return rightEye;
  }

  public void setRightEye(FaceAttribute rightEye) {
    this.rightEye = rightEye;
  }


  public FaceQualityResponse leftEye(FaceAttribute leftEye) {
    this.leftEye = leftEye;
    return this;
  }

  /**
   * Get leftEye
   * @return leftEye
   */
  @javax.annotation.Nullable
  public FaceAttribute getLeftEye() {
    return leftEye;
  }

  public void setLeftEye(FaceAttribute leftEye) {
    this.leftEye = leftEye;
  }


  public FaceQualityResponse mouth(FaceAttribute mouth) {
    this.mouth = mouth;
    return this;
  }

  /**
   * Get mouth
   * @return mouth
   */
  @javax.annotation.Nullable
  public FaceAttribute getMouth() {
    return mouth;
  }

  public void setMouth(FaceAttribute mouth) {
    this.mouth = mouth;
  }


  public FaceQualityResponse faceSize(FaceAttribute faceSize) {
    this.faceSize = faceSize;
    return this;
  }

  /**
   * Get faceSize
   * @return faceSize
   */
  @javax.annotation.Nullable
  public FaceAttribute getFaceSize() {
    return faceSize;
  }

  public void setFaceSize(FaceAttribute faceSize) {
    this.faceSize = faceSize;
  }


  public FaceQualityResponse faceRelativeArea(FaceAttribute faceRelativeArea) {
    this.faceRelativeArea = faceRelativeArea;
    return this;
  }

  /**
   * Get faceRelativeArea
   * @return faceRelativeArea
   */
  @javax.annotation.Nullable
  public FaceAttribute getFaceRelativeArea() {
    return faceRelativeArea;
  }

  public void setFaceRelativeArea(FaceAttribute faceRelativeArea) {
    this.faceRelativeArea = faceRelativeArea;
  }


  public FaceQualityResponse faceRelativeAreaInImage(FaceAttribute faceRelativeAreaInImage) {
    this.faceRelativeAreaInImage = faceRelativeAreaInImage;
    return this;
  }

  /**
   * Get faceRelativeAreaInImage
   * @return faceRelativeAreaInImage
   */
  @javax.annotation.Nullable
  public FaceAttribute getFaceRelativeAreaInImage() {
    return faceRelativeAreaInImage;
  }

  public void setFaceRelativeAreaInImage(FaceAttribute faceRelativeAreaInImage) {
    this.faceRelativeAreaInImage = faceRelativeAreaInImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceQualityResponse faceQualityResponse = (FaceQualityResponse) o;
    return Objects.equals(this.sharpness, faceQualityResponse.sharpness) &&
        Objects.equals(this.brightness, faceQualityResponse.brightness) &&
        Objects.equals(this.contrast, faceQualityResponse.contrast) &&
        Objects.equals(this.uniqueIntensityLevels, faceQualityResponse.uniqueIntensityLevels) &&
        Objects.equals(this.shadow, faceQualityResponse.shadow) &&
        Objects.equals(this.noseShadow, faceQualityResponse.noseShadow) &&
        Objects.equals(this.specularity, faceQualityResponse.specularity) &&
        Objects.equals(this.backgroundUniformity, faceQualityResponse.backgroundUniformity) &&
        Objects.equals(this.redRightEye, faceQualityResponse.redRightEye) &&
        Objects.equals(this.redLeftEye, faceQualityResponse.redLeftEye) &&
        Objects.equals(this.roll, faceQualityResponse.roll) &&
        Objects.equals(this.yaw, faceQualityResponse.yaw) &&
        Objects.equals(this.pitch, faceQualityResponse.pitch) &&
        Objects.equals(this.eyeDistance, faceQualityResponse.eyeDistance) &&
        Objects.equals(this.eyeGaze, faceQualityResponse.eyeGaze) &&
        Objects.equals(this.rightEye, faceQualityResponse.rightEye) &&
        Objects.equals(this.leftEye, faceQualityResponse.leftEye) &&
        Objects.equals(this.mouth, faceQualityResponse.mouth) &&
        Objects.equals(this.faceSize, faceQualityResponse.faceSize) &&
        Objects.equals(this.faceRelativeArea, faceQualityResponse.faceRelativeArea) &&
        Objects.equals(this.faceRelativeAreaInImage, faceQualityResponse.faceRelativeAreaInImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharpness, brightness, contrast, uniqueIntensityLevels, shadow, noseShadow, specularity, backgroundUniformity, redRightEye, redLeftEye, roll, yaw, pitch, eyeDistance, eyeGaze, rightEye, leftEye, mouth, faceSize, faceRelativeArea, faceRelativeAreaInImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceQualityResponse {\n");
    sb.append("    sharpness: ").append(toIndentedString(sharpness)).append("\n");
    sb.append("    brightness: ").append(toIndentedString(brightness)).append("\n");
    sb.append("    contrast: ").append(toIndentedString(contrast)).append("\n");
    sb.append("    uniqueIntensityLevels: ").append(toIndentedString(uniqueIntensityLevels)).append("\n");
    sb.append("    shadow: ").append(toIndentedString(shadow)).append("\n");
    sb.append("    noseShadow: ").append(toIndentedString(noseShadow)).append("\n");
    sb.append("    specularity: ").append(toIndentedString(specularity)).append("\n");
    sb.append("    backgroundUniformity: ").append(toIndentedString(backgroundUniformity)).append("\n");
    sb.append("    redRightEye: ").append(toIndentedString(redRightEye)).append("\n");
    sb.append("    redLeftEye: ").append(toIndentedString(redLeftEye)).append("\n");
    sb.append("    roll: ").append(toIndentedString(roll)).append("\n");
    sb.append("    yaw: ").append(toIndentedString(yaw)).append("\n");
    sb.append("    pitch: ").append(toIndentedString(pitch)).append("\n");
    sb.append("    eyeDistance: ").append(toIndentedString(eyeDistance)).append("\n");
    sb.append("    eyeGaze: ").append(toIndentedString(eyeGaze)).append("\n");
    sb.append("    rightEye: ").append(toIndentedString(rightEye)).append("\n");
    sb.append("    leftEye: ").append(toIndentedString(leftEye)).append("\n");
    sb.append("    mouth: ").append(toIndentedString(mouth)).append("\n");
    sb.append("    faceSize: ").append(toIndentedString(faceSize)).append("\n");
    sb.append("    faceRelativeArea: ").append(toIndentedString(faceRelativeArea)).append("\n");
    sb.append("    faceRelativeAreaInImage: ").append(toIndentedString(faceRelativeAreaInImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sharpness");
    openapiFields.add("brightness");
    openapiFields.add("contrast");
    openapiFields.add("uniqueIntensityLevels");
    openapiFields.add("shadow");
    openapiFields.add("noseShadow");
    openapiFields.add("specularity");
    openapiFields.add("backgroundUniformity");
    openapiFields.add("redRightEye");
    openapiFields.add("redLeftEye");
    openapiFields.add("roll");
    openapiFields.add("yaw");
    openapiFields.add("pitch");
    openapiFields.add("eyeDistance");
    openapiFields.add("eyeGaze");
    openapiFields.add("rightEye");
    openapiFields.add("leftEye");
    openapiFields.add("mouth");
    openapiFields.add("faceSize");
    openapiFields.add("faceRelativeArea");
    openapiFields.add("faceRelativeAreaInImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceQualityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FaceQualityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FaceQualityResponse is not found in the empty JSON string", FaceQualityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FaceQualityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FaceQualityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sharpness`
      if (jsonObj.get("sharpness") != null && !jsonObj.get("sharpness").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("sharpness"));
      }
      // validate the optional field `brightness`
      if (jsonObj.get("brightness") != null && !jsonObj.get("brightness").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("brightness"));
      }
      // validate the optional field `contrast`
      if (jsonObj.get("contrast") != null && !jsonObj.get("contrast").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("contrast"));
      }
      // validate the optional field `uniqueIntensityLevels`
      if (jsonObj.get("uniqueIntensityLevels") != null && !jsonObj.get("uniqueIntensityLevels").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("uniqueIntensityLevels"));
      }
      // validate the optional field `shadow`
      if (jsonObj.get("shadow") != null && !jsonObj.get("shadow").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("shadow"));
      }
      // validate the optional field `noseShadow`
      if (jsonObj.get("noseShadow") != null && !jsonObj.get("noseShadow").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("noseShadow"));
      }
      // validate the optional field `specularity`
      if (jsonObj.get("specularity") != null && !jsonObj.get("specularity").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("specularity"));
      }
      // validate the optional field `backgroundUniformity`
      if (jsonObj.get("backgroundUniformity") != null && !jsonObj.get("backgroundUniformity").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("backgroundUniformity"));
      }
      // validate the optional field `redRightEye`
      if (jsonObj.get("redRightEye") != null && !jsonObj.get("redRightEye").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("redRightEye"));
      }
      // validate the optional field `redLeftEye`
      if (jsonObj.get("redLeftEye") != null && !jsonObj.get("redLeftEye").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("redLeftEye"));
      }
      // validate the optional field `roll`
      if (jsonObj.get("roll") != null && !jsonObj.get("roll").isJsonNull()) {
        HeadPoseAttribute.validateJsonElement(jsonObj.get("roll"));
      }
      // validate the optional field `yaw`
      if (jsonObj.get("yaw") != null && !jsonObj.get("yaw").isJsonNull()) {
        HeadPoseAttribute.validateJsonElement(jsonObj.get("yaw"));
      }
      // validate the optional field `pitch`
      if (jsonObj.get("pitch") != null && !jsonObj.get("pitch").isJsonNull()) {
        HeadPoseAttribute.validateJsonElement(jsonObj.get("pitch"));
      }
      // validate the optional field `eyeDistance`
      if (jsonObj.get("eyeDistance") != null && !jsonObj.get("eyeDistance").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("eyeDistance"));
      }
      // validate the optional field `eyeGaze`
      if (jsonObj.get("eyeGaze") != null && !jsonObj.get("eyeGaze").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("eyeGaze"));
      }
      // validate the optional field `rightEye`
      if (jsonObj.get("rightEye") != null && !jsonObj.get("rightEye").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("rightEye"));
      }
      // validate the optional field `leftEye`
      if (jsonObj.get("leftEye") != null && !jsonObj.get("leftEye").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("leftEye"));
      }
      // validate the optional field `mouth`
      if (jsonObj.get("mouth") != null && !jsonObj.get("mouth").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("mouth"));
      }
      // validate the optional field `faceSize`
      if (jsonObj.get("faceSize") != null && !jsonObj.get("faceSize").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("faceSize"));
      }
      // validate the optional field `faceRelativeArea`
      if (jsonObj.get("faceRelativeArea") != null && !jsonObj.get("faceRelativeArea").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("faceRelativeArea"));
      }
      // validate the optional field `faceRelativeAreaInImage`
      if (jsonObj.get("faceRelativeAreaInImage") != null && !jsonObj.get("faceRelativeAreaInImage").isJsonNull()) {
        FaceAttribute.validateJsonElement(jsonObj.get("faceRelativeAreaInImage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaceQualityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaceQualityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaceQualityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaceQualityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FaceQualityResponse>() {
           @Override
           public void write(JsonWriter out, FaceQualityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaceQualityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceQualityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceQualityResponse
   * @throws IOException if the JSON string is invalid with respect to FaceQualityResponse
   */
  public static FaceQualityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceQualityResponse.class);
  }

  /**
   * Convert an instance of FaceQualityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

