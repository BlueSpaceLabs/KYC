/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.Portrait;
import com.innovatrics.dot.integrationsamples.disapi.model.TextField;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Document page metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class PageMetadata {
  public static final String SERIALIZED_NAME_CLASSIFICATION_ADVICE_REQUIRED = "classificationAdviceRequired";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_ADVICE_REQUIRED)
  private Boolean classificationAdviceRequired;

  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private Portrait portrait;

  public static final String SERIALIZED_NAME_VISUAL_ZONE = "visualZone";
  @SerializedName(SERIALIZED_NAME_VISUAL_ZONE)
  private Map<String, TextField> visualZone = new HashMap<>();

  public PageMetadata() {
  }

  public PageMetadata(
     Boolean classificationAdviceRequired, 
     Map<String, TextField> visualZone
  ) {
    this();
    this.classificationAdviceRequired = classificationAdviceRequired;
    this.visualZone = visualZone;
  }

  /**
   * True if a precise classification advice is required when uploading the document page.
   * @return classificationAdviceRequired
   */
  @javax.annotation.Nullable
  public Boolean getClassificationAdviceRequired() {
    return classificationAdviceRequired;
  }



  public PageMetadata portrait(Portrait portrait) {
    this.portrait = portrait;
    return this;
  }

  /**
   * Get portrait
   * @return portrait
   */
  @javax.annotation.Nullable
  public Portrait getPortrait() {
    return portrait;
  }

  public void setPortrait(Portrait portrait) {
    this.portrait = portrait;
  }


  /**
   * The map of text field&#39;s metadata. The map keys represent the text field types.
   * @return visualZone
   */
  @javax.annotation.Nonnull
  public Map<String, TextField> getVisualZone() {
    return visualZone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageMetadata pageMetadata = (PageMetadata) o;
    return Objects.equals(this.classificationAdviceRequired, pageMetadata.classificationAdviceRequired) &&
        Objects.equals(this.portrait, pageMetadata.portrait) &&
        Objects.equals(this.visualZone, pageMetadata.visualZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationAdviceRequired, portrait, visualZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageMetadata {\n");
    sb.append("    classificationAdviceRequired: ").append(toIndentedString(classificationAdviceRequired)).append("\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    visualZone: ").append(toIndentedString(visualZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classificationAdviceRequired");
    openapiFields.add("portrait");
    openapiFields.add("visualZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("visualZone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageMetadata is not found in the empty JSON string", PageMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PageMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `portrait`
      if (jsonObj.get("portrait") != null && !jsonObj.get("portrait").isJsonNull()) {
        Portrait.validateJsonElement(jsonObj.get("portrait"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<PageMetadata>() {
           @Override
           public void write(JsonWriter out, PageMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageMetadata
   * @throws IOException if the JSON string is invalid with respect to PageMetadata
   */
  public static PageMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageMetadata.class);
  }

  /**
   * Convert an instance of PageMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

