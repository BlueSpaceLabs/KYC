/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.QualityDetails;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * DocumentPageQuality
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class DocumentPageQuality {
  public static final String SERIALIZED_NAME_FINE = "fine";
  @SerializedName(SERIALIZED_NAME_FINE)
  private Boolean fine;

  /**
   * The list of the quality check issues if the quality check failed
   */
  @JsonAdapter(IssuesEnum.Adapter.class)
  public enum IssuesEnum {
    BRIGHTNESS_HIGH("BRIGHTNESS_HIGH"),
    
    BRIGHTNESS_LOW("BRIGHTNESS_LOW"),
    
    HOTSPOTS_SCORE_HIGH("HOTSPOTS_SCORE_HIGH"),
    
    SHARPNESS_LOW("SHARPNESS_LOW"),
    
    DOCUMENT_SMALL("DOCUMENT_SMALL"),
    
    DOCUMENT_OUT_OF_IMAGE("DOCUMENT_OUT_OF_IMAGE"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    IssuesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuesEnum fromValue(String value) {
      for (IssuesEnum b : IssuesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<IssuesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssuesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssuesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<IssuesEnum> issues = new ArrayList<>();

  /**
   * The list of warnings from the quality check
   */
  @JsonAdapter(WarningsEnum.Adapter.class)
  public enum WarningsEnum {
    DOCUMENT_CLOSE_TO_IMAGE_BORDER("DOCUMENT_CLOSE_TO_IMAGE_BORDER"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    WarningsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarningsEnum fromValue(String value) {
      for (WarningsEnum b : WarningsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<WarningsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarningsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarningsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarningsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WarningsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<WarningsEnum> warnings = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private QualityDetails details;

  public DocumentPageQuality() {
  }

  public DocumentPageQuality(
     Boolean fine, 
     List<WarningsEnum> warnings
  ) {
    this();
    this.fine = fine;
    this.warnings = warnings;
  }

  /**
   * The quality check result
   * @return fine
   */
  @javax.annotation.Nonnull
  public Boolean getFine() {
    return fine;
  }



  public DocumentPageQuality issues(List<IssuesEnum> issues) {
    this.issues = issues;
    return this;
  }

  public DocumentPageQuality addIssuesItem(IssuesEnum issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * The list of the quality check issues if the quality check failed
   * @return issues
   */
  @javax.annotation.Nullable
  public List<IssuesEnum> getIssues() {
    return issues;
  }

  public void setIssues(List<IssuesEnum> issues) {
    this.issues = issues;
  }


  /**
   * The list of warnings from the quality check
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<WarningsEnum> getWarnings() {
    return warnings;
  }



  public DocumentPageQuality details(QualityDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nonnull
  public QualityDetails getDetails() {
    return details;
  }

  public void setDetails(QualityDetails details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentPageQuality documentPageQuality = (DocumentPageQuality) o;
    return Objects.equals(this.fine, documentPageQuality.fine) &&
        Objects.equals(this.issues, documentPageQuality.issues) &&
        Objects.equals(this.warnings, documentPageQuality.warnings) &&
        Objects.equals(this.details, documentPageQuality.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fine, issues, warnings, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentPageQuality {\n");
    sb.append("    fine: ").append(toIndentedString(fine)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fine");
    openapiFields.add("issues");
    openapiFields.add("warnings");
    openapiFields.add("details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fine");
    openapiRequiredFields.add("details");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentPageQuality
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentPageQuality.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentPageQuality is not found in the empty JSON string", DocumentPageQuality.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentPageQuality.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentPageQuality` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentPageQuality.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull() && !jsonObj.get("issues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
      // validate the required field `details`
      QualityDetails.validateJsonElement(jsonObj.get("details"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentPageQuality.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentPageQuality' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentPageQuality> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentPageQuality.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentPageQuality>() {
           @Override
           public void write(JsonWriter out, DocumentPageQuality value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentPageQuality read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentPageQuality given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentPageQuality
   * @throws IOException if the JSON string is invalid with respect to DocumentPageQuality
   */
  public static DocumentPageQuality fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentPageQuality.class);
  }

  /**
   * Convert an instance of DocumentPageQuality to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

