/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Similarity of the face between the selfie, document portrait and the liveness selfies. Please, read the chapter \&quot;Face Matching\&quot; of the DOT documentation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class SelfieSimilarityWith {
  public static final String SERIALIZED_NAME_DOCUMENT_PORTRAIT = "documentPortrait";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PORTRAIT)
  private Boolean documentPortrait;

  public static final String SERIALIZED_NAME_CHIP_PORTRAIT = "chipPortrait";
  @SerializedName(SERIALIZED_NAME_CHIP_PORTRAIT)
  private Boolean chipPortrait;

  public static final String SERIALIZED_NAME_LIVENESS_SELFIES = "livenessSelfies";
  @SerializedName(SERIALIZED_NAME_LIVENESS_SELFIES)
  private Boolean livenessSelfies;

  public SelfieSimilarityWith() {
  }

  public SelfieSimilarityWith(
     Boolean documentPortrait, 
     Boolean chipPortrait, 
     Boolean livenessSelfies
  ) {
    this();
    this.documentPortrait = documentPortrait;
    this.chipPortrait = chipPortrait;
    this.livenessSelfies = livenessSelfies;
  }

  /**
   * True if the person in the selfie matches a person in the document portrait
   * @return documentPortrait
   */
  @javax.annotation.Nullable
  public Boolean getDocumentPortrait() {
    return documentPortrait;
  }



  /**
   * True if the person in the selfie matches a person in the portrait retrieved from the document chip
   * @return chipPortrait
   */
  @javax.annotation.Nullable
  public Boolean getChipPortrait() {
    return chipPortrait;
  }



  /**
   * True if the person in the selfie matches a person in each liveness selfie
   * @return livenessSelfies
   */
  @javax.annotation.Nullable
  public Boolean getLivenessSelfies() {
    return livenessSelfies;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelfieSimilarityWith selfieSimilarityWith = (SelfieSimilarityWith) o;
    return Objects.equals(this.documentPortrait, selfieSimilarityWith.documentPortrait) &&
        Objects.equals(this.chipPortrait, selfieSimilarityWith.chipPortrait) &&
        Objects.equals(this.livenessSelfies, selfieSimilarityWith.livenessSelfies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentPortrait, chipPortrait, livenessSelfies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelfieSimilarityWith {\n");
    sb.append("    documentPortrait: ").append(toIndentedString(documentPortrait)).append("\n");
    sb.append("    chipPortrait: ").append(toIndentedString(chipPortrait)).append("\n");
    sb.append("    livenessSelfies: ").append(toIndentedString(livenessSelfies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentPortrait");
    openapiFields.add("chipPortrait");
    openapiFields.add("livenessSelfies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelfieSimilarityWith
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelfieSimilarityWith.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelfieSimilarityWith is not found in the empty JSON string", SelfieSimilarityWith.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelfieSimilarityWith.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelfieSimilarityWith` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelfieSimilarityWith.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelfieSimilarityWith' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelfieSimilarityWith> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelfieSimilarityWith.class));

       return (TypeAdapter<T>) new TypeAdapter<SelfieSimilarityWith>() {
           @Override
           public void write(JsonWriter out, SelfieSimilarityWith value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelfieSimilarityWith read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelfieSimilarityWith given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelfieSimilarityWith
   * @throws IOException if the JSON string is invalid with respect to SelfieSimilarityWith
   */
  public static SelfieSimilarityWith fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelfieSimilarityWith.class);
  }

  /**
   * Convert an instance of SelfieSimilarityWith to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

