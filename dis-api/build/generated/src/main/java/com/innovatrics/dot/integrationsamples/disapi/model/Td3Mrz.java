/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.Td3MrzCheckDigitsValidity;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Parsed TD3 machine readable zone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class Td3Mrz {
  public static final String SERIALIZED_NAME_DOCUMENT_CODE = "documentCode";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CODE)
  private String documentCode;

  public static final String SERIALIZED_NAME_ISSUING_AUTHORITY = "issuingAuthority";
  @SerializedName(SERIALIZED_NAME_ISSUING_AUTHORITY)
  private String issuingAuthority;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_GIVEN_NAMES = "givenNames";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAMES)
  private String givenNames;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_DATE_OF_EXPIRY = "dateOfExpiry";
  @SerializedName(SERIALIZED_NAME_DATE_OF_EXPIRY)
  private String dateOfExpiry;

  public static final String SERIALIZED_NAME_PERSONAL_NUMBER_OR_OPTIONAL_DATA_SECOND_LINE = "personalNumberOrOptionalDataSecondLine";
  @SerializedName(SERIALIZED_NAME_PERSONAL_NUMBER_OR_OPTIONAL_DATA_SECOND_LINE)
  private String personalNumberOrOptionalDataSecondLine;

  public static final String SERIALIZED_NAME_CHECK_DIGITS_VALIDITY = "checkDigitsValidity";
  @SerializedName(SERIALIZED_NAME_CHECK_DIGITS_VALIDITY)
  private Td3MrzCheckDigitsValidity checkDigitsValidity;

  public Td3Mrz() {
  }

  public Td3Mrz(
     String documentCode, 
     String issuingAuthority, 
     String surname, 
     String givenNames, 
     String documentNumber, 
     String nationality, 
     String dateOfBirth, 
     String gender, 
     String dateOfExpiry, 
     String personalNumberOrOptionalDataSecondLine
  ) {
    this();
    this.documentCode = documentCode;
    this.issuingAuthority = issuingAuthority;
    this.surname = surname;
    this.givenNames = givenNames;
    this.documentNumber = documentNumber;
    this.nationality = nationality;
    this.dateOfBirth = dateOfBirth;
    this.gender = gender;
    this.dateOfExpiry = dateOfExpiry;
    this.personalNumberOrOptionalDataSecondLine = personalNumberOrOptionalDataSecondLine;
  }

  /**
   * Document&#39;s code
   * @return documentCode
   */
  @javax.annotation.Nonnull
  public String getDocumentCode() {
    return documentCode;
  }



  /**
   * Document&#39;s issuing authority
   * @return issuingAuthority
   */
  @javax.annotation.Nonnull
  public String getIssuingAuthority() {
    return issuingAuthority;
  }



  /**
   * Holder&#39;s surname
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }



  /**
   * Holder&#39;s given names
   * @return givenNames
   */
  @javax.annotation.Nonnull
  public String getGivenNames() {
    return givenNames;
  }



  /**
   * Document&#39;s number
   * @return documentNumber
   */
  @javax.annotation.Nonnull
  public String getDocumentNumber() {
    return documentNumber;
  }



  /**
   * Holder&#39;s nationality
   * @return nationality
   */
  @javax.annotation.Nonnull
  public String getNationality() {
    return nationality;
  }



  /**
   * Holder&#39;s date of the birth, format: &#x60;YYMMDD&#x60;
   * @return dateOfBirth
   */
  @javax.annotation.Nonnull
  public String getDateOfBirth() {
    return dateOfBirth;
  }



  /**
   * Holder&#39;s gender, format: &#x60;M&#x60; for male, &#x60;F&#x60; for female, empty string for undefined gender.
   * @return gender
   */
  @javax.annotation.Nonnull
  public String getGender() {
    return gender;
  }



  /**
   * Document&#39;s date of the expiration, format: &#x60;YYMMDD&#x60;
   * @return dateOfExpiry
   */
  @javax.annotation.Nonnull
  public String getDateOfExpiry() {
    return dateOfExpiry;
  }



  /**
   * Holder&#39;s personal number or other optional data
   * @return personalNumberOrOptionalDataSecondLine
   */
  @javax.annotation.Nullable
  public String getPersonalNumberOrOptionalDataSecondLine() {
    return personalNumberOrOptionalDataSecondLine;
  }



  public Td3Mrz checkDigitsValidity(Td3MrzCheckDigitsValidity checkDigitsValidity) {
    this.checkDigitsValidity = checkDigitsValidity;
    return this;
  }

  /**
   * Get checkDigitsValidity
   * @return checkDigitsValidity
   */
  @javax.annotation.Nonnull
  public Td3MrzCheckDigitsValidity getCheckDigitsValidity() {
    return checkDigitsValidity;
  }

  public void setCheckDigitsValidity(Td3MrzCheckDigitsValidity checkDigitsValidity) {
    this.checkDigitsValidity = checkDigitsValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Td3Mrz td3Mrz = (Td3Mrz) o;
    return Objects.equals(this.documentCode, td3Mrz.documentCode) &&
        Objects.equals(this.issuingAuthority, td3Mrz.issuingAuthority) &&
        Objects.equals(this.surname, td3Mrz.surname) &&
        Objects.equals(this.givenNames, td3Mrz.givenNames) &&
        Objects.equals(this.documentNumber, td3Mrz.documentNumber) &&
        Objects.equals(this.nationality, td3Mrz.nationality) &&
        Objects.equals(this.dateOfBirth, td3Mrz.dateOfBirth) &&
        Objects.equals(this.gender, td3Mrz.gender) &&
        Objects.equals(this.dateOfExpiry, td3Mrz.dateOfExpiry) &&
        Objects.equals(this.personalNumberOrOptionalDataSecondLine, td3Mrz.personalNumberOrOptionalDataSecondLine) &&
        Objects.equals(this.checkDigitsValidity, td3Mrz.checkDigitsValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentCode, issuingAuthority, surname, givenNames, documentNumber, nationality, dateOfBirth, gender, dateOfExpiry, personalNumberOrOptionalDataSecondLine, checkDigitsValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Td3Mrz {\n");
    sb.append("    documentCode: ").append(toIndentedString(documentCode)).append("\n");
    sb.append("    issuingAuthority: ").append(toIndentedString(issuingAuthority)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    givenNames: ").append(toIndentedString(givenNames)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    dateOfExpiry: ").append(toIndentedString(dateOfExpiry)).append("\n");
    sb.append("    personalNumberOrOptionalDataSecondLine: ").append(toIndentedString(personalNumberOrOptionalDataSecondLine)).append("\n");
    sb.append("    checkDigitsValidity: ").append(toIndentedString(checkDigitsValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentCode");
    openapiFields.add("issuingAuthority");
    openapiFields.add("surname");
    openapiFields.add("givenNames");
    openapiFields.add("documentNumber");
    openapiFields.add("nationality");
    openapiFields.add("dateOfBirth");
    openapiFields.add("gender");
    openapiFields.add("dateOfExpiry");
    openapiFields.add("personalNumberOrOptionalDataSecondLine");
    openapiFields.add("checkDigitsValidity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentCode");
    openapiRequiredFields.add("issuingAuthority");
    openapiRequiredFields.add("surname");
    openapiRequiredFields.add("givenNames");
    openapiRequiredFields.add("documentNumber");
    openapiRequiredFields.add("nationality");
    openapiRequiredFields.add("dateOfBirth");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("dateOfExpiry");
    openapiRequiredFields.add("checkDigitsValidity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Td3Mrz
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Td3Mrz.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Td3Mrz is not found in the empty JSON string", Td3Mrz.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Td3Mrz.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Td3Mrz` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Td3Mrz.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("documentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentCode").toString()));
      }
      if (!jsonObj.get("issuingAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingAuthority").toString()));
      }
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
      if (!jsonObj.get("givenNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenNames").toString()));
      }
      if (!jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if (!jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if (!jsonObj.get("dateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirth").toString()));
      }
      if (!jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("dateOfExpiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfExpiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfExpiry").toString()));
      }
      if ((jsonObj.get("personalNumberOrOptionalDataSecondLine") != null && !jsonObj.get("personalNumberOrOptionalDataSecondLine").isJsonNull()) && !jsonObj.get("personalNumberOrOptionalDataSecondLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalNumberOrOptionalDataSecondLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalNumberOrOptionalDataSecondLine").toString()));
      }
      // validate the required field `checkDigitsValidity`
      Td3MrzCheckDigitsValidity.validateJsonElement(jsonObj.get("checkDigitsValidity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Td3Mrz.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Td3Mrz' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Td3Mrz> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Td3Mrz.class));

       return (TypeAdapter<T>) new TypeAdapter<Td3Mrz>() {
           @Override
           public void write(JsonWriter out, Td3Mrz value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Td3Mrz read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Td3Mrz given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Td3Mrz
   * @throws IOException if the JSON string is invalid with respect to Td3Mrz
   */
  public static Td3Mrz fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Td3Mrz.class);
  }

  /**
   * Convert an instance of Td3Mrz to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

