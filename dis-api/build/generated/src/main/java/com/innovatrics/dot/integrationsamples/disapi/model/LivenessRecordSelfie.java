/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Liveness record selfies uploaded via [/liveness/records](#tag/Customer-onboarding/operation/createLivenessRecord) endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class LivenessRecordSelfie {
  /**
   * Gets or Sets assertion
   */
  @JsonAdapter(AssertionEnum.Adapter.class)
  public enum AssertionEnum {
    EYE_GAZE_TOP_LEFT("EYE_GAZE_TOP_LEFT"),
    
    EYE_GAZE_TOP_RIGHT("EYE_GAZE_TOP_RIGHT"),
    
    EYE_GAZE_BOTTOM_LEFT("EYE_GAZE_BOTTOM_LEFT"),
    
    EYE_GAZE_BOTTOM_RIGHT("EYE_GAZE_BOTTOM_RIGHT"),
    
    SMILE("SMILE"),
    
    NEUTRAL("NEUTRAL"),
    
    NONE("NONE"),
    
    MAGNIFEYE("MAGNIFEYE"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    AssertionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssertionEnum fromValue(String value) {
      for (AssertionEnum b : AssertionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }

    public static class Adapter extends TypeAdapter<AssertionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssertionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssertionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssertionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssertionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSERTION = "assertion";
  @SerializedName(SERIALIZED_NAME_ASSERTION)
  private AssertionEnum assertion;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public LivenessRecordSelfie() {
  }

  public LivenessRecordSelfie assertion(AssertionEnum assertion) {
    this.assertion = assertion;
    return this;
  }

  /**
   * Get assertion
   * @return assertion
   */
  @javax.annotation.Nonnull
  public AssertionEnum getAssertion() {
    return assertion;
  }

  public void setAssertion(AssertionEnum assertion) {
    this.assertion = assertion;
  }


  public LivenessRecordSelfie data(byte[] data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public byte[] getData() {
    return data;
  }

  public void setData(byte[] data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivenessRecordSelfie livenessRecordSelfie = (LivenessRecordSelfie) o;
    return Objects.equals(this.assertion, livenessRecordSelfie.assertion) &&
        Arrays.equals(this.data, livenessRecordSelfie.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assertion, Arrays.hashCode(data));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivenessRecordSelfie {\n");
    sb.append("    assertion: ").append(toIndentedString(assertion)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assertion");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assertion");
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivenessRecordSelfie
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivenessRecordSelfie.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivenessRecordSelfie is not found in the empty JSON string", LivenessRecordSelfie.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivenessRecordSelfie.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivenessRecordSelfie` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LivenessRecordSelfie.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("assertion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion").toString()));
      }
      // validate the required field `assertion`
      AssertionEnum.validateJsonElement(jsonObj.get("assertion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivenessRecordSelfie.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivenessRecordSelfie' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivenessRecordSelfie> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivenessRecordSelfie.class));

       return (TypeAdapter<T>) new TypeAdapter<LivenessRecordSelfie>() {
           @Override
           public void write(JsonWriter out, LivenessRecordSelfie value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivenessRecordSelfie read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivenessRecordSelfie given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivenessRecordSelfie
   * @throws IOException if the JSON string is invalid with respect to LivenessRecordSelfie
   */
  public static LivenessRecordSelfie fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivenessRecordSelfie.class);
  }

  /**
   * Convert an instance of LivenessRecordSelfie to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

