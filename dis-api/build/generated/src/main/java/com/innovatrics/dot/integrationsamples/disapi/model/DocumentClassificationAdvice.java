/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Advice to the classification process defining the expected document type, issuing country, edition or type of travel document. This is optional input. If not provided, classification will try to match among all supported documents. If provided and document in image is different, an error is returned.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class DocumentClassificationAdvice {
  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_EDITIONS = "editions";
  @SerializedName(SERIALIZED_NAME_EDITIONS)
  private List<String> editions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_READABLE_TRAVEL_DOCUMENTS = "machineReadableTravelDocuments";
  @SerializedName(SERIALIZED_NAME_MACHINE_READABLE_TRAVEL_DOCUMENTS)
  private List<String> machineReadableTravelDocuments = new ArrayList<>();

  public DocumentClassificationAdvice() {
  }

  public DocumentClassificationAdvice countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public DocumentClassificationAdvice addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * The list of Alpha-3 ISO 3166 country codes
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public DocumentClassificationAdvice types(List<String> types) {
    this.types = types;
    return this;
  }

  public DocumentClassificationAdvice addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * The list of the identity document types
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }


  public DocumentClassificationAdvice editions(List<String> editions) {
    this.editions = editions;
    return this;
  }

  public DocumentClassificationAdvice addEditionsItem(String editionsItem) {
    if (this.editions == null) {
      this.editions = new ArrayList<>();
    }
    this.editions.add(editionsItem);
    return this;
  }

  /**
   * The list of the document editions
   * @return editions
   */
  @javax.annotation.Nullable
  public List<String> getEditions() {
    return editions;
  }

  public void setEditions(List<String> editions) {
    this.editions = editions;
  }


  public DocumentClassificationAdvice machineReadableTravelDocuments(List<String> machineReadableTravelDocuments) {
    this.machineReadableTravelDocuments = machineReadableTravelDocuments;
    return this;
  }

  public DocumentClassificationAdvice addMachineReadableTravelDocumentsItem(String machineReadableTravelDocumentsItem) {
    if (this.machineReadableTravelDocuments == null) {
      this.machineReadableTravelDocuments = new ArrayList<>();
    }
    this.machineReadableTravelDocuments.add(machineReadableTravelDocumentsItem);
    return this;
  }

  /**
   * The list of the MRZ types
   * @return machineReadableTravelDocuments
   */
  @javax.annotation.Nullable
  public List<String> getMachineReadableTravelDocuments() {
    return machineReadableTravelDocuments;
  }

  public void setMachineReadableTravelDocuments(List<String> machineReadableTravelDocuments) {
    this.machineReadableTravelDocuments = machineReadableTravelDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentClassificationAdvice documentClassificationAdvice = (DocumentClassificationAdvice) o;
    return Objects.equals(this.countries, documentClassificationAdvice.countries) &&
        Objects.equals(this.types, documentClassificationAdvice.types) &&
        Objects.equals(this.editions, documentClassificationAdvice.editions) &&
        Objects.equals(this.machineReadableTravelDocuments, documentClassificationAdvice.machineReadableTravelDocuments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countries, types, editions, machineReadableTravelDocuments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentClassificationAdvice {\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    editions: ").append(toIndentedString(editions)).append("\n");
    sb.append("    machineReadableTravelDocuments: ").append(toIndentedString(machineReadableTravelDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countries");
    openapiFields.add("types");
    openapiFields.add("editions");
    openapiFields.add("machineReadableTravelDocuments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentClassificationAdvice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentClassificationAdvice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentClassificationAdvice is not found in the empty JSON string", DocumentClassificationAdvice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentClassificationAdvice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentClassificationAdvice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("editions") != null && !jsonObj.get("editions").isJsonNull() && !jsonObj.get("editions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `editions` to be an array in the JSON string but got `%s`", jsonObj.get("editions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("machineReadableTravelDocuments") != null && !jsonObj.get("machineReadableTravelDocuments").isJsonNull() && !jsonObj.get("machineReadableTravelDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineReadableTravelDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("machineReadableTravelDocuments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentClassificationAdvice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentClassificationAdvice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentClassificationAdvice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentClassificationAdvice.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentClassificationAdvice>() {
           @Override
           public void write(JsonWriter out, DocumentClassificationAdvice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentClassificationAdvice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentClassificationAdvice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentClassificationAdvice
   * @throws IOException if the JSON string is invalid with respect to DocumentClassificationAdvice
   */
  public static DocumentClassificationAdvice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentClassificationAdvice.class);
  }

  /**
   * Convert an instance of DocumentClassificationAdvice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

