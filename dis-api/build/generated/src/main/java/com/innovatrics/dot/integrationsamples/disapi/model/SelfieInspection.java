/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.SelfieAgeDifferenceWith;
import com.innovatrics.dot.integrationsamples.disapi.model.SelfieInspectionGenderConsistency;
import com.innovatrics.dot.integrationsamples.disapi.model.SelfieSimilarityWith;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Results of the inspection of customer&#39;s selfie versus document. Please, read the chapter \&quot;Trust Factors\&quot; of the DOT documentation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class SelfieInspection {
  public static final String SERIALIZED_NAME_SIMILARITY_WITH = "similarityWith";
  @SerializedName(SERIALIZED_NAME_SIMILARITY_WITH)
  private SelfieSimilarityWith similarityWith;

  public static final String SERIALIZED_NAME_GENDER_ESTIMATE = "genderEstimate";
  @SerializedName(SERIALIZED_NAME_GENDER_ESTIMATE)
  private String genderEstimate;

  public static final String SERIALIZED_NAME_GENDER_CONSISTENCY = "genderConsistency";
  @SerializedName(SERIALIZED_NAME_GENDER_CONSISTENCY)
  private SelfieInspectionGenderConsistency genderConsistency;

  public static final String SERIALIZED_NAME_AGE_ESTIMATE = "ageEstimate";
  @SerializedName(SERIALIZED_NAME_AGE_ESTIMATE)
  private Integer ageEstimate;

  public static final String SERIALIZED_NAME_AGE_DIFFERENCE_WITH = "ageDifferenceWith";
  @SerializedName(SERIALIZED_NAME_AGE_DIFFERENCE_WITH)
  private SelfieAgeDifferenceWith ageDifferenceWith;

  public static final String SERIALIZED_NAME_HAS_MASK = "hasMask";
  @SerializedName(SERIALIZED_NAME_HAS_MASK)
  private Boolean hasMask;

  public SelfieInspection() {
  }

  public SelfieInspection(
     String genderEstimate, 
     Integer ageEstimate, 
     Boolean hasMask
  ) {
    this();
    this.genderEstimate = genderEstimate;
    this.ageEstimate = ageEstimate;
    this.hasMask = hasMask;
  }

  public SelfieInspection similarityWith(SelfieSimilarityWith similarityWith) {
    this.similarityWith = similarityWith;
    return this;
  }

  /**
   * Get similarityWith
   * @return similarityWith
   */
  @javax.annotation.Nullable
  public SelfieSimilarityWith getSimilarityWith() {
    return similarityWith;
  }

  public void setSimilarityWith(SelfieSimilarityWith similarityWith) {
    this.similarityWith = similarityWith;
  }


  /**
   * Estimated gender of the customer in the selfie, represented by: M for male, F for female
   * @return genderEstimate
   */
  @javax.annotation.Nullable
  public String getGenderEstimate() {
    return genderEstimate;
  }



  public SelfieInspection genderConsistency(SelfieInspectionGenderConsistency genderConsistency) {
    this.genderConsistency = genderConsistency;
    return this;
  }

  /**
   * Get genderConsistency
   * @return genderConsistency
   */
  @javax.annotation.Nullable
  public SelfieInspectionGenderConsistency getGenderConsistency() {
    return genderConsistency;
  }

  public void setGenderConsistency(SelfieInspectionGenderConsistency genderConsistency) {
    this.genderConsistency = genderConsistency;
  }


  /**
   * Estimated age of the customer in the selfie in years.
   * @return ageEstimate
   */
  @javax.annotation.Nullable
  public Integer getAgeEstimate() {
    return ageEstimate;
  }



  public SelfieInspection ageDifferenceWith(SelfieAgeDifferenceWith ageDifferenceWith) {
    this.ageDifferenceWith = ageDifferenceWith;
    return this;
  }

  /**
   * Get ageDifferenceWith
   * @return ageDifferenceWith
   */
  @javax.annotation.Nullable
  public SelfieAgeDifferenceWith getAgeDifferenceWith() {
    return ageDifferenceWith;
  }

  public void setAgeDifferenceWith(SelfieAgeDifferenceWith ageDifferenceWith) {
    this.ageDifferenceWith = ageDifferenceWith;
  }


  /**
   * True if a person in the selfie is wearing a face mask
   * @return hasMask
   */
  @javax.annotation.Nullable
  public Boolean getHasMask() {
    return hasMask;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelfieInspection selfieInspection = (SelfieInspection) o;
    return Objects.equals(this.similarityWith, selfieInspection.similarityWith) &&
        Objects.equals(this.genderEstimate, selfieInspection.genderEstimate) &&
        Objects.equals(this.genderConsistency, selfieInspection.genderConsistency) &&
        Objects.equals(this.ageEstimate, selfieInspection.ageEstimate) &&
        Objects.equals(this.ageDifferenceWith, selfieInspection.ageDifferenceWith) &&
        Objects.equals(this.hasMask, selfieInspection.hasMask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(similarityWith, genderEstimate, genderConsistency, ageEstimate, ageDifferenceWith, hasMask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelfieInspection {\n");
    sb.append("    similarityWith: ").append(toIndentedString(similarityWith)).append("\n");
    sb.append("    genderEstimate: ").append(toIndentedString(genderEstimate)).append("\n");
    sb.append("    genderConsistency: ").append(toIndentedString(genderConsistency)).append("\n");
    sb.append("    ageEstimate: ").append(toIndentedString(ageEstimate)).append("\n");
    sb.append("    ageDifferenceWith: ").append(toIndentedString(ageDifferenceWith)).append("\n");
    sb.append("    hasMask: ").append(toIndentedString(hasMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("similarityWith");
    openapiFields.add("genderEstimate");
    openapiFields.add("genderConsistency");
    openapiFields.add("ageEstimate");
    openapiFields.add("ageDifferenceWith");
    openapiFields.add("hasMask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelfieInspection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelfieInspection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelfieInspection is not found in the empty JSON string", SelfieInspection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelfieInspection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelfieInspection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `similarityWith`
      if (jsonObj.get("similarityWith") != null && !jsonObj.get("similarityWith").isJsonNull()) {
        SelfieSimilarityWith.validateJsonElement(jsonObj.get("similarityWith"));
      }
      if ((jsonObj.get("genderEstimate") != null && !jsonObj.get("genderEstimate").isJsonNull()) && !jsonObj.get("genderEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genderEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genderEstimate").toString()));
      }
      // validate the optional field `genderConsistency`
      if (jsonObj.get("genderConsistency") != null && !jsonObj.get("genderConsistency").isJsonNull()) {
        SelfieInspectionGenderConsistency.validateJsonElement(jsonObj.get("genderConsistency"));
      }
      // validate the optional field `ageDifferenceWith`
      if (jsonObj.get("ageDifferenceWith") != null && !jsonObj.get("ageDifferenceWith").isJsonNull()) {
        SelfieAgeDifferenceWith.validateJsonElement(jsonObj.get("ageDifferenceWith"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelfieInspection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelfieInspection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelfieInspection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelfieInspection.class));

       return (TypeAdapter<T>) new TypeAdapter<SelfieInspection>() {
           @Override
           public void write(JsonWriter out, SelfieInspection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelfieInspection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelfieInspection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelfieInspection
   * @throws IOException if the JSON string is invalid with respect to SelfieInspection
   */
  public static SelfieInspection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelfieInspection.class);
  }

  /**
   * Convert an instance of SelfieInspection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

