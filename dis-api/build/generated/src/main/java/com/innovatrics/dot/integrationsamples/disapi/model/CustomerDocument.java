/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.Barcode;
import com.innovatrics.dot.integrationsamples.disapi.model.CustomerDocumentLinks;
import com.innovatrics.dot.integrationsamples.disapi.model.DocumentType;
import com.innovatrics.dot.integrationsamples.disapi.model.Mrz;
import com.innovatrics.dot.integrationsamples.disapi.model.MultiValueAttribute;
import com.innovatrics.dot.integrationsamples.disapi.model.MultiValueAttributeWithoutMrz;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Details of the customer&#39;s document retrieved by OCR from ID document photo. The dates are in format YYYY-MM-DD.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class CustomerDocument {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DocumentType type;

  public static final String SERIALIZED_NAME_PAGE_TYPES = "pageTypes";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPES)
  private List<String> pageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_ISSUE = "dateOfIssue";
  @SerializedName(SERIALIZED_NAME_DATE_OF_ISSUE)
  private MultiValueAttribute dateOfIssue;

  public static final String SERIALIZED_NAME_DATE_OF_EXPIRY = "dateOfExpiry";
  @SerializedName(SERIALIZED_NAME_DATE_OF_EXPIRY)
  private MultiValueAttribute dateOfExpiry;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private MultiValueAttribute documentNumber;

  public static final String SERIALIZED_NAME_ISSUING_AUTHORITY = "issuingAuthority";
  @SerializedName(SERIALIZED_NAME_ISSUING_AUTHORITY)
  private MultiValueAttribute issuingAuthority;

  public static final String SERIALIZED_NAME_ADDITIONAL_TEXTS = "additionalTexts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TEXTS)
  private Map<String, MultiValueAttributeWithoutMrz> additionalTexts = new HashMap<>();

  public static final String SERIALIZED_NAME_MRZ = "mrz";
  @SerializedName(SERIALIZED_NAME_MRZ)
  private Mrz mrz;

  public static final String SERIALIZED_NAME_BARCODES = "barcodes";
  @SerializedName(SERIALIZED_NAME_BARCODES)
  private Map<String, Map<String, Barcode>> barcodes = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private CustomerDocumentLinks links;

  public CustomerDocument() {
  }

  public CustomerDocument(
     List<String> pageTypes, 
     Map<String, MultiValueAttributeWithoutMrz> additionalTexts, 
     Map<String, Map<String, Barcode>> barcodes
  ) {
    this();
    this.pageTypes = pageTypes;
    this.additionalTexts = additionalTexts;
    this.barcodes = barcodes;
  }

  public CustomerDocument type(DocumentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public DocumentType getType() {
    return type;
  }

  public void setType(DocumentType type) {
    this.type = type;
  }


  /**
   * Document&#39;s page types
   * @return pageTypes
   */
  @javax.annotation.Nonnull
  public List<String> getPageTypes() {
    return pageTypes;
  }



  public CustomerDocument dateOfIssue(MultiValueAttribute dateOfIssue) {
    this.dateOfIssue = dateOfIssue;
    return this;
  }

  /**
   * Get dateOfIssue
   * @return dateOfIssue
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getDateOfIssue() {
    return dateOfIssue;
  }

  public void setDateOfIssue(MultiValueAttribute dateOfIssue) {
    this.dateOfIssue = dateOfIssue;
  }


  public CustomerDocument dateOfExpiry(MultiValueAttribute dateOfExpiry) {
    this.dateOfExpiry = dateOfExpiry;
    return this;
  }

  /**
   * Get dateOfExpiry
   * @return dateOfExpiry
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getDateOfExpiry() {
    return dateOfExpiry;
  }

  public void setDateOfExpiry(MultiValueAttribute dateOfExpiry) {
    this.dateOfExpiry = dateOfExpiry;
  }


  public CustomerDocument documentNumber(MultiValueAttribute documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Get documentNumber
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(MultiValueAttribute documentNumber) {
    this.documentNumber = documentNumber;
  }


  public CustomerDocument issuingAuthority(MultiValueAttribute issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
    return this;
  }

  /**
   * Get issuingAuthority
   * @return issuingAuthority
   */
  @javax.annotation.Nullable
  public MultiValueAttribute getIssuingAuthority() {
    return issuingAuthority;
  }

  public void setIssuingAuthority(MultiValueAttribute issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
  }


  /**
   * The map of additional document texts. The map keys are text field types.
   * @return additionalTexts
   */
  @javax.annotation.Nullable
  public Map<String, MultiValueAttributeWithoutMrz> getAdditionalTexts() {
    return additionalTexts;
  }



  public CustomerDocument mrz(Mrz mrz) {
    this.mrz = mrz;
    return this;
  }

  /**
   * Get mrz
   * @return mrz
   */
  @javax.annotation.Nullable
  public Mrz getMrz() {
    return mrz;
  }

  public void setMrz(Mrz mrz) {
    this.mrz = mrz;
  }


  /**
   * Get barcodes
   * @return barcodes
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Barcode>> getBarcodes() {
    return barcodes;
  }



  public CustomerDocument links(CustomerDocumentLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public CustomerDocumentLinks getLinks() {
    return links;
  }

  public void setLinks(CustomerDocumentLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDocument customerDocument = (CustomerDocument) o;
    return Objects.equals(this.type, customerDocument.type) &&
        Objects.equals(this.pageTypes, customerDocument.pageTypes) &&
        Objects.equals(this.dateOfIssue, customerDocument.dateOfIssue) &&
        Objects.equals(this.dateOfExpiry, customerDocument.dateOfExpiry) &&
        Objects.equals(this.documentNumber, customerDocument.documentNumber) &&
        Objects.equals(this.issuingAuthority, customerDocument.issuingAuthority) &&
        Objects.equals(this.additionalTexts, customerDocument.additionalTexts) &&
        Objects.equals(this.mrz, customerDocument.mrz) &&
        Objects.equals(this.barcodes, customerDocument.barcodes) &&
        Objects.equals(this.links, customerDocument.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, pageTypes, dateOfIssue, dateOfExpiry, documentNumber, issuingAuthority, additionalTexts, mrz, barcodes, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDocument {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pageTypes: ").append(toIndentedString(pageTypes)).append("\n");
    sb.append("    dateOfIssue: ").append(toIndentedString(dateOfIssue)).append("\n");
    sb.append("    dateOfExpiry: ").append(toIndentedString(dateOfExpiry)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    issuingAuthority: ").append(toIndentedString(issuingAuthority)).append("\n");
    sb.append("    additionalTexts: ").append(toIndentedString(additionalTexts)).append("\n");
    sb.append("    mrz: ").append(toIndentedString(mrz)).append("\n");
    sb.append("    barcodes: ").append(toIndentedString(barcodes)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("pageTypes");
    openapiFields.add("dateOfIssue");
    openapiFields.add("dateOfExpiry");
    openapiFields.add("documentNumber");
    openapiFields.add("issuingAuthority");
    openapiFields.add("additionalTexts");
    openapiFields.add("mrz");
    openapiFields.add("barcodes");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pageTypes");
    openapiRequiredFields.add("links");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDocument is not found in the empty JSON string", CustomerDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        DocumentType.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the required json array is present
      if (jsonObj.get("pageTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("pageTypes").toString()));
      }
      // validate the optional field `dateOfIssue`
      if (jsonObj.get("dateOfIssue") != null && !jsonObj.get("dateOfIssue").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("dateOfIssue"));
      }
      // validate the optional field `dateOfExpiry`
      if (jsonObj.get("dateOfExpiry") != null && !jsonObj.get("dateOfExpiry").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("dateOfExpiry"));
      }
      // validate the optional field `documentNumber`
      if (jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("documentNumber"));
      }
      // validate the optional field `issuingAuthority`
      if (jsonObj.get("issuingAuthority") != null && !jsonObj.get("issuingAuthority").isJsonNull()) {
        MultiValueAttribute.validateJsonElement(jsonObj.get("issuingAuthority"));
      }
      // validate the optional field `mrz`
      if (jsonObj.get("mrz") != null && !jsonObj.get("mrz").isJsonNull()) {
        Mrz.validateJsonElement(jsonObj.get("mrz"));
      }
      // validate the required field `links`
      CustomerDocumentLinks.validateJsonElement(jsonObj.get("links"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDocument>() {
           @Override
           public void write(JsonWriter out, CustomerDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerDocument
   * @throws IOException if the JSON string is invalid with respect to CustomerDocument
   */
  public static CustomerDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDocument.class);
  }

  /**
   * Convert an instance of CustomerDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

