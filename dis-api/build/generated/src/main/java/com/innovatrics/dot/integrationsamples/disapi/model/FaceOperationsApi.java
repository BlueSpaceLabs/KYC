/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import com.innovatrics.dot.integrationsamples.disapi.ApiCallback;
import com.innovatrics.dot.integrationsamples.disapi.ApiClient;
import com.innovatrics.dot.integrationsamples.disapi.ApiException;
import com.innovatrics.dot.integrationsamples.disapi.ApiResponse;
import com.innovatrics.dot.integrationsamples.disapi.Configuration;
import com.innovatrics.dot.integrationsamples.disapi.Pair;
import com.innovatrics.dot.integrationsamples.disapi.ProgressRequestBody;
import com.innovatrics.dot.integrationsamples.disapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.innovatrics.dot.integrationsamples.disapi.model.CreateFaceRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateFaceResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CropCoordinatesResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.ErrorResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceAspectsResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceMaskResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceQualityResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceSimilarityRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceSimilarityResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.FaceTemplateResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.GlassesResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.ImageCrop;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FaceOperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FaceOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FaceOperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkFaceMask
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkFaceMaskCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/face-mask"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkFaceMaskValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling checkFaceMask(Async)");
        }

        return checkFaceMaskCall(id, _callback);

    }

    /**
     * Check if the face is covered by a mask
     * 
     * @param id  (required)
     * @return FaceMaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public FaceMaskResponse checkFaceMask(String id) throws ApiException {
        ApiResponse<FaceMaskResponse> localVarResp = checkFaceMaskWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check if the face is covered by a mask
     * 
     * @param id  (required)
     * @return ApiResponse&lt;FaceMaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FaceMaskResponse> checkFaceMaskWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = checkFaceMaskValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FaceMaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the face is covered by a mask (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkFaceMaskAsync(String id, final ApiCallback<FaceMaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkFaceMaskValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FaceMaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkGlasses
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkGlassesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/glasses"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkGlassesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling checkGlasses(Async)");
        }

        return checkGlassesCall(id, _callback);

    }

    /**
     * Check if glasses are present on the face
     * 
     * @param id  (required)
     * @return GlassesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public GlassesResponse checkGlasses(String id) throws ApiException {
        ApiResponse<GlassesResponse> localVarResp = checkGlassesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check if glasses are present on the face
     * 
     * @param id  (required)
     * @return ApiResponse&lt;GlassesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlassesResponse> checkGlassesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = checkGlassesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GlassesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if glasses are present on the face (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkGlassesAsync(String id, final ApiCallback<GlassesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkGlassesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GlassesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkQuality
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkQualityCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/quality"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkQualityValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling checkQuality(Async)");
        }

        return checkQualityCall(id, _callback);

    }

    /**
     * Get the face&#39;s quality
     * 
     * @param id  (required)
     * @return FaceQualityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public FaceQualityResponse checkQuality(String id) throws ApiException {
        ApiResponse<FaceQualityResponse> localVarResp = checkQualityWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the face&#39;s quality
     * 
     * @param id  (required)
     * @return ApiResponse&lt;FaceQualityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FaceQualityResponse> checkQualityWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = checkQualityValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FaceQualityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the face&#39;s quality (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkQualityAsync(String id, final ApiCallback<FaceQualityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkQualityValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FaceQualityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkSimilarity1
     * @param probeFaceId  (required)
     * @param faceSimilarityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - UNSUPPORTED_VERSION_TEMPLATE  - CORRUPTED_TEMPLATE  - INCOMPATIBLE_TEMPLATE </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSimilarity1Call(String probeFaceId, FaceSimilarityRequest faceSimilarityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = faceSimilarityRequest;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{probe_face_id}/similarity"
            .replace("{" + "probe_face_id" + "}", localVarApiClient.escapeString(probeFaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkSimilarity1ValidateBeforeCall(String probeFaceId, FaceSimilarityRequest faceSimilarityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'probeFaceId' is set
        if (probeFaceId == null) {
            throw new ApiException("Missing the required parameter 'probeFaceId' when calling checkSimilarity1(Async)");
        }

        // verify the required parameter 'faceSimilarityRequest' is set
        if (faceSimilarityRequest == null) {
            throw new ApiException("Missing the required parameter 'faceSimilarityRequest' when calling checkSimilarity1(Async)");
        }

        return checkSimilarity1Call(probeFaceId, faceSimilarityRequest, _callback);

    }

    /**
     * Match the probe face to the reference face
     * 
     * @param probeFaceId  (required)
     * @param faceSimilarityRequest  (required)
     * @return FaceSimilarityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - UNSUPPORTED_VERSION_TEMPLATE  - CORRUPTED_TEMPLATE  - INCOMPATIBLE_TEMPLATE </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public FaceSimilarityResponse checkSimilarity1(String probeFaceId, FaceSimilarityRequest faceSimilarityRequest) throws ApiException {
        ApiResponse<FaceSimilarityResponse> localVarResp = checkSimilarity1WithHttpInfo(probeFaceId, faceSimilarityRequest);
        return localVarResp.getData();
    }

    /**
     * Match the probe face to the reference face
     * 
     * @param probeFaceId  (required)
     * @param faceSimilarityRequest  (required)
     * @return ApiResponse&lt;FaceSimilarityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - UNSUPPORTED_VERSION_TEMPLATE  - CORRUPTED_TEMPLATE  - INCOMPATIBLE_TEMPLATE </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FaceSimilarityResponse> checkSimilarity1WithHttpInfo(String probeFaceId, FaceSimilarityRequest faceSimilarityRequest) throws ApiException {
        okhttp3.Call localVarCall = checkSimilarity1ValidateBeforeCall(probeFaceId, faceSimilarityRequest, null);
        Type localVarReturnType = new TypeToken<FaceSimilarityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Match the probe face to the reference face (asynchronously)
     * 
     * @param probeFaceId  (required)
     * @param faceSimilarityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - UNSUPPORTED_VERSION_TEMPLATE  - CORRUPTED_TEMPLATE  - INCOMPATIBLE_TEMPLATE </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkSimilarity1Async(String probeFaceId, FaceSimilarityRequest faceSimilarityRequest, final ApiCallback<FaceSimilarityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkSimilarity1ValidateBeforeCall(probeFaceId, faceSimilarityRequest, _callback);
        Type localVarReturnType = new TypeToken<FaceSimilarityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTemplate
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/face-template"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTemplate(Async)");
        }

        return createTemplateCall(id, _callback);

    }

    /**
     * Get the face&#39;s template
     * 
     * @param id  (required)
     * @return FaceTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public FaceTemplateResponse createTemplate(String id) throws ApiException {
        ApiResponse<FaceTemplateResponse> localVarResp = createTemplateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the face&#39;s template
     * 
     * @param id  (required)
     * @return ApiResponse&lt;FaceTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FaceTemplateResponse> createTemplateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FaceTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the face&#39;s template (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateAsync(String id, final ApiCallback<FaceTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FaceTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFace
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFaceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFaceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFace(Async)");
        }

        return deleteFaceCall(id, _callback);

    }

    /**
     * Delete the face
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFace(String id) throws ApiException {
        deleteFaceWithHttpInfo(id);
    }

    /**
     * Delete the face
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFaceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteFaceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the face (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFaceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFaceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for detect1
     * @param createFaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - FACE_SIZE_MEMORY_LIMIT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detect1Call(CreateFaceRequest createFaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFaceRequest;

        // create path and map variables
        String localVarPath = "/api/v1/faces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detect1ValidateBeforeCall(CreateFaceRequest createFaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFaceRequest' is set
        if (createFaceRequest == null) {
            throw new ApiException("Missing the required parameter 'createFaceRequest' when calling detect1(Async)");
        }

        return detect1Call(createFaceRequest, _callback);

    }

    /**
     * Create a face from the photo (face detection)
     * 
     * @param createFaceRequest  (required)
     * @return CreateFaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - FACE_SIZE_MEMORY_LIMIT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateFaceResponse detect1(CreateFaceRequest createFaceRequest) throws ApiException {
        ApiResponse<CreateFaceResponse> localVarResp = detect1WithHttpInfo(createFaceRequest);
        return localVarResp.getData();
    }

    /**
     * Create a face from the photo (face detection)
     * 
     * @param createFaceRequest  (required)
     * @return ApiResponse&lt;CreateFaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - FACE_SIZE_MEMORY_LIMIT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFaceResponse> detect1WithHttpInfo(CreateFaceRequest createFaceRequest) throws ApiException {
        okhttp3.Call localVarCall = detect1ValidateBeforeCall(createFaceRequest, null);
        Type localVarReturnType = new TypeToken<CreateFaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a face from the photo (face detection) (asynchronously)
     * 
     * @param createFaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_REQUEST_BODY  - INVALID_IMAGE  - FACE_SIZE_MEMORY_LIMIT </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detect1Async(CreateFaceRequest createFaceRequest, final ApiCallback<CreateFaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detect1ValidateBeforeCall(createFaceRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doCrop
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/crop"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doCropValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doCrop(Async)");
        }

        return doCropCall(id, width, height, _callback);

    }

    /**
     * Get the face&#39;s crop
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop doCrop(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = doCropWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get the face&#39;s crop
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> doCropWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = doCropValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the face&#39;s crop (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = doCropValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doCropCoordinates
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropCoordinatesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/crop/coordinates"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doCropCoordinatesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doCropCoordinates(Async)");
        }

        return doCropCoordinatesCall(id, _callback);

    }

    /**
     * Get face&#39;s crop coordinates
     * 
     * @param id  (required)
     * @return CropCoordinatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CropCoordinatesResponse doCropCoordinates(String id) throws ApiException {
        ApiResponse<CropCoordinatesResponse> localVarResp = doCropCoordinatesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get face&#39;s crop coordinates
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CropCoordinatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CropCoordinatesResponse> doCropCoordinatesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = doCropCoordinatesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CropCoordinatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get face&#39;s crop coordinates (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropCoordinatesAsync(String id, final ApiCallback<CropCoordinatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = doCropCoordinatesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CropCoordinatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doCropRemoveBackground
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropRemoveBackgroundCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/crop/removed-background"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doCropRemoveBackgroundValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling doCropRemoveBackground(Async)");
        }

        return doCropRemoveBackgroundCall(id, width, height, _callback);

    }

    /**
     * Get the face&#39;s crop with removed background
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop doCropRemoveBackground(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = doCropRemoveBackgroundWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get the face&#39;s crop with removed background
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> doCropRemoveBackgroundWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = doCropRemoveBackgroundValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the face&#39;s crop with removed background (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doCropRemoveBackgroundAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = doCropRemoveBackgroundValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluateAspects
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateAspectsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/faces/{id}/aspects"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateAspectsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling evaluateAspects(Async)");
        }

        return evaluateAspectsCall(id, _callback);

    }

    /**
     * Get face&#39;s aspects
     * 
     * @param id  (required)
     * @return FaceAspectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public FaceAspectsResponse evaluateAspects(String id) throws ApiException {
        ApiResponse<FaceAspectsResponse> localVarResp = evaluateAspectsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get face&#39;s aspects
     * 
     * @param id  (required)
     * @return ApiResponse&lt;FaceAspectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FaceAspectsResponse> evaluateAspectsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = evaluateAspectsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FaceAspectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get face&#39;s aspects (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateAspectsAsync(String id, final ApiCallback<FaceAspectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateAspectsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FaceAspectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
