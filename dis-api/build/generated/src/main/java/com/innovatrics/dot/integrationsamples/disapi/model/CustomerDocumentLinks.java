/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Links to cropped images from the customer&#39;s document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:31:50.465535+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class CustomerDocumentLinks {
  public static final String SERIALIZED_NAME_PORTRAIT = "portrait";
  @SerializedName(SERIALIZED_NAME_PORTRAIT)
  private String portrait;

  public static final String SERIALIZED_NAME_CHIP_PORTRAIT = "chipPortrait";
  @SerializedName(SERIALIZED_NAME_CHIP_PORTRAIT)
  private String chipPortrait;

  public static final String SERIALIZED_NAME_GHOST_PORTRAIT = "ghostPortrait";
  @SerializedName(SERIALIZED_NAME_GHOST_PORTRAIT)
  private String ghostPortrait;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Map<String, String> pages = new HashMap<>();

  public CustomerDocumentLinks() {
  }

  public CustomerDocumentLinks(
     String portrait, 
     String chipPortrait, 
     String ghostPortrait, 
     String signature, 
     String fingerprint, 
     Map<String, String> pages
  ) {
    this();
    this.portrait = portrait;
    this.chipPortrait = chipPortrait;
    this.ghostPortrait = ghostPortrait;
    this.signature = signature;
    this.fingerprint = fingerprint;
    this.pages = pages;
  }

  /**
   * The document&#39;s portrait link
   * @return portrait
   */
  @javax.annotation.Nullable
  public String getPortrait() {
    return portrait;
  }



  /**
   * The document&#39;s chip portrait link
   * @return chipPortrait
   */
  @javax.annotation.Nullable
  public String getChipPortrait() {
    return chipPortrait;
  }



  /**
   * The document&#39;s ghost portrait link
   * @return ghostPortrait
   */
  @javax.annotation.Nullable
  public String getGhostPortrait() {
    return ghostPortrait;
  }



  /**
   * The document&#39;s signature image link
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }



  /**
   * The document&#39;s fingerprint image link
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }



  /**
   * The map of links to the document&#39;s pages. The map keys are page types.
   * @return pages
   */
  @javax.annotation.Nullable
  public Map<String, String> getPages() {
    return pages;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDocumentLinks customerDocumentLinks = (CustomerDocumentLinks) o;
    return Objects.equals(this.portrait, customerDocumentLinks.portrait) &&
        Objects.equals(this.chipPortrait, customerDocumentLinks.chipPortrait) &&
        Objects.equals(this.ghostPortrait, customerDocumentLinks.ghostPortrait) &&
        Objects.equals(this.signature, customerDocumentLinks.signature) &&
        Objects.equals(this.fingerprint, customerDocumentLinks.fingerprint) &&
        Objects.equals(this.pages, customerDocumentLinks.pages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portrait, chipPortrait, ghostPortrait, signature, fingerprint, pages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDocumentLinks {\n");
    sb.append("    portrait: ").append(toIndentedString(portrait)).append("\n");
    sb.append("    chipPortrait: ").append(toIndentedString(chipPortrait)).append("\n");
    sb.append("    ghostPortrait: ").append(toIndentedString(ghostPortrait)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("portrait");
    openapiFields.add("chipPortrait");
    openapiFields.add("ghostPortrait");
    openapiFields.add("signature");
    openapiFields.add("fingerprint");
    openapiFields.add("pages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerDocumentLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerDocumentLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDocumentLinks is not found in the empty JSON string", CustomerDocumentLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerDocumentLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDocumentLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("portrait") != null && !jsonObj.get("portrait").isJsonNull()) && !jsonObj.get("portrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portrait").toString()));
      }
      if ((jsonObj.get("chipPortrait") != null && !jsonObj.get("chipPortrait").isJsonNull()) && !jsonObj.get("chipPortrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chipPortrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chipPortrait").toString()));
      }
      if ((jsonObj.get("ghostPortrait") != null && !jsonObj.get("ghostPortrait").isJsonNull()) && !jsonObj.get("ghostPortrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ghostPortrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ghostPortrait").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDocumentLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDocumentLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDocumentLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDocumentLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDocumentLinks>() {
           @Override
           public void write(JsonWriter out, CustomerDocumentLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDocumentLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerDocumentLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerDocumentLinks
   * @throws IOException if the JSON string is invalid with respect to CustomerDocumentLinks
   */
  public static CustomerDocumentLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDocumentLinks.class);
  }

  /**
   * Convert an instance of CustomerDocumentLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

