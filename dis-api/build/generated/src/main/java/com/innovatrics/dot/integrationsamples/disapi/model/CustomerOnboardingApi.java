/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import com.innovatrics.dot.integrationsamples.disapi.ApiCallback;
import com.innovatrics.dot.integrationsamples.disapi.ApiClient;
import com.innovatrics.dot.integrationsamples.disapi.ApiException;
import com.innovatrics.dot.integrationsamples.disapi.ApiResponse;
import com.innovatrics.dot.integrationsamples.disapi.Configuration;
import com.innovatrics.dot.integrationsamples.disapi.Pair;
import com.innovatrics.dot.integrationsamples.disapi.ProgressRequestBody;
import com.innovatrics.dot.integrationsamples.disapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.innovatrics.dot.integrationsamples.disapi.model.CreateCustomerLivenessRecordResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateCustomerLivenessResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateCustomerLivenessSelfieRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateCustomerLivenessSelfieResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateCustomerResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentChipDataResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentChipResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentPageRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentPageResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateDocumentResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateSelfieRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.CreateSelfieResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CustomerInspectDiscloseResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.CustomerInspectResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.DocumentInspectDiscloseResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.DocumentInspectResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.DocumentPageQuality;
import com.innovatrics.dot.integrationsamples.disapi.model.ErrorResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.EvaluateCustomerLivenessRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.EvaluateCustomerLivenessResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.GetCustomerResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.ImageCrop;
import com.innovatrics.dot.integrationsamples.disapi.model.LivenessChallengeRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.LivenessChallengeResponse;
import com.innovatrics.dot.integrationsamples.disapi.model.RetrieveLivenessSelfiesRequest;
import com.innovatrics.dot.integrationsamples.disapi.model.RetrieveLivenessSelfiesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerOnboardingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerOnboardingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerOnboardingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomer
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createCustomerCall(_callback);

    }

    /**
     * Create a customer
     * 
     * @return CreateCustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerResponse createCustomer() throws ApiException {
        ApiResponse<CreateCustomerResponse> localVarResp = createCustomerWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Create a customer
     * 
     * @return ApiResponse&lt;CreateCustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerResponse> createCustomerWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreateCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a customer (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerAsync(final ApiCallback<CreateCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreateCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerWithUuid
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request  Possible error codes:  - ALREADY_EXISTS </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerWithUuidCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerWithUuidValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createCustomerWithUuid(Async)");
        }

        return createCustomerWithUuidCall(id, _callback);

    }

    /**
     * Create a customer with a custom UUIDv4
     * 
     * @param id  (required)
     * @return CreateCustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request  Possible error codes:  - ALREADY_EXISTS </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerResponse createCustomerWithUuid(String id) throws ApiException {
        ApiResponse<CreateCustomerResponse> localVarResp = createCustomerWithUuidWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Create a customer with a custom UUIDv4
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CreateCustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request  Possible error codes:  - ALREADY_EXISTS </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerResponse> createCustomerWithUuidWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createCustomerWithUuidValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a customer with a custom UUIDv4 (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request  Possible error codes:  - ALREADY_EXISTS </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerWithUuidAsync(String id, final ApiCallback<CreateCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerWithUuidValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocument
     * @param id  (required)
     * @param createDocumentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentCall(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDocumentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentValidateBeforeCall(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDocument(Async)");
        }

        // verify the required parameter 'createDocumentRequest' is set
        if (createDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'createDocumentRequest' when calling createDocument(Async)");
        }

        return createDocumentCall(id, createDocumentRequest, _callback);

    }

    /**
     * Create customer&#39;s document
     * 
     * @param id  (required)
     * @param createDocumentRequest  (required)
     * @return CreateDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateDocumentResponse createDocument(String id, CreateDocumentRequest createDocumentRequest) throws ApiException {
        ApiResponse<CreateDocumentResponse> localVarResp = createDocumentWithHttpInfo(id, createDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Create customer&#39;s document
     * 
     * @param id  (required)
     * @param createDocumentRequest  (required)
     * @return ApiResponse&lt;CreateDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDocumentResponse> createDocumentWithHttpInfo(String id, CreateDocumentRequest createDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(id, createDocumentRequest, null);
        Type localVarReturnType = new TypeToken<CreateDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create customer&#39;s document (asynchronously)
     * 
     * @param id  (required)
     * @param createDocumentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentAsync(String id, CreateDocumentRequest createDocumentRequest, final ApiCallback<CreateDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(id, createDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocumentChipChallenge
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentChipChallengeCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/chip/challenge"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentChipChallengeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDocumentChipChallenge(Async)");
        }

        return createDocumentChipChallengeCall(id, _callback);

    }

    /**
     * Create customer&#39;s challengeBytes for document chip
     * 
     * @param id  (required)
     * @return CreateDocumentChipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateDocumentChipResponse createDocumentChipChallenge(String id) throws ApiException {
        ApiResponse<CreateDocumentChipResponse> localVarResp = createDocumentChipChallengeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Create customer&#39;s challengeBytes for document chip
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CreateDocumentChipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDocumentChipResponse> createDocumentChipChallengeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createDocumentChipChallengeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateDocumentChipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create customer&#39;s challengeBytes for document chip (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentChipChallengeAsync(String id, final ApiCallback<CreateDocumentChipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentChipChallengeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateDocumentChipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocumentChipData
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentChipDataCall(String id, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/chip/data"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentChipDataValidateBeforeCall(String id, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDocumentChipData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDocumentChipData(Async)");
        }

        return createDocumentChipDataCall(id, body, _callback);

    }

    /**
     * Create customer&#39;s document chip data
     * 
     * @param id  (required)
     * @param body  (required)
     * @return CreateDocumentChipDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateDocumentChipDataResponse createDocumentChipData(String id, byte[] body) throws ApiException {
        ApiResponse<CreateDocumentChipDataResponse> localVarResp = createDocumentChipDataWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Create customer&#39;s document chip data
     * 
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CreateDocumentChipDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDocumentChipDataResponse> createDocumentChipDataWithHttpInfo(String id, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createDocumentChipDataValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<CreateDocumentChipDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create customer&#39;s document chip data (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentChipDataAsync(String id, byte[] body, final ApiCallback<CreateDocumentChipDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentChipDataValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<CreateDocumentChipDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocumentPage1
     * @param id  (required)
     * @param createDocumentPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentPage1Call(String id, CreateDocumentPageRequest createDocumentPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDocumentPageRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/pages"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentPage1ValidateBeforeCall(String id, CreateDocumentPageRequest createDocumentPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createDocumentPage1(Async)");
        }

        // verify the required parameter 'createDocumentPageRequest' is set
        if (createDocumentPageRequest == null) {
            throw new ApiException("Missing the required parameter 'createDocumentPageRequest' when calling createDocumentPage1(Async)");
        }

        return createDocumentPage1Call(id, createDocumentPageRequest, _callback);

    }

    /**
     * Provide customer&#39;s document page
     * 
     * @param id  (required)
     * @param createDocumentPageRequest  (required)
     * @return CreateDocumentPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateDocumentPageResponse createDocumentPage1(String id, CreateDocumentPageRequest createDocumentPageRequest) throws ApiException {
        ApiResponse<CreateDocumentPageResponse> localVarResp = createDocumentPage1WithHttpInfo(id, createDocumentPageRequest);
        return localVarResp.getData();
    }

    /**
     * Provide customer&#39;s document page
     * 
     * @param id  (required)
     * @param createDocumentPageRequest  (required)
     * @return ApiResponse&lt;CreateDocumentPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDocumentPageResponse> createDocumentPage1WithHttpInfo(String id, CreateDocumentPageRequest createDocumentPageRequest) throws ApiException {
        okhttp3.Call localVarCall = createDocumentPage1ValidateBeforeCall(id, createDocumentPageRequest, null);
        Type localVarReturnType = new TypeToken<CreateDocumentPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide customer&#39;s document page (asynchronously)
     * 
     * @param id  (required)
     * @param createDocumentPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentPage1Async(String id, CreateDocumentPageRequest createDocumentPageRequest, final ApiCallback<CreateDocumentPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentPage1ValidateBeforeCall(id, createDocumentPageRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDocumentPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLiveness
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivenessValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLiveness(Async)");
        }

        return createLivenessCall(id, _callback);

    }

    /**
     * Create customer&#39;s liveness
     * 
     * @param id  (required)
     * @return CreateCustomerLivenessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerLivenessResponse createLiveness(String id) throws ApiException {
        ApiResponse<CreateCustomerLivenessResponse> localVarResp = createLivenessWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Create customer&#39;s liveness
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CreateCustomerLivenessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerLivenessResponse> createLivenessWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = createLivenessValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create customer&#39;s liveness (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessAsync(String id, final ApiCallback<CreateCustomerLivenessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLivenessValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLivenessRecord
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessRecordCall(String id, byte[] body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/records"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivenessRecordValidateBeforeCall(String id, byte[] body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLivenessRecord(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLivenessRecord(Async)");
        }

        return createLivenessRecordCall(id, body, _callback);

    }

    /**
     * Provide customer&#39;s liveness record
     * 
     * @param id  (required)
     * @param body  (required)
     * @return CreateCustomerLivenessRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerLivenessRecordResponse createLivenessRecord(String id, byte[] body) throws ApiException {
        ApiResponse<CreateCustomerLivenessRecordResponse> localVarResp = createLivenessRecordWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Provide customer&#39;s liveness record
     * 
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;CreateCustomerLivenessRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerLivenessRecordResponse> createLivenessRecordWithHttpInfo(String id, byte[] body) throws ApiException {
        okhttp3.Call localVarCall = createLivenessRecordValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide customer&#39;s liveness record (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessRecordAsync(String id, byte[] body, final ApiCallback<CreateCustomerLivenessRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLivenessRecordValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLivenessRecordChallenge
     * @param id  (required)
     * @param livenessChallengeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessRecordChallengeCall(String id, LivenessChallengeRequest livenessChallengeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = livenessChallengeRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/records/challenge"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivenessRecordChallengeValidateBeforeCall(String id, LivenessChallengeRequest livenessChallengeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLivenessRecordChallenge(Async)");
        }

        // verify the required parameter 'livenessChallengeRequest' is set
        if (livenessChallengeRequest == null) {
            throw new ApiException("Missing the required parameter 'livenessChallengeRequest' when calling createLivenessRecordChallenge(Async)");
        }

        return createLivenessRecordChallengeCall(id, livenessChallengeRequest, _callback);

    }

    /**
     * Create customer&#39;s liveness record challenge
     * 
     * @param id  (required)
     * @param livenessChallengeRequest  (required)
     * @return LivenessChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public LivenessChallengeResponse createLivenessRecordChallenge(String id, LivenessChallengeRequest livenessChallengeRequest) throws ApiException {
        ApiResponse<LivenessChallengeResponse> localVarResp = createLivenessRecordChallengeWithHttpInfo(id, livenessChallengeRequest);
        return localVarResp.getData();
    }

    /**
     * Create customer&#39;s liveness record challenge
     * 
     * @param id  (required)
     * @param livenessChallengeRequest  (required)
     * @return ApiResponse&lt;LivenessChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LivenessChallengeResponse> createLivenessRecordChallengeWithHttpInfo(String id, LivenessChallengeRequest livenessChallengeRequest) throws ApiException {
        okhttp3.Call localVarCall = createLivenessRecordChallengeValidateBeforeCall(id, livenessChallengeRequest, null);
        Type localVarReturnType = new TypeToken<LivenessChallengeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create customer&#39;s liveness record challenge (asynchronously)
     * 
     * @param id  (required)
     * @param livenessChallengeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessRecordChallengeAsync(String id, LivenessChallengeRequest livenessChallengeRequest, final ApiCallback<LivenessChallengeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLivenessRecordChallengeValidateBeforeCall(id, livenessChallengeRequest, _callback);
        Type localVarReturnType = new TypeToken<LivenessChallengeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLivenessSelfie
     * @param id  (required)
     * @param createCustomerLivenessSelfieRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessSelfieCall(String id, CreateCustomerLivenessSelfieRequest createCustomerLivenessSelfieRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomerLivenessSelfieRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/selfies"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivenessSelfieValidateBeforeCall(String id, CreateCustomerLivenessSelfieRequest createCustomerLivenessSelfieRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLivenessSelfie(Async)");
        }

        // verify the required parameter 'createCustomerLivenessSelfieRequest' is set
        if (createCustomerLivenessSelfieRequest == null) {
            throw new ApiException("Missing the required parameter 'createCustomerLivenessSelfieRequest' when calling createLivenessSelfie(Async)");
        }

        return createLivenessSelfieCall(id, createCustomerLivenessSelfieRequest, _callback);

    }

    /**
     * Provide customer&#39;s liveness selfie
     * 
     * @param id  (required)
     * @param createCustomerLivenessSelfieRequest  (required)
     * @return CreateCustomerLivenessSelfieResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomerLivenessSelfieResponse createLivenessSelfie(String id, CreateCustomerLivenessSelfieRequest createCustomerLivenessSelfieRequest) throws ApiException {
        ApiResponse<CreateCustomerLivenessSelfieResponse> localVarResp = createLivenessSelfieWithHttpInfo(id, createCustomerLivenessSelfieRequest);
        return localVarResp.getData();
    }

    /**
     * Provide customer&#39;s liveness selfie
     * 
     * @param id  (required)
     * @param createCustomerLivenessSelfieRequest  (required)
     * @return ApiResponse&lt;CreateCustomerLivenessSelfieResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomerLivenessSelfieResponse> createLivenessSelfieWithHttpInfo(String id, CreateCustomerLivenessSelfieRequest createCustomerLivenessSelfieRequest) throws ApiException {
        okhttp3.Call localVarCall = createLivenessSelfieValidateBeforeCall(id, createCustomerLivenessSelfieRequest, null);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessSelfieResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide customer&#39;s liveness selfie (asynchronously)
     * 
     * @param id  (required)
     * @param createCustomerLivenessSelfieRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLivenessSelfieAsync(String id, CreateCustomerLivenessSelfieRequest createCustomerLivenessSelfieRequest, final ApiCallback<CreateCustomerLivenessSelfieResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLivenessSelfieValidateBeforeCall(id, createCustomerLivenessSelfieRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomerLivenessSelfieResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSelfie1
     * @param id  (required)
     * @param createSelfieRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSelfie1Call(String id, CreateSelfieRequest createSelfieRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSelfieRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/selfie"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSelfie1ValidateBeforeCall(String id, CreateSelfieRequest createSelfieRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSelfie1(Async)");
        }

        // verify the required parameter 'createSelfieRequest' is set
        if (createSelfieRequest == null) {
            throw new ApiException("Missing the required parameter 'createSelfieRequest' when calling createSelfie1(Async)");
        }

        return createSelfie1Call(id, createSelfieRequest, _callback);

    }

    /**
     * Provide customer&#39;s selfie
     * 
     * @param id  (required)
     * @param createSelfieRequest  (required)
     * @return CreateSelfieResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CreateSelfieResponse createSelfie1(String id, CreateSelfieRequest createSelfieRequest) throws ApiException {
        ApiResponse<CreateSelfieResponse> localVarResp = createSelfie1WithHttpInfo(id, createSelfieRequest);
        return localVarResp.getData();
    }

    /**
     * Provide customer&#39;s selfie
     * 
     * @param id  (required)
     * @param createSelfieRequest  (required)
     * @return ApiResponse&lt;CreateSelfieResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSelfieResponse> createSelfie1WithHttpInfo(String id, CreateSelfieRequest createSelfieRequest) throws ApiException {
        okhttp3.Call localVarCall = createSelfie1ValidateBeforeCall(id, createSelfieRequest, null);
        Type localVarReturnType = new TypeToken<CreateSelfieResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide customer&#39;s selfie (asynchronously)
     * 
     * @param id  (required)
     * @param createSelfieRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY  - INVALID_IMAGE </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSelfie1Async(String id, CreateSelfieRequest createSelfieRequest, final ApiCallback<CreateSelfieResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSelfie1ValidateBeforeCall(id, createSelfieRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSelfieResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerLivenessRecordSelfie
     * @param id  (required)
     * @param recordId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerLivenessRecordSelfieCall(String id, String recordId, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/records/{recordId}/selfie"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "recordId" + "}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerLivenessRecordSelfieValidateBeforeCall(String id, String recordId, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerLivenessRecordSelfie(Async)");
        }

        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling customerLivenessRecordSelfie(Async)");
        }

        return customerLivenessRecordSelfieCall(id, recordId, width, height, _callback);

    }

    /**
     * Get customer&#39;s liveness record&#39;s selfie
     * 
     * @param id  (required)
     * @param recordId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop customerLivenessRecordSelfie(String id, String recordId, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = customerLivenessRecordSelfieWithHttpInfo(id, recordId, width, height);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s liveness record&#39;s selfie
     * 
     * @param id  (required)
     * @param recordId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> customerLivenessRecordSelfieWithHttpInfo(String id, String recordId, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = customerLivenessRecordSelfieValidateBeforeCall(id, recordId, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s liveness record&#39;s selfie (asynchronously)
     * 
     * @param id  (required)
     * @param recordId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerLivenessRecordSelfieAsync(String id, String recordId, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerLivenessRecordSelfieValidateBeforeCall(id, recordId, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomer
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomer(Async)");
        }

        return deleteCustomerCall(id, _callback);

    }

    /**
     * Delete the customer
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomer(String id) throws ApiException {
        deleteCustomerWithHttpInfo(id);
    }

    /**
     * Delete the customer
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the customer (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(id, _callback);

    }

    /**
     * Delete customer&#39;s document
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String id) throws ApiException {
        deleteDocumentWithHttpInfo(id);
    }

    /**
     * Delete customer&#39;s document
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete customer&#39;s document (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLiveness
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLivenessCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLivenessValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLiveness(Async)");
        }

        return deleteLivenessCall(id, _callback);

    }

    /**
     * Delete customer&#39;s liveness
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteLiveness(String id) throws ApiException {
        deleteLivenessWithHttpInfo(id);
    }

    /**
     * Delete customer&#39;s liveness
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteLivenessWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteLivenessValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete customer&#39;s liveness (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLivenessAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLivenessValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfie
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfieCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/selfie"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfieValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSelfie(Async)");
        }

        return deleteSelfieCall(id, _callback);

    }

    /**
     * Delete customer&#39;s selfie
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfie(String id) throws ApiException {
        deleteSelfieWithHttpInfo(id);
    }

    /**
     * Delete customer&#39;s selfie
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfieWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfieValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete customer&#39;s selfie (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfieAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfieValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentChipPortrait
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentChipPortraitCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/chip/portrait"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentChipPortraitValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentChipPortrait(Async)");
        }

        return documentChipPortraitCall(id, _callback);

    }

    /**
     * Get customer&#39;s document chip portrait
     * 
     * @param id  (required)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentChipPortrait(String id) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentChipPortraitWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s document chip portrait
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentChipPortraitWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentChipPortraitValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s document chip portrait (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentChipPortraitAsync(String id, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentChipPortraitValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentFingerprint
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFingerprintCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/fingerprint"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentFingerprintValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentFingerprint(Async)");
        }

        return documentFingerprintCall(id, width, height, _callback);

    }

    /**
     * Get customer&#39;s fingerprint from the document
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentFingerprint(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentFingerprintWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s fingerprint from the document
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentFingerprintWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = documentFingerprintValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s fingerprint from the document (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentFingerprintAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentFingerprintValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentGhostPortrait
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentGhostPortraitCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/ghost-portrait"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentGhostPortraitValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentGhostPortrait(Async)");
        }

        return documentGhostPortraitCall(id, width, height, _callback);

    }

    /**
     * Get customer&#39;s document ghost portrait
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentGhostPortrait(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentGhostPortraitWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s document ghost portrait
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentGhostPortraitWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = documentGhostPortraitValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s document ghost portrait (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentGhostPortraitAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentGhostPortraitValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentInspect
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInspectCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/inspect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentInspectValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentInspect(Async)");
        }

        return documentInspectCall(id, _callback);

    }

    /**
     * Inspect customer&#39;s document
     * 
     * @param id  (required)
     * @return DocumentInspectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public DocumentInspectResponse documentInspect(String id) throws ApiException {
        ApiResponse<DocumentInspectResponse> localVarResp = documentInspectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Inspect customer&#39;s document
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DocumentInspectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentInspectResponse> documentInspectWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentInspectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DocumentInspectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inspect customer&#39;s document (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInspectAsync(String id, final ApiCallback<DocumentInspectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentInspectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DocumentInspectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentInspectDisclose
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInspectDiscloseCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/inspect/disclose"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentInspectDiscloseValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentInspectDisclose(Async)");
        }

        return documentInspectDiscloseCall(id, _callback);

    }

    /**
     * Disclose customer&#39;s document inspection
     * 
     * @param id  (required)
     * @return DocumentInspectDiscloseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public DocumentInspectDiscloseResponse documentInspectDisclose(String id) throws ApiException {
        ApiResponse<DocumentInspectDiscloseResponse> localVarResp = documentInspectDiscloseWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Disclose customer&#39;s document inspection
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DocumentInspectDiscloseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentInspectDiscloseResponse> documentInspectDiscloseWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = documentInspectDiscloseValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DocumentInspectDiscloseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disclose customer&#39;s document inspection (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInspectDiscloseAsync(String id, final ApiCallback<DocumentInspectDiscloseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentInspectDiscloseValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DocumentInspectDiscloseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentPageCrop
     * @param id  (required)
     * @param pageType  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPageCropCall(String id, String pageType, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/pages/{page-type}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentPageCropValidateBeforeCall(String id, String pageType, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentPageCrop(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling documentPageCrop(Async)");
        }

        return documentPageCropCall(id, pageType, width, height, _callback);

    }

    /**
     * Get normalized image of the customer&#39;s document page
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentPageCrop(String id, String pageType, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentPageCropWithHttpInfo(id, pageType, width, height);
        return localVarResp.getData();
    }

    /**
     * Get normalized image of the customer&#39;s document page
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentPageCropWithHttpInfo(String id, String pageType, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = documentPageCropValidateBeforeCall(id, pageType, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get normalized image of the customer&#39;s document page (asynchronously)
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPageCropAsync(String id, String pageType, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentPageCropValidateBeforeCall(id, pageType, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentPageQuality
     * @param id  (required)
     * @param pageType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPageQualityCall(String id, String pageType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/pages/{page-type}/quality"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "page-type" + "}", localVarApiClient.escapeString(pageType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentPageQualityValidateBeforeCall(String id, String pageType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentPageQuality(Async)");
        }

        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling documentPageQuality(Async)");
        }

        return documentPageQualityCall(id, pageType, _callback);

    }

    /**
     * Check quality of the customer&#39;s document page
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @return DocumentPageQuality
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public DocumentPageQuality documentPageQuality(String id, String pageType) throws ApiException {
        ApiResponse<DocumentPageQuality> localVarResp = documentPageQualityWithHttpInfo(id, pageType);
        return localVarResp.getData();
    }

    /**
     * Check quality of the customer&#39;s document page
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @return ApiResponse&lt;DocumentPageQuality&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentPageQuality> documentPageQualityWithHttpInfo(String id, String pageType) throws ApiException {
        okhttp3.Call localVarCall = documentPageQualityValidateBeforeCall(id, pageType, null);
        Type localVarReturnType = new TypeToken<DocumentPageQuality>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check quality of the customer&#39;s document page (asynchronously)
     * 
     * @param id  (required)
     * @param pageType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPageQualityAsync(String id, String pageType, final ApiCallback<DocumentPageQuality> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentPageQualityValidateBeforeCall(id, pageType, _callback);
        Type localVarReturnType = new TypeToken<DocumentPageQuality>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentPortrait
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPortraitCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/portrait"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentPortraitValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentPortrait(Async)");
        }

        return documentPortraitCall(id, width, height, _callback);

    }

    /**
     * Get customer&#39;s document portrait
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentPortrait(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentPortraitWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s document portrait
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentPortraitWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = documentPortraitValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s document portrait (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentPortraitAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentPortraitValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentSignature
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentSignatureCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/signature"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentSignatureValidateBeforeCall(String id, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentSignature(Async)");
        }

        return documentSignatureCall(id, width, height, _callback);

    }

    /**
     * Get customer&#39;s document signature
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop documentSignature(String id, Integer width, Integer height) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = documentSignatureWithHttpInfo(id, width, height);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s document signature
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> documentSignatureWithHttpInfo(String id, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = documentSignatureValidateBeforeCall(id, width, height, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s document signature (asynchronously)
     * 
     * @param id  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentSignatureAsync(String id, Integer width, Integer height, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentSignatureValidateBeforeCall(id, width, height, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluateLiveness
     * @param id  (required)
     * @param evaluateCustomerLivenessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateLivenessCall(String id, EvaluateCustomerLivenessRequest evaluateCustomerLivenessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluateCustomerLivenessRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/evaluation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateLivenessValidateBeforeCall(String id, EvaluateCustomerLivenessRequest evaluateCustomerLivenessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling evaluateLiveness(Async)");
        }

        // verify the required parameter 'evaluateCustomerLivenessRequest' is set
        if (evaluateCustomerLivenessRequest == null) {
            throw new ApiException("Missing the required parameter 'evaluateCustomerLivenessRequest' when calling evaluateLiveness(Async)");
        }

        return evaluateLivenessCall(id, evaluateCustomerLivenessRequest, _callback);

    }

    /**
     * Evaluate customer&#39;s liveness
     * 
     * @param id  (required)
     * @param evaluateCustomerLivenessRequest  (required)
     * @return EvaluateCustomerLivenessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public EvaluateCustomerLivenessResponse evaluateLiveness(String id, EvaluateCustomerLivenessRequest evaluateCustomerLivenessRequest) throws ApiException {
        ApiResponse<EvaluateCustomerLivenessResponse> localVarResp = evaluateLivenessWithHttpInfo(id, evaluateCustomerLivenessRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluate customer&#39;s liveness
     * 
     * @param id  (required)
     * @param evaluateCustomerLivenessRequest  (required)
     * @return ApiResponse&lt;EvaluateCustomerLivenessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluateCustomerLivenessResponse> evaluateLivenessWithHttpInfo(String id, EvaluateCustomerLivenessRequest evaluateCustomerLivenessRequest) throws ApiException {
        okhttp3.Call localVarCall = evaluateLivenessValidateBeforeCall(id, evaluateCustomerLivenessRequest, null);
        Type localVarReturnType = new TypeToken<EvaluateCustomerLivenessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate customer&#39;s liveness (asynchronously)
     * 
     * @param id  (required)
     * @param evaluateCustomerLivenessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateLivenessAsync(String id, EvaluateCustomerLivenessRequest evaluateCustomerLivenessRequest, final ApiCallback<EvaluateCustomerLivenessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateLivenessValidateBeforeCall(id, evaluateCustomerLivenessRequest, _callback);
        Type localVarReturnType = new TypeToken<EvaluateCustomerLivenessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomer
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomer(Async)");
        }

        return getCustomerCall(id, _callback);

    }

    /**
     * Get the customer
     * 
     * @param id  (required)
     * @return GetCustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerResponse getCustomer(String id) throws ApiException {
        ApiResponse<GetCustomerResponse> localVarResp = getCustomerWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the customer
     * 
     * @param id  (required)
     * @return ApiResponse&lt;GetCustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerResponse> getCustomerWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the customer (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerAsync(String id, final ApiCallback<GetCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentChipData
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentChipDataCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/document/chip/data"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentChipDataValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDocumentChipData(Async)");
        }

        return getDocumentChipDataCall(id, _callback);

    }

    /**
     * Get customer&#39;s document chip raw data
     * 
     * @param id  (required)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop getDocumentChipData(String id) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = getDocumentChipDataWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s document chip raw data
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> getDocumentChipDataWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDocumentChipDataValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s document chip raw data (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentChipDataAsync(String id, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentChipDataValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfieImage
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfieImageCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/selfie"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfieImageValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfieImage(Async)");
        }

        return getSelfieImageCall(id, _callback);

    }

    /**
     * Get customer&#39;s selfie image
     * 
     * @param id  (required)
     * @return ImageCrop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ImageCrop getSelfieImage(String id) throws ApiException {
        ApiResponse<ImageCrop> localVarResp = getSelfieImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get customer&#39;s selfie image
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ImageCrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCrop> getSelfieImageWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfieImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer&#39;s selfie image (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_PARAMETER </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfieImageAsync(String id, final ApiCallback<ImageCrop> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfieImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ImageCrop>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inspect
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/inspect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inspectValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inspect(Async)");
        }

        return inspectCall(id, _callback);

    }

    /**
     * Inspect customer
     * 
     * @param id  (required)
     * @return CustomerInspectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInspectResponse inspect(String id) throws ApiException {
        ApiResponse<CustomerInspectResponse> localVarResp = inspectWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Inspect customer
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CustomerInspectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInspectResponse> inspectWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = inspectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomerInspectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inspect customer (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectAsync(String id, final ApiCallback<CustomerInspectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inspectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomerInspectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inspectDisclose
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectDiscloseCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/inspect/disclose"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inspectDiscloseValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inspectDisclose(Async)");
        }

        return inspectDiscloseCall(id, _callback);

    }

    /**
     * Disclose customer inspection
     * 
     * @param id  (required)
     * @return CustomerInspectDiscloseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInspectDiscloseResponse inspectDisclose(String id) throws ApiException {
        ApiResponse<CustomerInspectDiscloseResponse> localVarResp = inspectDiscloseWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Disclose customer inspection
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CustomerInspectDiscloseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInspectDiscloseResponse> inspectDiscloseWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = inspectDiscloseValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomerInspectDiscloseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disclose customer inspection (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inspectDiscloseAsync(String id, final ApiCallback<CustomerInspectDiscloseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inspectDiscloseValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomerInspectDiscloseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveLivenessSelfiesAndRecords
     * @param id  (required)
     * @param retrieveLivenessSelfiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveLivenessSelfiesAndRecordsCall(String id, RetrieveLivenessSelfiesRequest retrieveLivenessSelfiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retrieveLivenessSelfiesRequest;

        // create path and map variables
        String localVarPath = "/api/v1/customers/{id}/liveness/selfies/retrieve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveLivenessSelfiesAndRecordsValidateBeforeCall(String id, RetrieveLivenessSelfiesRequest retrieveLivenessSelfiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveLivenessSelfiesAndRecords(Async)");
        }

        // verify the required parameter 'retrieveLivenessSelfiesRequest' is set
        if (retrieveLivenessSelfiesRequest == null) {
            throw new ApiException("Missing the required parameter 'retrieveLivenessSelfiesRequest' when calling retrieveLivenessSelfiesAndRecords(Async)");
        }

        return retrieveLivenessSelfiesAndRecordsCall(id, retrieveLivenessSelfiesRequest, _callback);

    }

    /**
     * Retrieves customer&#39;s liveness selfies and liveness record selfies of given LivenessType
     * 
     * @param id  (required)
     * @param retrieveLivenessSelfiesRequest  (required)
     * @return RetrieveLivenessSelfiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveLivenessSelfiesResponse retrieveLivenessSelfiesAndRecords(String id, RetrieveLivenessSelfiesRequest retrieveLivenessSelfiesRequest) throws ApiException {
        ApiResponse<RetrieveLivenessSelfiesResponse> localVarResp = retrieveLivenessSelfiesAndRecordsWithHttpInfo(id, retrieveLivenessSelfiesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves customer&#39;s liveness selfies and liveness record selfies of given LivenessType
     * 
     * @param id  (required)
     * @param retrieveLivenessSelfiesRequest  (required)
     * @return ApiResponse&lt;RetrieveLivenessSelfiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveLivenessSelfiesResponse> retrieveLivenessSelfiesAndRecordsWithHttpInfo(String id, RetrieveLivenessSelfiesRequest retrieveLivenessSelfiesRequest) throws ApiException {
        okhttp3.Call localVarCall = retrieveLivenessSelfiesAndRecordsValidateBeforeCall(id, retrieveLivenessSelfiesRequest, null);
        Type localVarReturnType = new TypeToken<RetrieveLivenessSelfiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves customer&#39;s liveness selfies and liveness record selfies of given LivenessType (asynchronously)
     * 
     * @param id  (required)
     * @param retrieveLivenessSelfiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Internal Server Error  Possible error codes:  - UNEXPECTED_ERROR </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request  Possible error codes:  - INVALID_ID  - INVALID_REQUEST_BODY </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict  Possible error codes:  - CONFLICT </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found  Possible error codes:  - NOT_FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveLivenessSelfiesAndRecordsAsync(String id, RetrieveLivenessSelfiesRequest retrieveLivenessSelfiesRequest, final ApiCallback<RetrieveLivenessSelfiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveLivenessSelfiesAndRecordsValidateBeforeCall(id, retrieveLivenessSelfiesRequest, _callback);
        Type localVarReturnType = new TypeToken<RetrieveLivenessSelfiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
