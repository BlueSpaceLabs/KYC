/*
 * Digital Identity Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.innovatrics.dot.integrationsamples.disapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.innovatrics.dot.integrationsamples.disapi.model.ColorProfileChangeDetectedDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.DocumentPortraitGenuineDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.LooksLikeScreenshotDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.PresentationAttackDetectionGenuineDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.PresentationAttackPrintClassDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.PresentationAttackScreenClassDisclose;
import com.innovatrics.dot.integrationsamples.disapi.model.TamperedTextDetectionScore;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.innovatrics.dot.integrationsamples.disapi.JSON;

/**
 * Result of the visual detection indicating possibly fraudulent documents based on the appearance of the image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T01:49:17.389448+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class PageTamperingInspectionDisclose {
  public static final String SERIALIZED_NAME_COLOR_PROFILE_CHANGE_DETECTED = "colorProfileChangeDetected";
  @SerializedName(SERIALIZED_NAME_COLOR_PROFILE_CHANGE_DETECTED)
  private ColorProfileChangeDetectedDisclose colorProfileChangeDetected;

  public static final String SERIALIZED_NAME_LOOKS_LIKE_SCREENSHOT = "looksLikeScreenshot";
  @SerializedName(SERIALIZED_NAME_LOOKS_LIKE_SCREENSHOT)
  private LooksLikeScreenshotDisclose looksLikeScreenshot;

  public static final String SERIALIZED_NAME_DOCUMENT_PORTRAIT_GENUINE = "documentPortraitGenuine";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PORTRAIT_GENUINE)
  private DocumentPortraitGenuineDisclose documentPortraitGenuine;

  public static final String SERIALIZED_NAME_TAMPERED_TEXTS = "tamperedTexts";
  @SerializedName(SERIALIZED_NAME_TAMPERED_TEXTS)
  private Map<String, TamperedTextDetectionScore> tamperedTexts = new HashMap<>();

  public static final String SERIALIZED_NAME_PRESENTATION_ATTACK_DETECTION_GENUINE = "presentationAttackDetectionGenuine";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_ATTACK_DETECTION_GENUINE)
  private PresentationAttackDetectionGenuineDisclose presentationAttackDetectionGenuine;

  public static final String SERIALIZED_NAME_PRESENTATION_ATTACK_SCREEN_CLASS = "presentationAttackScreenClass";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_ATTACK_SCREEN_CLASS)
  private PresentationAttackScreenClassDisclose presentationAttackScreenClass;

  public static final String SERIALIZED_NAME_PRESENTATION_ATTACK_PRINT_CLASS = "presentationAttackPrintClass";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_ATTACK_PRINT_CLASS)
  private PresentationAttackPrintClassDisclose presentationAttackPrintClass;

  public PageTamperingInspectionDisclose() {
  }

  public PageTamperingInspectionDisclose(
     Map<String, TamperedTextDetectionScore> tamperedTexts
  ) {
    this();
    this.tamperedTexts = tamperedTexts;
  }

  public PageTamperingInspectionDisclose colorProfileChangeDetected(ColorProfileChangeDetectedDisclose colorProfileChangeDetected) {
    this.colorProfileChangeDetected = colorProfileChangeDetected;
    return this;
  }

  /**
   * Get colorProfileChangeDetected
   * @return colorProfileChangeDetected
   */
  @javax.annotation.Nullable
  public ColorProfileChangeDetectedDisclose getColorProfileChangeDetected() {
    return colorProfileChangeDetected;
  }

  public void setColorProfileChangeDetected(ColorProfileChangeDetectedDisclose colorProfileChangeDetected) {
    this.colorProfileChangeDetected = colorProfileChangeDetected;
  }


  public PageTamperingInspectionDisclose looksLikeScreenshot(LooksLikeScreenshotDisclose looksLikeScreenshot) {
    this.looksLikeScreenshot = looksLikeScreenshot;
    return this;
  }

  /**
   * Get looksLikeScreenshot
   * @return looksLikeScreenshot
   */
  @javax.annotation.Nullable
  public LooksLikeScreenshotDisclose getLooksLikeScreenshot() {
    return looksLikeScreenshot;
  }

  public void setLooksLikeScreenshot(LooksLikeScreenshotDisclose looksLikeScreenshot) {
    this.looksLikeScreenshot = looksLikeScreenshot;
  }


  public PageTamperingInspectionDisclose documentPortraitGenuine(DocumentPortraitGenuineDisclose documentPortraitGenuine) {
    this.documentPortraitGenuine = documentPortraitGenuine;
    return this;
  }

  /**
   * Get documentPortraitGenuine
   * @return documentPortraitGenuine
   */
  @javax.annotation.Nullable
  public DocumentPortraitGenuineDisclose getDocumentPortraitGenuine() {
    return documentPortraitGenuine;
  }

  public void setDocumentPortraitGenuine(DocumentPortraitGenuineDisclose documentPortraitGenuine) {
    this.documentPortraitGenuine = documentPortraitGenuine;
  }


  /**
   * Get tamperedTexts
   * @return tamperedTexts
   */
  @javax.annotation.Nullable
  public Map<String, TamperedTextDetectionScore> getTamperedTexts() {
    return tamperedTexts;
  }



  public PageTamperingInspectionDisclose presentationAttackDetectionGenuine(PresentationAttackDetectionGenuineDisclose presentationAttackDetectionGenuine) {
    this.presentationAttackDetectionGenuine = presentationAttackDetectionGenuine;
    return this;
  }

  /**
   * Get presentationAttackDetectionGenuine
   * @return presentationAttackDetectionGenuine
   */
  @javax.annotation.Nullable
  public PresentationAttackDetectionGenuineDisclose getPresentationAttackDetectionGenuine() {
    return presentationAttackDetectionGenuine;
  }

  public void setPresentationAttackDetectionGenuine(PresentationAttackDetectionGenuineDisclose presentationAttackDetectionGenuine) {
    this.presentationAttackDetectionGenuine = presentationAttackDetectionGenuine;
  }


  public PageTamperingInspectionDisclose presentationAttackScreenClass(PresentationAttackScreenClassDisclose presentationAttackScreenClass) {
    this.presentationAttackScreenClass = presentationAttackScreenClass;
    return this;
  }

  /**
   * Get presentationAttackScreenClass
   * @return presentationAttackScreenClass
   */
  @javax.annotation.Nullable
  public PresentationAttackScreenClassDisclose getPresentationAttackScreenClass() {
    return presentationAttackScreenClass;
  }

  public void setPresentationAttackScreenClass(PresentationAttackScreenClassDisclose presentationAttackScreenClass) {
    this.presentationAttackScreenClass = presentationAttackScreenClass;
  }


  public PageTamperingInspectionDisclose presentationAttackPrintClass(PresentationAttackPrintClassDisclose presentationAttackPrintClass) {
    this.presentationAttackPrintClass = presentationAttackPrintClass;
    return this;
  }

  /**
   * Get presentationAttackPrintClass
   * @return presentationAttackPrintClass
   */
  @javax.annotation.Nullable
  public PresentationAttackPrintClassDisclose getPresentationAttackPrintClass() {
    return presentationAttackPrintClass;
  }

  public void setPresentationAttackPrintClass(PresentationAttackPrintClassDisclose presentationAttackPrintClass) {
    this.presentationAttackPrintClass = presentationAttackPrintClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTamperingInspectionDisclose pageTamperingInspectionDisclose = (PageTamperingInspectionDisclose) o;
    return Objects.equals(this.colorProfileChangeDetected, pageTamperingInspectionDisclose.colorProfileChangeDetected) &&
        Objects.equals(this.looksLikeScreenshot, pageTamperingInspectionDisclose.looksLikeScreenshot) &&
        Objects.equals(this.documentPortraitGenuine, pageTamperingInspectionDisclose.documentPortraitGenuine) &&
        Objects.equals(this.tamperedTexts, pageTamperingInspectionDisclose.tamperedTexts) &&
        Objects.equals(this.presentationAttackDetectionGenuine, pageTamperingInspectionDisclose.presentationAttackDetectionGenuine) &&
        Objects.equals(this.presentationAttackScreenClass, pageTamperingInspectionDisclose.presentationAttackScreenClass) &&
        Objects.equals(this.presentationAttackPrintClass, pageTamperingInspectionDisclose.presentationAttackPrintClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorProfileChangeDetected, looksLikeScreenshot, documentPortraitGenuine, tamperedTexts, presentationAttackDetectionGenuine, presentationAttackScreenClass, presentationAttackPrintClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTamperingInspectionDisclose {\n");
    sb.append("    colorProfileChangeDetected: ").append(toIndentedString(colorProfileChangeDetected)).append("\n");
    sb.append("    looksLikeScreenshot: ").append(toIndentedString(looksLikeScreenshot)).append("\n");
    sb.append("    documentPortraitGenuine: ").append(toIndentedString(documentPortraitGenuine)).append("\n");
    sb.append("    tamperedTexts: ").append(toIndentedString(tamperedTexts)).append("\n");
    sb.append("    presentationAttackDetectionGenuine: ").append(toIndentedString(presentationAttackDetectionGenuine)).append("\n");
    sb.append("    presentationAttackScreenClass: ").append(toIndentedString(presentationAttackScreenClass)).append("\n");
    sb.append("    presentationAttackPrintClass: ").append(toIndentedString(presentationAttackPrintClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorProfileChangeDetected");
    openapiFields.add("looksLikeScreenshot");
    openapiFields.add("documentPortraitGenuine");
    openapiFields.add("tamperedTexts");
    openapiFields.add("presentationAttackDetectionGenuine");
    openapiFields.add("presentationAttackScreenClass");
    openapiFields.add("presentationAttackPrintClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageTamperingInspectionDisclose
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageTamperingInspectionDisclose.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTamperingInspectionDisclose is not found in the empty JSON string", PageTamperingInspectionDisclose.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageTamperingInspectionDisclose.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageTamperingInspectionDisclose` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `colorProfileChangeDetected`
      if (jsonObj.get("colorProfileChangeDetected") != null && !jsonObj.get("colorProfileChangeDetected").isJsonNull()) {
        ColorProfileChangeDetectedDisclose.validateJsonElement(jsonObj.get("colorProfileChangeDetected"));
      }
      // validate the optional field `looksLikeScreenshot`
      if (jsonObj.get("looksLikeScreenshot") != null && !jsonObj.get("looksLikeScreenshot").isJsonNull()) {
        LooksLikeScreenshotDisclose.validateJsonElement(jsonObj.get("looksLikeScreenshot"));
      }
      // validate the optional field `documentPortraitGenuine`
      if (jsonObj.get("documentPortraitGenuine") != null && !jsonObj.get("documentPortraitGenuine").isJsonNull()) {
        DocumentPortraitGenuineDisclose.validateJsonElement(jsonObj.get("documentPortraitGenuine"));
      }
      // validate the optional field `presentationAttackDetectionGenuine`
      if (jsonObj.get("presentationAttackDetectionGenuine") != null && !jsonObj.get("presentationAttackDetectionGenuine").isJsonNull()) {
        PresentationAttackDetectionGenuineDisclose.validateJsonElement(jsonObj.get("presentationAttackDetectionGenuine"));
      }
      // validate the optional field `presentationAttackScreenClass`
      if (jsonObj.get("presentationAttackScreenClass") != null && !jsonObj.get("presentationAttackScreenClass").isJsonNull()) {
        PresentationAttackScreenClassDisclose.validateJsonElement(jsonObj.get("presentationAttackScreenClass"));
      }
      // validate the optional field `presentationAttackPrintClass`
      if (jsonObj.get("presentationAttackPrintClass") != null && !jsonObj.get("presentationAttackPrintClass").isJsonNull()) {
        PresentationAttackPrintClassDisclose.validateJsonElement(jsonObj.get("presentationAttackPrintClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTamperingInspectionDisclose.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTamperingInspectionDisclose' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTamperingInspectionDisclose> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTamperingInspectionDisclose.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTamperingInspectionDisclose>() {
           @Override
           public void write(JsonWriter out, PageTamperingInspectionDisclose value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTamperingInspectionDisclose read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageTamperingInspectionDisclose given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageTamperingInspectionDisclose
   * @throws IOException if the JSON string is invalid with respect to PageTamperingInspectionDisclose
   */
  public static PageTamperingInspectionDisclose fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTamperingInspectionDisclose.class);
  }

  /**
   * Convert an instance of PageTamperingInspectionDisclose to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

