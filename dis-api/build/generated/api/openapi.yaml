openapi: 3.0.1
info:
  title: Digital Identity Service API
  version: 1.50.0
servers:
- url: https://dot.innovatrics.com/identity
paths:
  /api/v1/info:
    get:
      operationId: info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActuatorInfo"
          description: OK
      summary: Get application info
      tags:
      - Actuator
      x-accepts:
      - application/json
  /api/v1/health:
    get:
      operationId: health
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActuatorHealth"
          description: OK
      summary: Get application health
      tags:
      - Actuator
      x-accepts:
      - application/json
  /api/v1/customers/{id}/selfie:
    delete:
      operationId: deleteSelfie
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete customer's selfie
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    get:
      operationId: getSelfieImage
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's selfie image
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    put:
      operationId: createSelfie_1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSelfieRequest"
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSelfieResponse"
          description: OK
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Provide customer's selfie
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness:
    delete:
      operationId: deleteLiveness
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete customer's liveness
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    put:
      operationId: createLiveness
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomerLivenessResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create customer's liveness
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/records/challenge:
    put:
      operationId: createLivenessRecordChallenge
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LivenessChallengeRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LivenessChallengeResponse"
          description: OK
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create customer's liveness record challenge
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document:
    delete:
      operationId: deleteDocument
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete customer's document
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    put:
      operationId: createDocument
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDocumentResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create customer's document
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/pages:
    put:
      operationId: createDocumentPage_1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentPageRequest"
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDocumentPageResponse"
          description: OK
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Provide customer's document page
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/chip/data:
    get:
      operationId: getDocumentChipData
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's document chip raw data
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    put:
      operationId: createDocumentChipData
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDocumentChipDataResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create customer's document chip data
      tags:
      - Customer onboarding
      x-content-type: application/octet-stream
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/chip/challenge:
    put:
      operationId: createDocumentChipChallenge
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDocumentChipResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
      security:
      - api: []
      summary: Create customer's challengeBytes for document chip
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/sessions:
    delete:
      operationId: deleteSession
      parameters:
      - description: Session token as Base64 text
        explode: false
        in: header
        name: x-inn-session-token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "204":
          description: No Content
      security:
      - api: []
      summary: Close the session
      tags:
      - Session management
      x-accepts:
      - application/json
    post:
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSessionResponse"
          description: OK
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_REQUEST_BODY
        "401":
          description: Unauthorized
      security:
      - api: []
      summary: Create a session
      tags:
      - Session management
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/palms:
    post:
      operationId: createPalm_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePalmRequest"
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePalmResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create a palm from the photo
      tags:
      - Palm operations
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/palms/{probe_palm_id}/similarity:
    post:
      operationId: checkSimilarity
      parameters:
      - explode: false
        in: path
        name: probe_palm_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PalmSimilarityRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PalmSimilarityResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Match the probe palm to the reference palm
      tags:
      - Palm operations
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/palms/{id}/inspect:
    post:
      operationId: inspectPalm
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PalmInspectResponse"
          description: OK
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Inspect palm
      tags:
      - Palm operations
      x-accepts:
      - application/json
  /api/v1/faces:
    post:
      operationId: detect_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFaceRequest"
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFaceResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
             - FACE_SIZE_MEMORY_LIMIT
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Create a face from the photo (face detection)
      tags:
      - Face operations
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/faces/{probe_face_id}/similarity:
    post:
      operationId: checkSimilarity_1
      parameters:
      - explode: false
        in: path
        name: probe_face_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FaceSimilarityRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
             - UNSUPPORTED_VERSION_TEMPLATE
             - CORRUPTED_TEMPLATE
             - INCOMPATIBLE_TEMPLATE
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceSimilarityResponse"
          description: OK
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Match the probe face to the reference face
      tags:
      - Face operations
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers:
    post:
      operationId: createCustomer
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomerResponse"
          description: OK
        "401":
          description: Unauthorized
      security:
      - api: []
      summary: Create a customer
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}:
    delete:
      operationId: deleteCustomer
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete the customer
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    get:
      operationId: getCustomer
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCustomerResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the customer
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
    post:
      operationId: createCustomerWithUuid
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Unprocessable request

            Possible error codes:
             - ALREADY_EXISTS
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomerResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
      security:
      - api: []
      summary: Create a customer with a custom UUIDv4
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/store:
    post:
      operationId: storeInTrustPlatform
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerStoreRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
        "204":
          description: No Content
      security:
      - api: []
      summary: Store customer in the Trust Platform
      tags:
      - Trust Platform
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/selfies:
    post:
      operationId: createLivenessSelfie
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomerLivenessSelfieRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomerLivenessSelfieResponse"
          description: OK
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Provide customer's liveness selfie
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/selfies/retrieve:
    post:
      operationId: retrieveLivenessSelfiesAndRecords
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RetrieveLivenessSelfiesRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveLivenessSelfiesResponse"
          description: OK
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Retrieves customer's liveness selfies and liveness record selfies of
        given LivenessType
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/records:
    post:
      operationId: createLivenessRecord
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: byte
              type: string
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCustomerLivenessRecordResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
             - INVALID_IMAGE
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Provide customer's liveness record
      tags:
      - Customer onboarding
      x-content-type: application/octet-stream
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/evaluation:
    post:
      operationId: evaluateLiveness
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluateCustomerLivenessRequest"
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluateCustomerLivenessResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_BODY
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Evaluate customer's liveness
      tags:
      - Customer onboarding
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/customers/{id}/inspect:
    post:
      operationId: inspect
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInspectResponse"
          description: OK
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Inspect customer
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/inspect/disclose:
    post:
      operationId: inspectDisclose
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInspectDiscloseResponse"
          description: OK
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Disclose customer inspection
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/inspect:
    post:
      operationId: documentInspect
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentInspectResponse"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Inspect customer's document
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/inspect/disclose:
    post:
      operationId: documentInspectDisclose
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentInspectDiscloseResponse"
          description: OK
        "403":
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Conflict

            Possible error codes:
             - CONFLICT
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Disclose customer's document inspection
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/palms/{id}/template:
    get:
      operationId: getPalmTemplate
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PalmTemplateResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the palm's template
      tags:
      - Palm operations
      x-accepts:
      - application/json
  /api/v1/metadata:
    get:
      operationId: metadata
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentMetadataResponse"
          description: OK
        "401":
          description: Unauthorized
      security:
      - api: []
      summary: Get metadata
      tags:
      - Metadata
      x-accepts:
      - application/json
  /api/v1/faces/{id}/quality:
    get:
      operationId: checkQuality
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceQualityResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the face's quality
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/glasses:
    get:
      operationId: checkGlasses
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlassesResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Check if glasses are present on the face
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/face-template:
    get:
      operationId: createTemplate
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceTemplateResponse"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the face's template
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/face-mask:
    get:
      operationId: checkFaceMask
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceMaskResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Check if the face is covered by a mask
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/crop:
    get:
      operationId: doCrop
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the face's crop
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/crop/removed-background:
    get:
      operationId: doCropRemoveBackground
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get the face's crop with removed background
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/crop/coordinates:
    get:
      operationId: doCropCoordinates
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CropCoordinatesResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get face's crop coordinates
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}/aspects:
    get:
      operationId: evaluateAspects
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaceAspectsResponse"
          description: OK
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get face's aspects
      tags:
      - Face operations
      x-accepts:
      - application/json
  /api/v1/customers/{id}/liveness/records/{recordId}/selfie:
    get:
      operationId: customerLivenessRecordSelfie
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: recordId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's liveness record's selfie
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/signature:
    get:
      operationId: documentSignature
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's document signature
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/portrait:
    get:
      operationId: documentPortrait
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's document portrait
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/pages/{page-type}:
    get:
      operationId: documentPageCrop
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: page-type
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get normalized image of the customer's document page
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/pages/{page-type}/quality:
    get:
      operationId: documentPageQuality
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: page-type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentPageQuality"
          description: OK
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Check quality of the customer's document page
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/ghost-portrait:
    get:
      operationId: documentGhostPortrait
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's document ghost portrait
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/fingerprint:
    get:
      operationId: documentFingerprint
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
             - INVALID_REQUEST_PARAMETER
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's fingerprint from the document
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/customers/{id}/document/chip/portrait:
    get:
      operationId: documentChipPortrait
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCrop"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Not found

            Possible error codes:
             - NOT_FOUND
      security:
      - api: []
      summary: Get customer's document chip portrait
      tags:
      - Customer onboarding
      x-accepts:
      - application/json
  /api/v1/palms/{id}:
    delete:
      operationId: deletePalm
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete the palm
      tags:
      - Palm operations
      x-accepts:
      - application/json
  /api/v1/faces/{id}:
    delete:
      operationId: deleteFace
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Internal Server Error

            Possible error codes:
             - UNEXPECTED_ERROR
        "403":
          description: Forbidden
        "401":
          description: Unauthorized
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: |-
            Bad request

            Possible error codes:
             - INVALID_ID
        "204":
          description: No Content
      security:
      - api: []
      summary: Delete the face
      tags:
      - Face operations
      x-accepts:
      - application/json
components:
  schemas:
    ActuatorInfo:
      example:
        iface:
          license:
            month: "3"
            year: "2024"
            day: "4"
          version: 4.18.0
        build:
          artifact: digital-identity-service
          name: digital-identity-service
          version: 1.0.0
          group: com.innovatrics.dot
        sam:
          version: 1.28.1
      properties:
        build:
          $ref: "#/components/schemas/ActuatorInfo_build"
        iface:
          $ref: "#/components/schemas/ActuatorInfo_iface"
        sam:
          $ref: "#/components/schemas/ActuatorInfo_sam"
      readOnly: true
      required:
      - build
      - iface
      - sam
      type: object
    ActuatorHealth:
      example:
        status: UP
      properties:
        status:
          description: The application health status
          enum:
          - UP
          - DOWN
          example: UP
          readOnly: true
          type: string
      readOnly: true
      required:
      - status
      type: object
    CreateSelfieRequest:
      example:
        image:
          data: data
          url: http://localhost/example.png
        selfieOrigin:
          link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/liveness/records/df0d69e3-9d59-4a8b-82de-510b3950dc39/selfie
      properties:
        image:
          $ref: "#/components/schemas/Image"
        selfieOrigin:
          $ref: "#/components/schemas/LivenessSelfieOrigin"
      type: object
      writeOnly: true
    Image:
      description: Image provided as Base64 encoded string or via URL. Data or URL
        have to be provided.
      example:
        data: data
        url: http://localhost/example.png
      properties:
        data:
          format: byte
          type: string
        url:
          description: Image's URL
          example: http://localhost/example.png
          type: string
      type: object
      writeOnly: true
    LivenessSelfieOrigin:
      description: This allows to link the image from liveness to be selfie photo.
        Do not upload the photo in Image class in this case.
      example:
        link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/liveness/records/df0d69e3-9d59-4a8b-82de-510b3950dc39/selfie
      properties:
        link:
          description: The liveness selfie origin link
          example: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/liveness/records/df0d69e3-9d59-4a8b-82de-510b3950dc39/selfie
          type: string
      required:
      - link
      type: object
      writeOnly: true
    ErrorResponse:
      description: Error response
      example:
        errorMessage: errorMessage
        errorCode: NOT_FOUND
      properties:
        errorCode:
          description: Error code
          enum:
          - NOT_FOUND
          - INVALID_ID
          - INVALID_IMAGE
          - INVALID_REQUEST_BODY
          - INVALID_REQUEST_PARAMETER
          - INVALID_REQUEST_METHOD
          - CONFLICT
          - UNEXPECTED_ERROR
          - ALREADY_EXISTS
          - DATA_DOWNLOADER_DISABLED
          - MALFORMED_URL
          - FACE_SIZE_MEMORY_LIMIT
          - INCOMPATIBLE_TEMPLATE
          - CORRUPTED_TEMPLATE
          - UNSUPPORTED_VERSION_TEMPLATE
          - DATA_DOWNLOAD_ERROR
          - NOT_ENOUGH_DATA
          - TOO_MANY_REQUESTS
          readOnly: true
          type: string
        errorMessage:
          description: Error detailed description. It's only informative.
          readOnly: true
          type: string
      readOnly: true
      required:
      - errorCode
      - errorMessage
      type: object
    CreateSelfieResponse:
      example:
        detection:
          faceRectangle:
            bottomLeft:
              x: 10
              "y": 20
            bottomRight:
              x: 10
              "y": 20
            topLeft:
              x: 10
              "y": 20
            topRight:
              x: 10
              "y": 20
          confidence: 0.34
        warnings:
        - MULTIPLE_FACES_DETECTED
        - MULTIPLE_FACES_DETECTED
        errorCode: NO_FACE_DETECTED
        links:
          self: self
        additionalData:
          video:
            data: data
      properties:
        detection:
          $ref: "#/components/schemas/FaceDetection"
        links:
          $ref: "#/components/schemas/Links"
        errorCode:
          description: The face detection error code
          enum:
          - NO_FACE_DETECTED
          - INVALID_DATA
          readOnly: true
          type: string
        warnings:
          description: The face detection warnings
          items:
            description: The face detection warnings
            enum:
            - MULTIPLE_FACES_DETECTED
            readOnly: true
            type: string
          readOnly: true
          type: array
        additionalData:
          $ref: "#/components/schemas/ResourceData"
      readOnly: true
      type: object
    FaceDetection:
      description: Result of the face detection containing coordinates of rectangle
        where the face was detected and the confidence score there is a face.
      example:
        faceRectangle:
          bottomLeft:
            x: 10
            "y": 20
          bottomRight:
            x: 10
            "y": 20
          topLeft:
            x: 10
            "y": 20
          topRight:
            x: 10
            "y": 20
        confidence: 0.34
      properties:
        confidence:
          description: The face detection confidence. Values near 1.0 indicates a
            high confidence a human face was detected.
          example: 0.34
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        faceRectangle:
          $ref: "#/components/schemas/Roi"
      readOnly: true
      required:
      - confidence
      - faceRectangle
      type: object
    Links:
      description: The resource's links
      example:
        self: self
      properties:
        self:
          description: The resource's self link.
          readOnly: true
          type: string
      readOnly: true
      required:
      - self
      type: object
    Point:
      description: The point coordinates.
      example:
        x: 10
        "y": 20
      properties:
        x:
          description: "The x-axis coordinate of the point, in pixels"
          example: 10
          format: int32
          readOnly: true
          type: integer
        "y":
          description: "The y-axis coordinate of the point, in pixels"
          example: 20
          format: int32
          readOnly: true
          type: integer
      readOnly: true
      required:
      - x
      - "y"
      type: object
    ResourceData:
      description: Additional data for the resource
      example:
        video:
          data: data
      properties:
        video:
          $ref: "#/components/schemas/ResourceVideo"
      readOnly: true
      type: object
    ResourceVideo:
      description: The video snippet recorded during the capture of the resource
      example:
        data: data
      properties:
        data:
          format: byte
          readOnly: true
          type: string
      readOnly: true
      required:
      - data
      type: object
    Roi:
      description: The region of the interest. The coordinates of the rectangle.
      example:
        bottomLeft:
          x: 10
          "y": 20
        bottomRight:
          x: 10
          "y": 20
        topLeft:
          x: 10
          "y": 20
        topRight:
          x: 10
          "y": 20
      properties:
        topLeft:
          $ref: "#/components/schemas/Point"
        topRight:
          $ref: "#/components/schemas/Point"
        bottomRight:
          $ref: "#/components/schemas/Point"
        bottomLeft:
          $ref: "#/components/schemas/Point"
      readOnly: true
      required:
      - bottomLeft
      - bottomRight
      - topLeft
      - topRight
      type: object
    CreateCustomerLivenessResponse:
      example:
        links:
          self: self
      properties:
        links:
          $ref: "#/components/schemas/Links"
      readOnly: true
      required:
      - links
      type: object
    LivenessChallengeRequest:
      example:
        type: EYE_GAZE_LIVENESS
      properties:
        type:
          description: Liveness type for the challenge.
          enum:
          - EYE_GAZE_LIVENESS
          - PASSIVE_LIVENESS
          - SMILE_LIVENESS
          - MAGNIFEYE_LIVENESS
          type: string
      required:
      - type
      type: object
      writeOnly: true
    ChallengeDetails:
      oneOf:
      - $ref: "#/components/schemas/EyeGazeChallengeDetails"
      readOnly: true
      type: object
    EyeGazeChallengeDetails:
      description: The liveness challenge details for the liveness.
      example:
        corners:
        - TOP_LEFT
        - TOP_LEFT
      properties:
        corners:
          description: The list of corners - Eye Gaze Positions.
          items:
            description: The list of corners - Eye Gaze Positions.
            enum:
            - TOP_LEFT
            - TOP_RIGHT
            - BOTTOM_LEFT
            - BOTTOM_RIGHT
            readOnly: true
            type: string
          readOnly: true
          type: array
      required:
      - corners
      type: object
    LivenessChallengeResponse:
      example:
        details:
          corners:
          - TOP_LEFT
          - TOP_LEFT
      properties:
        details:
          $ref: "#/components/schemas/ChallengeDetails"
      readOnly: true
      required:
      - details
      type: object
    CreateDocumentRequest:
      example:
        sources:
        - VIZ
        - VIZ
        advice:
          classification:
            types:
            - identity-card
            - passport
            editions:
            - 2008-2019
            machineReadableTravelDocuments:
            - td1
            - td2
            - td3
            countries:
            - svk
            - cze
      properties:
        advice:
          $ref: "#/components/schemas/DocumentAdvice"
        sources:
          description: "The document sources. The chosen document sources indicate\
            \ which part of the document should be processed. For instance, if only\
            \ MRZ is requested, the document is classified only by MRZ, and only MRZ\
            \ is recognized and processed."
          items:
            description: "The document sources. The chosen document sources indicate\
              \ which part of the document should be processed. For instance, if only\
              \ MRZ is requested, the document is classified only by MRZ, and only\
              \ MRZ is recognized and processed."
            enum:
            - VIZ
            - MRZ
            - BARCODE
            - DOCUMENT_PORTRAIT
            - GLOBAL_OCR
            type: string
          type: array
      type: object
      writeOnly: true
    DocumentAdvice:
      description: Advice to the OCR document classification process about expected
        document type in the uploaded image.
      example:
        classification:
          types:
          - identity-card
          - passport
          editions:
          - 2008-2019
          machineReadableTravelDocuments:
          - td1
          - td2
          - td3
          countries:
          - svk
          - cze
      properties:
        classification:
          $ref: "#/components/schemas/DocumentClassificationAdvice"
      type: object
      writeOnly: true
    DocumentClassificationAdvice:
      description: "Advice to the classification process defining the expected document\
        \ type, issuing country, edition or type of travel document. This is optional\
        \ input. If not provided, classification will try to match among all supported\
        \ documents. If provided and document in image is different, an error is returned."
      example:
        types:
        - identity-card
        - passport
        editions:
        - 2008-2019
        machineReadableTravelDocuments:
        - td1
        - td2
        - td3
        countries:
        - svk
        - cze
      properties:
        countries:
          description: The list of Alpha-3 ISO 3166 country codes
          example:
          - svk
          - cze
          items:
            description: The list of Alpha-3 ISO 3166 country codes
            example: "[\"svk\",\"cze\"]"
            type: string
          type: array
        types:
          description: The list of the identity document types
          example:
          - identity-card
          - passport
          items:
            description: The list of the identity document types
            example: "[\"identity-card\",\"passport\"]"
            type: string
          type: array
        editions:
          description: The list of the document editions
          example:
          - 2008-2019
          items:
            description: The list of the document editions
            example: "[\"2008-2019\"]"
            type: string
          type: array
        machineReadableTravelDocuments:
          description: The list of the MRZ types
          example:
          - td1
          - td2
          - td3
          items:
            description: The list of the MRZ types
            example: "[\"td1\",\"td2\",\"td3\"]"
            type: string
          type: array
      type: object
      writeOnly: true
    CreateDocumentResponse:
      example:
        links:
          self: self
      properties:
        links:
          $ref: "#/components/schemas/Links"
      readOnly: true
      required:
      - links
      type: object
    CreateDocumentPageRequest:
      example:
        image:
          data: data
          url: http://localhost/example.png
        advice:
          classification:
            pageTypes:
            - front
            - back
      properties:
        image:
          $ref: "#/components/schemas/Image"
        advice:
          $ref: "#/components/schemas/DocumentPageAdvice"
      required:
      - image
      type: object
      writeOnly: true
    DocumentPageAdvice:
      description: The document page processing advice.
      example:
        classification:
          pageTypes:
          - front
          - back
      properties:
        classification:
          $ref: "#/components/schemas/DocumentPageClassificationAdvice"
      type: object
      writeOnly: true
    DocumentPageClassificationAdvice:
      description: "Advice to the OCR document classification process about expected\
        \ document page in the uploaded image. This is optional input. If not provided,\
        \ classification will try to match both front and back pages. If provided\
        \ and document page in image is different, an error is returned."
      example:
        pageTypes:
        - front
        - back
      properties:
        pageTypes:
          description: The list of the page types
          example:
          - front
          - back
          items:
            description: The list of the page types
            example: "[\"front\",\"back\"]"
            type: string
          type: array
      required:
      - pageTypes
      type: object
      writeOnly: true
    CreateDocumentPageResponse:
      example:
        detection:
          confidence: 0.8
          coordinates:
            topLeftCorner:
              x: 10
              "y": 20
            bottomRightCorner:
              x: 10
              "y": 20
            topRightCorner:
              x: 10
              "y": 20
            bottomLeftCorner:
              x: 10
              "y": 20
          cornerOutOfImage: true
        pageType: front
        documentType:
          country: svk
          edition: 2008-2019
          machineReadableTravelDocument: TD1
          supportLevel: FULL_SUPPORT
          type: identity-card
        warnings:
        - PORTRAIT_NOT_GUARANTEED_OF_THE_SAME_PERSON
        - PORTRAIT_NOT_GUARANTEED_OF_THE_SAME_PERSON
        errorCode: NO_CARD_CORNERS_DETECTED
        links:
          self: self
        additionalData:
          video:
            data: data
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentType"
        pageType:
          description: Document's page type
          example: front
          readOnly: true
          type: string
        detection:
          $ref: "#/components/schemas/DocumentDetection"
        errorCode:
          description: The document page processing error code
          enum:
          - NO_CARD_CORNERS_DETECTED
          - PAGE_DOESNT_MATCH_DOCUMENT_TYPE_OF_PREVIOUS_PAGE
          - INVALID_DATA
          readOnly: true
          type: string
        warnings:
          description: The document page processing warnings
          items:
            description: The document page processing warnings
            enum:
            - PORTRAIT_NOT_GUARANTEED_OF_THE_SAME_PERSON
            - MISSING_FRONT_PAGE
            - DOCUMENT_TYPE_NOT_RECOGNIZED
            readOnly: true
            type: string
          readOnly: true
          type: array
        links:
          $ref: "#/components/schemas/Links"
        additionalData:
          $ref: "#/components/schemas/ResourceData"
      readOnly: true
      type: object
    DocumentCoordinates:
      description: The document's position in the image. The position is defined by
        document corner's coordinates.
      example:
        topLeftCorner:
          x: 10
          "y": 20
        bottomRightCorner:
          x: 10
          "y": 20
        topRightCorner:
          x: 10
          "y": 20
        bottomLeftCorner:
          x: 10
          "y": 20
      properties:
        topLeftCorner:
          $ref: "#/components/schemas/Point"
        topRightCorner:
          $ref: "#/components/schemas/Point"
        bottomLeftCorner:
          $ref: "#/components/schemas/Point"
        bottomRightCorner:
          $ref: "#/components/schemas/Point"
      readOnly: true
      required:
      - bottomLeftCorner
      - bottomRightCorner
      - topLeftCorner
      - topRightCorner
      type: object
    DocumentDetection:
      example:
        confidence: 0.8
        coordinates:
          topLeftCorner:
            x: 10
            "y": 20
          bottomRightCorner:
            x: 10
            "y": 20
          topRightCorner:
            x: 10
            "y": 20
          bottomLeftCorner:
            x: 10
            "y": 20
        cornerOutOfImage: true
      properties:
        confidence:
          description: The document's detection confidence.
          example: 0.8
          format: double
          type: number
        coordinates:
          $ref: "#/components/schemas/DocumentCoordinates"
        cornerOutOfImage:
          description: True if document corners are out of image
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - confidence
      - coordinates
      - cornerOutOfImage
      type: object
    DocumentType:
      description: "Recognized type of document and issuing country, in case it is\
        \ recognized."
      example:
        country: svk
        edition: 2008-2019
        machineReadableTravelDocument: TD1
        supportLevel: FULL_SUPPORT
        type: identity-card
      properties:
        country:
          description: The Alpha-3 ISO 3166 country code
          example: svk
          readOnly: true
          type: string
        edition:
          description: The edition
          example: 2008-2019
          readOnly: true
          type: string
        type:
          description: "The identity document type: passport, identity-card,..."
          example: identity-card
          readOnly: true
          type: string
        machineReadableTravelDocument:
          description: ICAO Machine Readable Travel Document (MRTD) Specification
          example: TD1
          readOnly: true
          type: string
        supportLevel:
          description: "The support level of the document. Possible values: 'FULL_SUPPORT',\
            \ 'MRZ_EXTRACTION_ONLY', 'NOT_SUPPORTED'"
          example: FULL_SUPPORT
          readOnly: true
          type: string
      readOnly: true
      type: object
    CreateDocumentChipDataResponse:
      description: Results of the creation of customer's document chip.
      example:
        errorCode: LDS_PARSE_ERROR
        links:
          self: self
      properties:
        links:
          $ref: "#/components/schemas/Links"
        errorCode:
          description: The document chip data processing error code
          enum:
          - LDS_PARSE_ERROR
          readOnly: true
          type: string
      readOnly: true
      type: object
    CreateDocumentChipResponse:
      example:
        challenge: challenge
      properties:
        challenge:
          format: byte
          readOnly: true
          type: string
      readOnly: true
      required:
      - challenge
      type: object
    CreateSessionRequest:
      example:
        timeout: 600
      properties:
        timeout:
          description: The session's timeout in seconds.
          example: 600
          format: int32
          type: integer
          writeOnly: true
      required:
      - timeout
      type: object
      writeOnly: true
    CreateSessionResponse:
      example:
        token: token
      properties:
        token:
          description: The session's token as Base64 encoded string
          readOnly: true
          type: string
      readOnly: true
      required:
      - token
      type: object
    Base64ImageDto:
      description: Image provided as Base64 encoded string.
      example:
        data: data
      properties:
        data:
          format: byte
          type: string
      required:
      - data
      type: object
      writeOnly: true
    CreatePalmRequest:
      example:
        image:
          data: data
      properties:
        image:
          $ref: "#/components/schemas/Base64ImageDto"
      required:
      - image
      type: object
      writeOnly: true
    CreatePalmResponse:
      example:
        detection:
          confidence: 0.34
          palmRectangle:
            bottomLeft:
              x: 10
              "y": 20
            bottomRight:
              x: 10
              "y": 20
            topLeft:
              x: 10
              "y": 20
            topRight:
              x: 10
              "y": 20
        errorCode: NO_PALM_DETECTED
        links:
          self: self
        id: id
      properties:
        id:
          description: The palm's ID
          readOnly: true
          type: string
        detection:
          $ref: "#/components/schemas/PalmDetectionDto"
        links:
          $ref: "#/components/schemas/Links"
        errorCode:
          description: The palm detection error code
          enum:
          - NO_PALM_DETECTED
          - INVALID_DATA
          readOnly: true
          type: string
      readOnly: true
      type: object
    PalmDetectionDto:
      description: Result of the palm detection containing coordinates of rectangle
        where the palm was detected and the confidence score there is a palm.
      example:
        confidence: 0.34
        palmRectangle:
          bottomLeft:
            x: 10
            "y": 20
          bottomRight:
            x: 10
            "y": 20
          topLeft:
            x: 10
            "y": 20
          topRight:
            x: 10
            "y": 20
      properties:
        confidence:
          description: The palm detection confidence. Values near 1.0 indicates a
            high confidence a palm was detected.
          example: 0.34
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        palmRectangle:
          $ref: "#/components/schemas/Roi"
      readOnly: true
      required:
      - confidence
      - palmRectangle
      type: object
    PalmSimilarityRequest:
      example:
        referencePalmTemplate: referencePalmTemplate
        referencePalm: /api/v1/palms/ff0d8fb4-be47-4858-b03c-6f21b479c302
      properties:
        referencePalm:
          description: The reference palm
          example: /api/v1/palms/ff0d8fb4-be47-4858-b03c-6f21b479c302
          type: string
        referencePalmTemplate:
          format: byte
          type: string
      type: object
      writeOnly: true
    PalmSimilarityResponse:
      example:
        score: 0.83
        errorCode: PALM_TEMPLATE_VERSION_MISMATCH
      properties:
        score:
          description: The palm similarity score. The higher score indicates higher
            similarity of matched palms.
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        errorCode:
          description: The palm matching error code
          enum:
          - PALM_TEMPLATE_VERSION_MISMATCH
          - PALM_TEMPLATE_INVALID_DATA
          - PALM_TEMPLATE_MATCHING_FAILED
          readOnly: true
          type: string
      readOnly: true
      type: object
    PalmInspectResponse:
      description: Inspection of the palm resource.
      example:
        securityInspection:
          videoInjection:
            detected: true
            evaluated: true
      properties:
        securityInspection:
          $ref: "#/components/schemas/PalmSecurityInspectionDto"
      readOnly: true
      required:
      - securityInspection
      type: object
    PalmSecurityInspectionDto:
      description: The palm's security inspection.
      example:
        videoInjection:
          detected: true
          evaluated: true
      properties:
        videoInjection:
          $ref: "#/components/schemas/PalmVideoInjectionInspectionDto"
      readOnly: true
      required:
      - videoInjection
      type: object
    PalmVideoInjectionInspectionDto:
      description: The video injection inspection of the palm.
      example:
        detected: true
        evaluated: true
      properties:
        evaluated:
          description: True if video injection was evaluated on the palm resource.
          readOnly: true
          type: boolean
        detected:
          description: True if video injection was detected on the palm resource.
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - evaluated
      type: object
    CreateFaceRequest:
      example:
        image:
          data: data
          url: http://localhost/example.png
        detection:
          mode: FREE
          faceSizeRatio:
            min: 0.05
            max: 0.5
        faceOrigin:
          link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
      properties:
        image:
          $ref: "#/components/schemas/Image"
        detection:
          $ref: "#/components/schemas/FaceDetectionProperties"
        faceOrigin:
          $ref: "#/components/schemas/CustomerSelfieOrigin"
      type: object
      writeOnly: true
    CustomerSelfieOrigin:
      description: This allows to link the image from customer selfie or face from
        the document portrait. Do not upload the photo in Image class in this case
        and do not set detection properties.
      example:
        link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
      properties:
        link:
          description: Either the customer selfie origin link (/api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie)
            or the customer document portrait link (/api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/document/portrait).
          example: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
          type: string
      required:
      - link
      type: object
      writeOnly: true
    FaceDetectionProperties:
      description: The face detection properties
      example:
        mode: FREE
        faceSizeRatio:
          min: 0.05
          max: 0.5
      properties:
        mode:
          description: 'The face detection mode. The `strict` detection detects face
            but returns error if multiple faces are detected in the image. The `free`
            detection detects faces in the image and returns the biggest one with
            warning if there are multiple faces detected. '
          enum:
          - FREE
          - STRICT
          example: FREE
          type: string
        faceSizeRatio:
          $ref: "#/components/schemas/FaceSizeRatio"
      type: object
      writeOnly: true
    FaceSizeRatio:
      description: The face size ratio configuration. The minimum have to be less
        then the maximum.
      example:
        min: 0.05
        max: 0.5
      properties:
        min:
          description: The minimum face size ratio
          example: 0.05
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: float
          maximum: 1.0
          minimum: 0.0
          type: number
        max:
          description: The maximum face size ratio
          example: 0.5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: float
          maximum: 1.0
          minimum: 0.0
          type: number
      required:
      - max
      - min
      type: object
      writeOnly: true
    CreateFaceResponse:
      example:
        detection:
          faceRectangle:
            bottomLeft:
              x: 10
              "y": 20
            bottomRight:
              x: 10
              "y": 20
            topLeft:
              x: 10
              "y": 20
            topRight:
              x: 10
              "y": 20
          confidence: 0.34
        warnings:
        - MULTIPLE_FACES_DETECTED
        - MULTIPLE_FACES_DETECTED
        errorCode: MULTIPLE_FACES_DETECTED
        links:
          self: self
        id: id
      properties:
        id:
          description: The face's ID
          readOnly: true
          type: string
        detection:
          $ref: "#/components/schemas/FaceDetection"
        links:
          $ref: "#/components/schemas/Links"
        errorCode:
          description: The face detection error code
          enum:
          - MULTIPLE_FACES_DETECTED
          - NO_FACE_DETECTED
          - INVALID_DATA
          readOnly: true
          type: string
        warnings:
          description: The face detection warnings
          items:
            description: The face detection warnings
            enum:
            - MULTIPLE_FACES_DETECTED
            readOnly: true
            type: string
          readOnly: true
          type: array
      readOnly: true
      type: object
    FaceSimilarityRequest:
      example:
        referenceFaceTemplate: referenceFaceTemplate
        referenceFace: /api/v1/faces/ff0d8fb4-be47-4858-b03c-6f21b479c302
      properties:
        referenceFace:
          description: The reference face
          example: /api/v1/faces/ff0d8fb4-be47-4858-b03c-6f21b479c302
          type: string
        referenceFaceTemplate:
          format: byte
          type: string
      type: object
      writeOnly: true
    FaceSimilarityResponse:
      example:
        score: 0.83
      properties:
        score:
          description: The face similarity score. The higher score indicates higher
            similarity of matched faces.
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    CreateCustomerResponse:
      example:
        links:
          self: self
        id: id
      properties:
        id:
          description: The customer's ID
          readOnly: true
          type: string
        links:
          $ref: "#/components/schemas/Links"
      readOnly: true
      required:
      - id
      - links
      type: object
    CustomerStoreRequest:
      example:
        onboardingStatus: IN_PROGRESS
        externalId: 55bd71d3-12cc-4c15-accd-b6dc8702bf3b
      properties:
        externalId:
          description: "External identifier of the customer (for pairing between Trust\
            \ Platform and external database), limited to alphanumeric, '.', '-' and\
            \ '_' characters and maximum length of 64. If not supplied, the UUID of\
            \ the customer present in the request URL is used instead."
          example: 55bd71d3-12cc-4c15-accd-b6dc8702bf3b
          pattern: "^[a-zA-Z\\d._-]{1,64}$"
          type: string
          writeOnly: true
        onboardingStatus:
          description: Onboarding status of the customer to be stored in the Trust
            Platform. Use the FINISHED status only if you have collected all required
            data of the customer.
          enum:
          - IN_PROGRESS
          - FINISHED
          example: IN_PROGRESS
          type: string
          writeOnly: true
      required:
      - onboardingStatus
      type: object
    CreateCustomerLivenessSelfieRequest:
      example:
        image:
          data: data
          url: http://localhost/example.png
        selfieOrigin:
          link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
        assertion: EYE_GAZE_TOP_LEFT
      properties:
        image:
          $ref: "#/components/schemas/Image"
        selfieOrigin:
          $ref: "#/components/schemas/SelfieOrigin"
        assertion:
          description: "Definition of the active liveness challenge that the customer's\
            \ face has to display in the provided selfie photo. E.g. if it is expected\
            \ that the face is looking to top left corner of the screen, assertion\
            \ EYE_GAZE_TOP_LEFT has to be used."
          enum:
          - EYE_GAZE_TOP_LEFT
          - EYE_GAZE_TOP_RIGHT
          - EYE_GAZE_BOTTOM_LEFT
          - EYE_GAZE_BOTTOM_RIGHT
          - SMILE
          - NEUTRAL
          - NONE
          example: EYE_GAZE_TOP_LEFT
          type: string
      required:
      - assertion
      type: object
      writeOnly: true
    SelfieOrigin:
      description: "This allows to link the image already used for customer selfie\
        \ to be reused as one of the liveness photos, ideal for using the selfie photo\
        \ for passive liveness. Do not upload the photo in Image class in this case."
      example:
        link: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
      properties:
        link:
          description: The selfie origin link
          example: /api/v1/customers/65ebc529-50da-43cb-9963-e15fbf524f8e/selfie
          type: string
      required:
      - link
      type: object
      writeOnly: true
    CreateCustomerLivenessSelfieResponse:
      example:
        warnings:
        - MULTIPLE_FACES_DETECTED
        - MULTIPLE_FACES_DETECTED
        errorCode: NO_FACE_DETECTED
      properties:
        errorCode:
          description: The face detection error code
          enum:
          - NO_FACE_DETECTED
          readOnly: true
          type: string
        warnings:
          description: The face detection warnings
          items:
            description: The face detection warnings
            enum:
            - MULTIPLE_FACES_DETECTED
            - LOW_QUALITY
            readOnly: true
            type: string
          readOnly: true
          type: array
      readOnly: true
      type: object
    RetrieveLivenessSelfiesRequest:
      example:
        type: EYE_GAZE_LIVENESS
      properties:
        type:
          description: Describes which type of liveness selfies and record liveness
            selfies should be returned
          enum:
          - EYE_GAZE_LIVENESS
          - PASSIVE_LIVENESS
          - SMILE_LIVENESS
          - MAGNIFEYE_LIVENESS
          type: string
          writeOnly: true
      required:
      - type
      type: object
    LivenessRecordSelfie:
      description: "Liveness record selfies uploaded via [/liveness/records](#tag/Customer-onboarding/operation/createLivenessRecord)\
        \ endpoint"
      example:
        data: data
        assertion: EYE_GAZE_TOP_LEFT
      properties:
        assertion:
          enum:
          - EYE_GAZE_TOP_LEFT
          - EYE_GAZE_TOP_RIGHT
          - EYE_GAZE_BOTTOM_LEFT
          - EYE_GAZE_BOTTOM_RIGHT
          - SMILE
          - NEUTRAL
          - NONE
          - MAGNIFEYE
          type: string
        data:
          format: byte
          type: string
      readOnly: true
      required:
      - assertion
      - data
      type: object
    LivenessSelfie:
      description: "Liveness selfies uploaded via [/liveness/selfies](#tag/Customer-onboarding/operation/createLivenessSelfie)\
        \ endpoint"
      example:
        data: data
        assertion: EYE_GAZE_TOP_LEFT
      properties:
        assertion:
          enum:
          - EYE_GAZE_TOP_LEFT
          - EYE_GAZE_TOP_RIGHT
          - EYE_GAZE_BOTTOM_LEFT
          - EYE_GAZE_BOTTOM_RIGHT
          - SMILE
          - NEUTRAL
          - NONE
          type: string
        data:
          format: byte
          type: string
      readOnly: true
      required:
      - assertion
      - data
      type: object
    RetrieveLivenessSelfiesResponse:
      example:
        selfies:
        - data: data
          assertion: EYE_GAZE_TOP_LEFT
        - data: data
          assertion: EYE_GAZE_TOP_LEFT
        recordSelfies:
        - data: data
          assertion: EYE_GAZE_TOP_LEFT
        - data: data
          assertion: EYE_GAZE_TOP_LEFT
      properties:
        selfies:
          items:
            $ref: "#/components/schemas/LivenessSelfie"
          readOnly: true
          type: array
        recordSelfies:
          items:
            $ref: "#/components/schemas/LivenessRecordSelfie"
          readOnly: true
          type: array
      type: object
    CreateCustomerLivenessRecordResponse:
      example:
        selfie:
          detection:
            faceRectangle:
              bottomLeft:
                x: 10
                "y": 20
              bottomRight:
                x: 10
                "y": 20
              topLeft:
                x: 10
                "y": 20
              topRight:
                x: 10
                "y": 20
            confidence: 0.34
        errorCode: INVALID_DATA
        links:
          selfie: selfie
        additionalData:
          video:
            data: data
      properties:
        selfie:
          $ref: "#/components/schemas/SelfieFromLivenessRecord"
        links:
          $ref: "#/components/schemas/LivenessRecordLinks"
        errorCode:
          description: The face detection error code
          enum:
          - INVALID_DATA
          readOnly: true
          type: string
        additionalData:
          $ref: "#/components/schemas/ResourceData"
      type: object
    LivenessRecordLinks:
      description: The resource's links
      example:
        selfie: selfie
      properties:
        selfie:
          description: The resource's selfie link.
          readOnly: true
          type: string
      readOnly: true
      required:
      - selfie
      type: object
    SelfieFromLivenessRecord:
      example:
        detection:
          faceRectangle:
            bottomLeft:
              x: 10
              "y": 20
            bottomRight:
              x: 10
              "y": 20
            topLeft:
              x: 10
              "y": 20
            topRight:
              x: 10
              "y": 20
          confidence: 0.34
      properties:
        detection:
          $ref: "#/components/schemas/FaceDetection"
      readOnly: true
      required:
      - detection
      type: object
    EvaluateCustomerLivenessRequest:
      description: "Definition of the type of liveness evaluation to be performed\
        \ on the provided photos. Please, read the chapters \"Passive Liveness\" and\
        \ \"Active Liveness\" of the DOT documentation."
      example:
        type: EYE_GAZE_LIVENESS
      properties:
        type:
          enum:
          - EYE_GAZE_LIVENESS
          - PASSIVE_LIVENESS
          - SMILE_LIVENESS
          - MAGNIFEYE_LIVENESS
          type: string
      required:
      - type
      type: object
      writeOnly: true
    EvaluateCustomerLivenessResponse:
      description: "Result of the liveness evaluation. Please, read the chapters \"\
        Passive Liveness\" and \"Active Liveness\" of the DOT documentation to evaluate\
        \ the calculated score."
      example:
        score: 0.8
        errorCode: INVALID_DATA
      properties:
        score:
          description: The liveness score
          example: 0.8
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        errorCode:
          description: The liveness error code
          enum:
          - NOT_ENOUGH_DATA
          - INVALID_DATA
          example: INVALID_DATA
          readOnly: true
          type: string
      readOnly: true
      type: object
    CustomerInspectResponse:
      example:
        security:
          videoInjection:
            detected: true
            evaluated: true
        links:
          documentInspection: documentInspection
        selfieInspection:
          hasMask: false
          ageEstimate: 32
          similarityWith:
            documentPortrait: true
            chipPortrait: true
            livenessSelfies: true
          genderConsistency:
            documentPortrait: true
            mrz: true
            viz: true
          ageDifferenceWith:
            documentPortrait: 0
            dateOfBirth: 6
          genderEstimate: F
      properties:
        selfieInspection:
          $ref: "#/components/schemas/SelfieInspection"
        security:
          $ref: "#/components/schemas/SecurityInspection"
        links:
          $ref: "#/components/schemas/CustomerInspectionLinks"
      readOnly: true
      type: object
    CustomerInspectionLinks:
      description: The customer's inspection links.
      example:
        documentInspection: documentInspection
      properties:
        documentInspection:
          description: The document's inspection link
          readOnly: true
          type: string
      readOnly: true
      required:
      - documentInspection
      type: object
    SecurityInspection:
      description: The customer's security inspection.
      example:
        videoInjection:
          detected: true
          evaluated: true
      properties:
        videoInjection:
          $ref: "#/components/schemas/VideoInjectionInspection"
      readOnly: true
      required:
      - videoInjection
      type: object
    SelfieAgeDifferenceWith:
      description: Difference of the estimated age in years between the customer's
        selfie and other data extracted from ID document.
      example:
        documentPortrait: 0
        dateOfBirth: 6
      properties:
        documentPortrait:
          description: The difference in years between the estimated age of a person
            in the selfie and the estimated age of a person in the document portrait.
            The age estimated based on the document portrait is adjusted by the age
            of the document. This attribute is available only if the document's issue
            date is available.
          format: int32
          readOnly: true
          type: integer
        dateOfBirth:
          description: Max difference in years between the estimated age of a person
            in the selfie and the age extracted from the document's visual zone and
            MRZ.
          format: int32
          readOnly: true
          type: integer
      readOnly: true
      type: object
    SelfieInspection:
      description: "Results of the inspection of customer's selfie versus document.\
        \ Please, read the chapter \"Trust Factors\" of the DOT documentation."
      example:
        hasMask: false
        ageEstimate: 32
        similarityWith:
          documentPortrait: true
          chipPortrait: true
          livenessSelfies: true
        genderConsistency:
          documentPortrait: true
          mrz: true
          viz: true
        ageDifferenceWith:
          documentPortrait: 0
          dateOfBirth: 6
        genderEstimate: F
      properties:
        similarityWith:
          $ref: "#/components/schemas/SelfieSimilarityWith"
        genderEstimate:
          description: "Estimated gender of the customer in the selfie, represented\
            \ by: M for male, F for female"
          example: F
          readOnly: true
          type: string
        genderConsistency:
          $ref: "#/components/schemas/SelfieInspectionGenderConsistency"
        ageEstimate:
          description: Estimated age of the customer in the selfie in years.
          example: 32
          format: int32
          readOnly: true
          type: integer
        ageDifferenceWith:
          $ref: "#/components/schemas/SelfieAgeDifferenceWith"
        hasMask:
          description: True if a person in the selfie is wearing a face mask
          example: false
          readOnly: true
          type: boolean
      readOnly: true
      type: object
    SelfieInspectionGenderConsistency:
      description: Consistency of estimated gender on the selfie with customer's data
        extracted from ID document.
      example:
        documentPortrait: true
        mrz: true
        viz: true
      properties:
        documentPortrait:
          description: True if selfie's gender is consistent with gender from the
            document's portrait
          readOnly: true
          type: boolean
        viz:
          description: True if selfie's gender is consistent with gender from the
            document's visual zone
          readOnly: true
          type: boolean
        mrz:
          description: True if selfie's gender is consistent with gender from the
            document's MRZ
          readOnly: true
          type: boolean
      readOnly: true
      type: object
    SelfieSimilarityWith:
      description: "Similarity of the face between the selfie, document portrait and\
        \ the liveness selfies. Please, read the chapter \"Face Matching\" of the\
        \ DOT documentation."
      example:
        documentPortrait: true
        chipPortrait: true
        livenessSelfies: true
      properties:
        documentPortrait:
          description: True if the person in the selfie matches a person in the document
            portrait
          example: true
          readOnly: true
          type: boolean
        chipPortrait:
          description: True if the person in the selfie matches a person in the portrait
            retrieved from the document chip
          example: true
          readOnly: true
          type: boolean
        livenessSelfies:
          description: True if the person in the selfie matches a person in each liveness
            selfie
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      type: object
    VideoInjectionInspection:
      description: The video injection inspection.
      example:
        detected: true
        evaluated: true
      properties:
        evaluated:
          description: True if video injection was evaluated on the customer's resources.
          readOnly: true
          type: boolean
        detected:
          description: True if video injection was detected on the customer's resources.
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - evaluated
      type: object
    CustomerInspectDiscloseResponse:
      example:
        selfieInspection:
          similarityWith:
            documentPortrait:
              score: 0.955
            livenessSelfies:
              score: 0.955
      properties:
        selfieInspection:
          $ref: "#/components/schemas/SelfieInspectionDisclose"
      readOnly: true
      type: object
    DocumentPortraitDisclose:
      description: Result of the document portrait similarity check.
      example:
        score: 0.955
      properties:
        score:
          description: The resulting score of the similarity between the user's selfie
            and the document portrait.
          example: 0.955
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    LivenessSelfiesDisclose:
      description: Result of the liveness selfies similarity check.
      example:
        score: 0.955
      properties:
        score:
          description: The resulting score represents the minimum similarity between
            the user's selfie and the liveness selfies.
          example: 0.955
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    SelfieInspectionDisclose:
      example:
        similarityWith:
          documentPortrait:
            score: 0.955
          livenessSelfies:
            score: 0.955
      properties:
        similarityWith:
          $ref: "#/components/schemas/SelfieSimilarityWithDisclose"
      readOnly: true
      type: object
    SelfieSimilarityWithDisclose:
      description: Similarity of the face between the selfie and the document portrait.
      example:
        documentPortrait:
          score: 0.955
        livenessSelfies:
          score: 0.955
      properties:
        documentPortrait:
          $ref: "#/components/schemas/DocumentPortraitDisclose"
        livenessSelfies:
          $ref: "#/components/schemas/LivenessSelfiesDisclose"
      readOnly: true
      type: object
    AgeDifferenceWith:
      description: Difference of age with particular fields. Only available if a difference
        has been detected
      example:
        dateOfBirth: 7
      properties:
        dateOfBirth:
          description: Max difference with MRZ and VIZ birth date
          example: 7
          format: int32
          readOnly: true
          type: integer
      readOnly: true
      required:
      - dateOfBirth
      type: object
    BarcodesConsistency:
      description: The visual zone text consistency with document barcodes
      example:
        inconsistentTexts:
        - inconsistentTexts
        - inconsistentTexts
      properties:
        inconsistentTexts:
          description: All recognized text fields of the visual zone those are inconsistent
            with barcodes. It works only for unencrypted barcodes that represent text
            in the same format as in the visual zone.
          items:
            description: All recognized text fields of the visual zone those are inconsistent
              with barcodes. It works only for unencrypted barcodes that represent
              text in the same format as in the visual zone.
            readOnly: true
            type: string
          readOnly: true
          type: array
      readOnly: true
      required:
      - inconsistentTexts
      type: object
    DocumentChipInspection:
      description: Result of the inspection of the document's chip.
      example:
        accessControlProtocolType: accessControlProtocolType
        dataAuthentication: dataAuthentication
        chipAuthentication: chipAuthentication
        chipAuthenticationType: chipAuthenticationType
      properties:
        dataAuthentication:
          description: Status of the data authentication.
          readOnly: true
          type: string
        chipAuthentication:
          description: Status of the chip authentication.
          readOnly: true
          type: string
        chipAuthenticationType:
          description: Type of chip authentication.
          readOnly: true
          type: string
        accessControlProtocolType:
          description: AccessControlProtocol used for document chip authentication.
          readOnly: true
          type: string
      readOnly: true
      type: object
    DocumentInspectResponse:
      description: "Results of the inspection of customer's document. Please, read\
        \ the chapter \"ID Document Authenticity Evaluation\" of the DOT documentation."
      example:
        portraitInspection:
          ageEstimate: 42
          genderConsistency:
            mrz: true
            viz: true
          ageDifferenceWith:
            dateOfBirth: 7
          genderEstimate: M
        visualZoneInspection:
          ocrConfidence:
            confidence: 0.98
            lowOcrConfidenceTexts:
            - lowOcrConfidenceTexts
            - lowOcrConfidenceTexts
          textConsistency:
            consistent: true
            consistencyWith:
              mrz:
                inconsistentTexts:
                - inconsistentTexts
                - inconsistentTexts
              barcodes:
                inconsistentTexts:
                - inconsistentTexts
                - inconsistentTexts
        expired: false
        mrzInspection:
          valid: true
        pageTampering:
          key:
            looksLikeScreenshot: false
            tamperedTexts: false
            colorProfileChangeDetected: false
            looksLikePrintCopy: false
        chipInspection:
          accessControlProtocolType: accessControlProtocolType
          dataAuthentication: dataAuthentication
          chipAuthentication: chipAuthentication
          chipAuthenticationType: chipAuthenticationType
      properties:
        expired:
          description: True if the document is expired at the time of the customer's
            on-boarding. This attribute is available only if the document's expiry
            date is available.
          example: false
          readOnly: true
          type: boolean
        mrzInspection:
          $ref: "#/components/schemas/MrzInspection"
        portraitInspection:
          $ref: "#/components/schemas/PortraitInspection"
        visualZoneInspection:
          $ref: "#/components/schemas/VisualZoneInspection"
        pageTampering:
          additionalProperties:
            $ref: "#/components/schemas/PageTamperingInspection"
          readOnly: true
          type: object
        chipInspection:
          $ref: "#/components/schemas/DocumentChipInspection"
      readOnly: true
      type: object
    MrzConsistency:
      description: The visual zone text consistency with document MRZ
      example:
        inconsistentTexts:
        - inconsistentTexts
        - inconsistentTexts
      properties:
        inconsistentTexts:
          description: All recognized text fields of visual zone that are inconsistent
            with MRZ.
          items:
            description: All recognized text fields of visual zone that are inconsistent
              with MRZ.
            readOnly: true
            type: string
          readOnly: true
          type: array
      readOnly: true
      required:
      - inconsistentTexts
      type: object
    MrzInspection:
      description: "Result of inspection of MRZ zone on the document, if present.\
        \ Please, read the chapter \"Machine Readable Zone\" of the DOT documentation."
      example:
        valid: true
      properties:
        valid:
          description: True if the document's MRZ is valid. A valid MRZ has to match
            the specification and its checksums have to be correct.
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - valid
      type: object
    OcrConfidence:
      description: Confidence of the OCR recognition accuracy of the text fields in
        the visual inspection zone of the document.
      example:
        confidence: 0.98
        lowOcrConfidenceTexts:
        - lowOcrConfidenceTexts
        - lowOcrConfidenceTexts
      properties:
        confidence:
          description: The median of all recognized text fields OCR confidences.
          example: 0.98
          format: double
          readOnly: true
          type: number
        lowOcrConfidenceTexts:
          description: All recognized text fields that have OCR confidence below the
            configurable threshold.
          items:
            description: All recognized text fields that have OCR confidence below
              the configurable threshold.
            readOnly: true
            type: string
          readOnly: true
          type: array
      readOnly: true
      required:
      - confidence
      type: object
    PageTamperingInspection:
      description: Result of the visual detection indicating possibly fraudulent documents
        based on the appearance of the image.
      example:
        looksLikeScreenshot: false
        tamperedTexts: false
        colorProfileChangeDetected: false
        looksLikePrintCopy: false
      properties:
        colorProfileChangeDetected:
          description: True if there is a significant change in color profile of the
            submitted document against a supported document (e.g. the supplied photo
            is in greyscale)
          example: false
          readOnly: true
          type: boolean
        looksLikeScreenshot:
          description: True if the submitted document was detected to be photographed
            from a screen
          example: false
          readOnly: true
          type: boolean
        tamperedTexts:
          description: True if the submitted document shows signs of text manipulation
          example: false
          readOnly: true
          type: boolean
        looksLikePrintCopy:
          description: True if the submitted document shows signs of Print Copy manipulation
          example: false
          readOnly: true
          type: boolean
      readOnly: true
      type: object
    PortraitInspection:
      description: "Result of document portrait inspection, which checks estimated\
        \ age and gender against other data on the document. Only available if the\
        \ document portrait is available"
      example:
        ageEstimate: 42
        genderConsistency:
          mrz: true
          viz: true
        ageDifferenceWith:
          dateOfBirth: 7
        genderEstimate: M
      properties:
        genderEstimate:
          description: Gender estimate from the document portrait
          example: M
          readOnly: true
          type: string
        genderConsistency:
          $ref: "#/components/schemas/PortraitInspectionGenderConsistency"
        ageEstimate:
          description: Estimation of age from the document portrait
          example: 42
          format: int32
          readOnly: true
          type: integer
        ageDifferenceWith:
          $ref: "#/components/schemas/AgeDifferenceWith"
      readOnly: true
      type: object
    PortraitInspectionGenderConsistency:
      description: Gender consistency between document portrait and document data.
        Only available if MRZ and VIZ are available for comparison
      example:
        mrz: true
        viz: true
      properties:
        viz:
          description: True if the gender is consistent with the visual zone. Only
            available if the visual zone of the document has been processed.
          example: true
          readOnly: true
          type: boolean
        mrz:
          description: True if the gender is consistent with the MRZ. Only available
            if the document's MRZ is available
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      type: object
    TextConsistency:
      description: Cross-check of the text fields extracted with OCR recognition from
        the visual inspection zone against the texts extracted from other sources
        in the document.
      example:
        consistent: true
        consistencyWith:
          mrz:
            inconsistentTexts:
            - inconsistentTexts
            - inconsistentTexts
          barcodes:
            inconsistentTexts:
            - inconsistentTexts
            - inconsistentTexts
      properties:
        consistent:
          description: True if the document's VIZ is consistent with other document
            data.
          example: true
          readOnly: true
          type: boolean
        consistencyWith:
          $ref: "#/components/schemas/TextConsistentWith"
      readOnly: true
      required:
      - consistent
      type: object
    TextConsistentWith:
      description: The visual zone text consistency with other document data
      example:
        mrz:
          inconsistentTexts:
          - inconsistentTexts
          - inconsistentTexts
        barcodes:
          inconsistentTexts:
          - inconsistentTexts
          - inconsistentTexts
      properties:
        mrz:
          $ref: "#/components/schemas/MrzConsistency"
        barcodes:
          $ref: "#/components/schemas/BarcodesConsistency"
      readOnly: true
      type: object
    VisualZoneInspection:
      description: The document visual zone inspection result
      example:
        ocrConfidence:
          confidence: 0.98
          lowOcrConfidenceTexts:
          - lowOcrConfidenceTexts
          - lowOcrConfidenceTexts
        textConsistency:
          consistent: true
          consistencyWith:
            mrz:
              inconsistentTexts:
              - inconsistentTexts
              - inconsistentTexts
            barcodes:
              inconsistentTexts:
              - inconsistentTexts
              - inconsistentTexts
      properties:
        ocrConfidence:
          $ref: "#/components/schemas/OcrConfidence"
        textConsistency:
          $ref: "#/components/schemas/TextConsistency"
      readOnly: true
      required:
      - ocrConfidence
      type: object
    ColorProfileChangeDetectedDisclose:
      description: Result of the color profile difference check.
      example:
        score: 0.2345
      properties:
        score:
          description: "The resulting score of the color profile check representing\
            \ difference between the submitted document and the reference documents\
            \ (e.g. the supplied photo is in greyscale). The score is normalized to\
            \ the interval from 0 to 1. Lower the score, higher the color difference\
            \ between documents."
          example: 0.2345
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    DocumentInspectDiscloseResponse:
      example:
        pageTampering:
          key:
            looksLikeScreenshot:
              score: 0.1455
            presentationAttackPrintClass:
              score: 0.1455
            presentationAttackScreenClass:
              score: 0.1455
            tamperedTexts:
              key:
                score: 0.2165
            colorProfileChangeDetected:
              score: 0.2345
            documentPortraitGenuine:
              score: 0.2165
            presentationAttackDetectionGenuine:
              score: 0.2165
      properties:
        pageTampering:
          additionalProperties:
            $ref: "#/components/schemas/PageTamperingInspectionDisclose"
          readOnly: true
          type: object
      readOnly: true
      type: object
    DocumentPortraitGenuineDisclose:
      description: Result of the document portrait genuine check.
      example:
        score: 0.2165
      properties:
        score:
          description: "The resulting score of the document portrait genuine check\
            \ on the submitted document. The score is normalized to the interval from\
            \ 0 to 1. Higher the score, higher the probability of the document portrait\
            \ being genuine."
          example: 0.2165
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    LooksLikeScreenshotDisclose:
      description: Result of the screenshot detection check.
      example:
        score: 0.1455
      properties:
        score:
          description: "The resulting score of the screenshot detection on the submitted\
            \ document. The score is normalized to the interval from 0 to 1. Lower\
            \ the score, higher the probability of the document being photographed\
            \ from the screen."
          example: 0.1455
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    PageTamperingInspectionDisclose:
      description: Result of the visual detection indicating possibly fraudulent documents
        based on the appearance of the image.
      example:
        looksLikeScreenshot:
          score: 0.1455
        presentationAttackPrintClass:
          score: 0.1455
        presentationAttackScreenClass:
          score: 0.1455
        tamperedTexts:
          key:
            score: 0.2165
        colorProfileChangeDetected:
          score: 0.2345
        documentPortraitGenuine:
          score: 0.2165
        presentationAttackDetectionGenuine:
          score: 0.2165
      properties:
        colorProfileChangeDetected:
          $ref: "#/components/schemas/ColorProfileChangeDetectedDisclose"
        looksLikeScreenshot:
          $ref: "#/components/schemas/LooksLikeScreenshotDisclose"
        documentPortraitGenuine:
          $ref: "#/components/schemas/DocumentPortraitGenuineDisclose"
        tamperedTexts:
          additionalProperties:
            $ref: "#/components/schemas/TamperedTextDetectionScore"
          readOnly: true
          type: object
        presentationAttackDetectionGenuine:
          $ref: "#/components/schemas/PresentationAttackDetectionGenuineDisclose"
        presentationAttackScreenClass:
          $ref: "#/components/schemas/PresentationAttackScreenClassDisclose"
        presentationAttackPrintClass:
          $ref: "#/components/schemas/PresentationAttackPrintClassDisclose"
      readOnly: true
      type: object
    PresentationAttackDetectionGenuineDisclose:
      description: Result of the document presentation attack check.
      example:
        score: 0.2165
      properties:
        score:
          description: "The resulting score of the document presentation attack check\
            \ on the submitted document. The score is normalized to the interval from\
            \ 0 to 1. Higher the score, higher the probability of the document portrait\
            \ being genuine."
          example: 0.2165
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    PresentationAttackPrintClassDisclose:
      description: Result of the print copy detection check.
      example:
        score: 0.1455
      properties:
        score:
          description: "The resulting score of the print copy detection on the submitted\
            \ document. The score is normalized to the interval from 0 to 1. Higher\
            \ the score, higher the probability of the photographed document being\
            \ a printed copy of the original document."
          example: 0.1455
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    PresentationAttackScreenClassDisclose:
      description: Result of the screenshot detection check.
      example:
        score: 0.1455
      properties:
        score:
          description: "The resulting score of the screenshot detection on the submitted\
            \ document. The score is normalized to the interval from 0 to 1. Higher\
            \ the score, higher the probability of the document being photographed\
            \ from the screen."
          example: 0.1455
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    TamperedTextDetectionScore:
      description: Result of the document tampered text check.
      example:
        score: 0.2165
      properties:
        score:
          description: "The resulting score of the tampered text check for text field\
            \ on the submitted document. The score is normalized to the interval from\
            \ 0 to 1. Higher the score, higher the probability of the document texts\
            \ being genuine."
          example: 0.2165
          format: float
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    PalmTemplateResponse:
      example:
        data: data
        version: "1.13"
      properties:
        data:
          format: byte
          readOnly: true
          type: string
        version:
          description: The template version
          example: "1.13"
          readOnly: true
          type: string
      readOnly: true
      required:
      - data
      - version
      type: object
    Document:
      description: Document metadata
      example:
        pages:
          key:
            visualZone:
              key:
                valueNormalized: true
                label: Surname
            classificationAdviceRequired: true
            portrait:
              present: true
        documentType:
          country: svk
          edition: 2008-2019
          machineReadableTravelDocument: TD1
          supportLevel: FULL_SUPPORT
          type: identity-card
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentType"
        pages:
          additionalProperties:
            $ref: "#/components/schemas/PageMetadata"
          description: The map of document page's metadata. The map keys are page
            types.
          readOnly: true
          type: object
      readOnly: true
      required:
      - documentType
      - pages
      title: MetadataDocument
      type: object
    DocumentMetadataResponse:
      description: Document metadata response
      example:
        documents:
        - pages:
            key:
              visualZone:
                key:
                  valueNormalized: true
                  label: Surname
              classificationAdviceRequired: true
              portrait:
                present: true
          documentType:
            country: svk
            edition: 2008-2019
            machineReadableTravelDocument: TD1
            supportLevel: FULL_SUPPORT
            type: identity-card
        - pages:
            key:
              visualZone:
                key:
                  valueNormalized: true
                  label: Surname
              classificationAdviceRequired: true
              portrait:
                present: true
          documentType:
            country: svk
            edition: 2008-2019
            machineReadableTravelDocument: TD1
            supportLevel: FULL_SUPPORT
            type: identity-card
      properties:
        documents:
          description: The list of document's metadata
          items:
            $ref: "#/components/schemas/Document"
          readOnly: true
          type: array
      readOnly: true
      required:
      - documents
      type: object
    PageMetadata:
      description: Document page metadata
      example:
        visualZone:
          key:
            valueNormalized: true
            label: Surname
        classificationAdviceRequired: true
        portrait:
          present: true
      properties:
        classificationAdviceRequired:
          description: True if a precise classification advice is required when uploading
            the document page.
          readOnly: true
          type: boolean
        portrait:
          $ref: "#/components/schemas/Portrait"
        visualZone:
          additionalProperties:
            $ref: "#/components/schemas/TextField"
          description: The map of text field's metadata. The map keys represent the
            text field types.
          readOnly: true
          type: object
      readOnly: true
      required:
      - visualZone
      type: object
    Portrait:
      description: Portrait presence
      example:
        present: true
      properties:
        present:
          description: True if the document portrait image field is present
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - present
      title: MetadataPortrait
      type: object
    TextField:
      description: Text field metadata
      example:
        valueNormalized: true
        label: Surname
      properties:
        label:
          description: Label printed on card (if present)
          example: Surname
          readOnly: true
          type: string
        valueNormalized:
          description: True if the value is being normalized
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - valueNormalized
      title: MetadataTextField
      type: object
    FaceAttribute:
      description: The face's attribute
      example:
        score: 0.24
        preconditionsMet: true
      properties:
        score:
          description: The face's attribute score
          example: 0.24
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        preconditionsMet:
          description: The flag indicates if the face's attribute score is reliable.
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - preconditionsMet
      - score
      type: object
    FaceQualityResponse:
      example:
        shadow:
          score: 0.24
          preconditionsMet: true
        faceSize:
          score: 0.24
          preconditionsMet: true
        backgroundUniformity:
          score: 0.24
          preconditionsMet: true
        leftEye:
          score: 0.24
          preconditionsMet: true
        roll:
          preconditionsMet: true
          angle: 25
        specularity:
          score: 0.24
          preconditionsMet: true
        faceRelativeAreaInImage:
          score: 0.24
          preconditionsMet: true
        redRightEye:
          score: 0.24
          preconditionsMet: true
        yaw:
          preconditionsMet: true
          angle: 25
        uniqueIntensityLevels:
          score: 0.24
          preconditionsMet: true
        faceRelativeArea:
          score: 0.24
          preconditionsMet: true
        brightness:
          score: 0.24
          preconditionsMet: true
        noseShadow:
          score: 0.24
          preconditionsMet: true
        rightEye:
          score: 0.24
          preconditionsMet: true
        mouth:
          score: 0.24
          preconditionsMet: true
        redLeftEye:
          score: 0.24
          preconditionsMet: true
        eyeGaze:
          score: 0.24
          preconditionsMet: true
        contrast:
          score: 0.24
          preconditionsMet: true
        eyeDistance:
          score: 0.24
          preconditionsMet: true
        sharpness:
          score: 0.24
          preconditionsMet: true
        pitch:
          preconditionsMet: true
          angle: 25
      properties:
        sharpness:
          $ref: "#/components/schemas/FaceAttribute"
        brightness:
          $ref: "#/components/schemas/FaceAttribute"
        contrast:
          $ref: "#/components/schemas/FaceAttribute"
        uniqueIntensityLevels:
          $ref: "#/components/schemas/FaceAttribute"
        shadow:
          $ref: "#/components/schemas/FaceAttribute"
        noseShadow:
          $ref: "#/components/schemas/FaceAttribute"
        specularity:
          $ref: "#/components/schemas/FaceAttribute"
        backgroundUniformity:
          $ref: "#/components/schemas/FaceAttribute"
        redRightEye:
          $ref: "#/components/schemas/FaceAttribute"
        redLeftEye:
          $ref: "#/components/schemas/FaceAttribute"
        roll:
          $ref: "#/components/schemas/HeadPoseAttribute"
        yaw:
          $ref: "#/components/schemas/HeadPoseAttribute"
        pitch:
          $ref: "#/components/schemas/HeadPoseAttribute"
        eyeDistance:
          $ref: "#/components/schemas/FaceAttribute"
        eyeGaze:
          $ref: "#/components/schemas/FaceAttribute"
        rightEye:
          $ref: "#/components/schemas/FaceAttribute"
        leftEye:
          $ref: "#/components/schemas/FaceAttribute"
        mouth:
          $ref: "#/components/schemas/FaceAttribute"
        faceSize:
          $ref: "#/components/schemas/FaceAttribute"
        faceRelativeArea:
          $ref: "#/components/schemas/FaceAttribute"
        faceRelativeAreaInImage:
          $ref: "#/components/schemas/FaceAttribute"
      readOnly: true
      type: object
    HeadPoseAttribute:
      example:
        preconditionsMet: true
        angle: 25
      properties:
        angle:
          description: The head pose angle
          example: 25
          format: int32
          readOnly: true
          type: integer
        preconditionsMet:
          description: The flag indicates if the face's attribute score is reliable.
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - angle
      - preconditionsMet
      type: object
    GlassesResponse:
      example:
        score: 0.83
        tinted: 0.83
        heavyFrame: 0.83
      properties:
        score:
          description: The glasses score
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        tinted:
          description: The tinted glasses score
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        heavyFrame:
          description: The glasses with heavy frame score
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
      readOnly: true
      type: object
    FaceTemplateResponse:
      example:
        data: data
        version: "1.13"
      properties:
        data:
          format: byte
          readOnly: true
          type: string
        version:
          description: The template version
          example: "1.13"
          readOnly: true
          type: string
      readOnly: true
      required:
      - data
      - version
      type: object
    FaceMaskResponse:
      description: The face mask
      example:
        score: 0.83
      properties:
        score:
          description: The face mask score
          example: 0.83
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
      readOnly: true
      required:
      - score
      type: object
    ImageCrop:
      description: The image crop.
      example:
        data: data
      properties:
        data:
          format: byte
          readOnly: true
          type: string
      readOnly: true
      required:
      - data
      type: object
    CropCoordinatesResponse:
      example:
        fullyCaptured: true
        coordinates:
          bottomLeft:
            x: 10
            "y": 20
          bottomRight:
            x: 10
            "y": 20
          topLeft:
            x: 10
            "y": 20
          topRight:
            x: 10
            "y": 20
      properties:
        fullyCaptured:
          description: The flag if whole face is captured in the input image
          example: true
          readOnly: true
          type: boolean
        coordinates:
          $ref: "#/components/schemas/Roi"
      readOnly: true
      required:
      - coordinates
      - fullyCaptured
      type: object
    FaceAspectsResponse:
      example:
        gender: 0.5
        age: 24
      properties:
        age:
          description: The age of the face
          example: 24
          format: int32
          readOnly: true
          type: integer
        gender:
          description: The gender score of the face
          example: 0.5
          format: double
          readOnly: true
          type: number
      readOnly: true
      required:
      - age
      - gender
      type: object
    Barcode:
      description: Parsed barcode
      example:
        data: data
        type: code_39
      properties:
        data:
          format: byte
          readOnly: true
          type: string
        type:
          description: Barcode type
          example: code_39
          readOnly: true
          type: string
      readOnly: true
      required:
      - data
      - type
      type: object
    BiometricMultiValueAttribute:
      description: Values for the given biometric attribute retrieved from different
        sources by facial biometry or by OCR.
      example:
        visualZone: visualZone
        chip: chip
        documentPortrait: documentPortrait
        mrz: mrz
        selfie: selfie
        visualZoneDuplicates:
        - visualZoneDuplicates
        - visualZoneDuplicates
      properties:
        visualZone:
          description: The attribute value obtained from the document's visual zone.
          readOnly: true
          type: string
        visualZoneDuplicates:
          description: "The attribute is a duplicated field type on the document,\
            \ the value is obtained from the document's visual zone."
          items:
            description: "The attribute is a duplicated field type on the document,\
              \ the value is obtained from the document's visual zone."
            readOnly: true
            type: string
          readOnly: true
          type: array
        mrz:
          description: The attribute value obtained from the document's machine readable
            zone.
          readOnly: true
          type: string
        chip:
          description: The attribute value read from the document's chip.
          readOnly: true
          type: string
        selfie:
          description: The attribute value obtained from the selfie.
          readOnly: true
          type: string
        documentPortrait:
          description: The attribute value obtained from the document's portrait.
          readOnly: true
          type: string
      readOnly: true
      type: object
    Customer:
      description: "Details of the customer retrieved by OCR from ID document photo\
        \ and by facial biometry from the selfie. The date of birth is in format YYYY-MM-DD\
        \ and the gender is represented by: M for male, F for female, X for undefined."
      example:
        gender:
          visualZone: visualZone
          chip: chip
          documentPortrait: documentPortrait
          mrz: mrz
          selfie: selfie
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
        nationality:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        surname:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        givenNames:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        citizenship:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        document:
          dateOfExpiry:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          issuingAuthority:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          mrz:
            td1:
              documentCode: P
              issuingAuthority: SVK
              dateOfExpiry: "261019"
              checkDigitsValidity:
                compositeCheckDigitValid: true
                documentNumberCheckDigitValid: true
                dateOfBirthCheckDigitValid: true
                dateOfExpiryCheckDigitValid: true
              nationality: SVK
              gender: M
              surname: DOE
              documentNumber: "123456789"
              givenNames: JOHN
              optionalDataSecondLine: "2222"
              dateOfBirth: "841102"
              optionalDataFirstLine: "2222"
            td3:
              documentCode: P
              issuingAuthority: SVK
              dateOfExpiry: "261019"
              checkDigitsValidity:
                compositeCheckDigitValid: true
                documentNumberCheckDigitValid: true
                dateOfBirthCheckDigitValid: true
                personalNumberCheckDigitValid: true
                dateOfExpiryCheckDigitValid: true
              nationality: SVK
              gender: M
              surname: DOE
              documentNumber: "123456789"
              givenNames: JOHN
              dateOfBirth: "841102"
              personalNumberOrOptionalDataSecondLine: "2222"
            td2:
              documentCode: P
              issuingAuthority: SVK
              dateOfExpiry: "261019"
              checkDigitsValidity:
                compositeCheckDigitValid: true
                documentNumberCheckDigitValid: true
                dateOfBirthCheckDigitValid: true
                dateOfExpiryCheckDigitValid: true
              nationality: SVK
              gender: M
              surname: DOE
              documentNumber: "123456789"
              givenNames: JOHN
              optionalDataSecondLine: "2222"
              dateOfBirth: "841102"
          documentNumber:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          additionalTexts:
            key:
              visualZone: visualZone
              chip: chip
              visualZoneDuplicates:
              - visualZoneDuplicates
              - visualZoneDuplicates
              barcode: barcode
          links:
            pages:
              key: pages
            ghostPortrait: ghostPortrait
            signature: signature
            fingerprint: fingerprint
            chipPortrait: chipPortrait
            portrait: portrait
          type:
            country: svk
            edition: 2008-2019
            machineReadableTravelDocument: TD1
            supportLevel: FULL_SUPPORT
            type: identity-card
          pageTypes:
          - pageTypes
          - pageTypes
          dateOfIssue:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          barcodes:
            key:
              key:
                data: data
                type: code_39
        fullName:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        dateOfBirth:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        personalNumber:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        age:
          visualZone: visualZone
          chip: chip
          documentPortrait: documentPortrait
          mrz: mrz
          selfie: selfie
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
      properties:
        age:
          $ref: "#/components/schemas/BiometricMultiValueAttribute"
        gender:
          $ref: "#/components/schemas/BiometricMultiValueAttribute"
        givenNames:
          $ref: "#/components/schemas/MultiValueAttribute"
        surname:
          $ref: "#/components/schemas/MultiValueAttribute"
        fullName:
          $ref: "#/components/schemas/MultiValueAttribute"
        dateOfBirth:
          $ref: "#/components/schemas/MultiValueAttribute"
        personalNumber:
          $ref: "#/components/schemas/MultiValueAttribute"
        citizenship:
          $ref: "#/components/schemas/MultiValueAttribute"
        nationality:
          $ref: "#/components/schemas/MultiValueAttribute"
        document:
          $ref: "#/components/schemas/CustomerDocument"
      readOnly: true
      type: object
    CustomerDocument:
      description: Details of the customer's document retrieved by OCR from ID document
        photo. The dates are in format YYYY-MM-DD.
      example:
        dateOfExpiry:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        issuingAuthority:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        mrz:
          td1:
            documentCode: P
            issuingAuthority: SVK
            dateOfExpiry: "261019"
            checkDigitsValidity:
              compositeCheckDigitValid: true
              documentNumberCheckDigitValid: true
              dateOfBirthCheckDigitValid: true
              dateOfExpiryCheckDigitValid: true
            nationality: SVK
            gender: M
            surname: DOE
            documentNumber: "123456789"
            givenNames: JOHN
            optionalDataSecondLine: "2222"
            dateOfBirth: "841102"
            optionalDataFirstLine: "2222"
          td3:
            documentCode: P
            issuingAuthority: SVK
            dateOfExpiry: "261019"
            checkDigitsValidity:
              compositeCheckDigitValid: true
              documentNumberCheckDigitValid: true
              dateOfBirthCheckDigitValid: true
              personalNumberCheckDigitValid: true
              dateOfExpiryCheckDigitValid: true
            nationality: SVK
            gender: M
            surname: DOE
            documentNumber: "123456789"
            givenNames: JOHN
            dateOfBirth: "841102"
            personalNumberOrOptionalDataSecondLine: "2222"
          td2:
            documentCode: P
            issuingAuthority: SVK
            dateOfExpiry: "261019"
            checkDigitsValidity:
              compositeCheckDigitValid: true
              documentNumberCheckDigitValid: true
              dateOfBirthCheckDigitValid: true
              dateOfExpiryCheckDigitValid: true
            nationality: SVK
            gender: M
            surname: DOE
            documentNumber: "123456789"
            givenNames: JOHN
            optionalDataSecondLine: "2222"
            dateOfBirth: "841102"
        documentNumber:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        additionalTexts:
          key:
            visualZone: visualZone
            chip: chip
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
        links:
          pages:
            key: pages
          ghostPortrait: ghostPortrait
          signature: signature
          fingerprint: fingerprint
          chipPortrait: chipPortrait
          portrait: portrait
        type:
          country: svk
          edition: 2008-2019
          machineReadableTravelDocument: TD1
          supportLevel: FULL_SUPPORT
          type: identity-card
        pageTypes:
        - pageTypes
        - pageTypes
        dateOfIssue:
          visualZone: visualZone
          chip: chip
          mrz: mrz
          visualZoneDuplicates:
          - visualZoneDuplicates
          - visualZoneDuplicates
          barcode: barcode
        barcodes:
          key:
            key:
              data: data
              type: code_39
      properties:
        type:
          $ref: "#/components/schemas/DocumentType"
        pageTypes:
          description: Document's page types
          items:
            description: Document's page types
            readOnly: true
            type: string
          readOnly: true
          type: array
        dateOfIssue:
          $ref: "#/components/schemas/MultiValueAttribute"
        dateOfExpiry:
          $ref: "#/components/schemas/MultiValueAttribute"
        documentNumber:
          $ref: "#/components/schemas/MultiValueAttribute"
        issuingAuthority:
          $ref: "#/components/schemas/MultiValueAttribute"
        additionalTexts:
          additionalProperties:
            $ref: "#/components/schemas/MultiValueAttributeWithoutMrz"
          description: The map of additional document texts. The map keys are text
            field types.
          readOnly: true
          type: object
        mrz:
          $ref: "#/components/schemas/Mrz"
        barcodes:
          additionalProperties:
            additionalProperties:
              $ref: "#/components/schemas/Barcode"
            readOnly: true
            type: object
          readOnly: true
          type: object
        links:
          $ref: "#/components/schemas/CustomerDocumentLinks"
      readOnly: true
      required:
      - links
      - pageTypes
      type: object
    CustomerDocumentLinks:
      description: Links to cropped images from the customer's document.
      example:
        pages:
          key: pages
        ghostPortrait: ghostPortrait
        signature: signature
        fingerprint: fingerprint
        chipPortrait: chipPortrait
        portrait: portrait
      properties:
        portrait:
          description: The document's portrait link
          readOnly: true
          type: string
        chipPortrait:
          description: The document's chip portrait link
          readOnly: true
          type: string
        ghostPortrait:
          description: The document's ghost portrait link
          readOnly: true
          type: string
        signature:
          description: The document's signature image link
          readOnly: true
          type: string
        fingerprint:
          description: The document's fingerprint image link
          readOnly: true
          type: string
        pages:
          additionalProperties:
            description: The map of links to the document's pages. The map keys are
              page types.
            readOnly: true
            type: string
          description: The map of links to the document's pages. The map keys are
            page types.
          readOnly: true
          type: object
      readOnly: true
      type: object
    GetCustomerResponse:
      example:
        customer:
          gender:
            visualZone: visualZone
            chip: chip
            documentPortrait: documentPortrait
            mrz: mrz
            selfie: selfie
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
          nationality:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          surname:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          givenNames:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          citizenship:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          document:
            dateOfExpiry:
              visualZone: visualZone
              chip: chip
              mrz: mrz
              visualZoneDuplicates:
              - visualZoneDuplicates
              - visualZoneDuplicates
              barcode: barcode
            issuingAuthority:
              visualZone: visualZone
              chip: chip
              mrz: mrz
              visualZoneDuplicates:
              - visualZoneDuplicates
              - visualZoneDuplicates
              barcode: barcode
            mrz:
              td1:
                documentCode: P
                issuingAuthority: SVK
                dateOfExpiry: "261019"
                checkDigitsValidity:
                  compositeCheckDigitValid: true
                  documentNumberCheckDigitValid: true
                  dateOfBirthCheckDigitValid: true
                  dateOfExpiryCheckDigitValid: true
                nationality: SVK
                gender: M
                surname: DOE
                documentNumber: "123456789"
                givenNames: JOHN
                optionalDataSecondLine: "2222"
                dateOfBirth: "841102"
                optionalDataFirstLine: "2222"
              td3:
                documentCode: P
                issuingAuthority: SVK
                dateOfExpiry: "261019"
                checkDigitsValidity:
                  compositeCheckDigitValid: true
                  documentNumberCheckDigitValid: true
                  dateOfBirthCheckDigitValid: true
                  personalNumberCheckDigitValid: true
                  dateOfExpiryCheckDigitValid: true
                nationality: SVK
                gender: M
                surname: DOE
                documentNumber: "123456789"
                givenNames: JOHN
                dateOfBirth: "841102"
                personalNumberOrOptionalDataSecondLine: "2222"
              td2:
                documentCode: P
                issuingAuthority: SVK
                dateOfExpiry: "261019"
                checkDigitsValidity:
                  compositeCheckDigitValid: true
                  documentNumberCheckDigitValid: true
                  dateOfBirthCheckDigitValid: true
                  dateOfExpiryCheckDigitValid: true
                nationality: SVK
                gender: M
                surname: DOE
                documentNumber: "123456789"
                givenNames: JOHN
                optionalDataSecondLine: "2222"
                dateOfBirth: "841102"
            documentNumber:
              visualZone: visualZone
              chip: chip
              mrz: mrz
              visualZoneDuplicates:
              - visualZoneDuplicates
              - visualZoneDuplicates
              barcode: barcode
            additionalTexts:
              key:
                visualZone: visualZone
                chip: chip
                visualZoneDuplicates:
                - visualZoneDuplicates
                - visualZoneDuplicates
                barcode: barcode
            links:
              pages:
                key: pages
              ghostPortrait: ghostPortrait
              signature: signature
              fingerprint: fingerprint
              chipPortrait: chipPortrait
              portrait: portrait
            type:
              country: svk
              edition: 2008-2019
              machineReadableTravelDocument: TD1
              supportLevel: FULL_SUPPORT
              type: identity-card
            pageTypes:
            - pageTypes
            - pageTypes
            dateOfIssue:
              visualZone: visualZone
              chip: chip
              mrz: mrz
              visualZoneDuplicates:
              - visualZoneDuplicates
              - visualZoneDuplicates
              barcode: barcode
            barcodes:
              key:
                key:
                  data: data
                  type: code_39
          fullName:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          dateOfBirth:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          personalNumber:
            visualZone: visualZone
            chip: chip
            mrz: mrz
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
            barcode: barcode
          age:
            visualZone: visualZone
            chip: chip
            documentPortrait: documentPortrait
            mrz: mrz
            selfie: selfie
            visualZoneDuplicates:
            - visualZoneDuplicates
            - visualZoneDuplicates
      properties:
        customer:
          $ref: "#/components/schemas/Customer"
      readOnly: true
      type: object
    Mrz:
      description: Parsed machine readable zone
      example:
        td1:
          documentCode: P
          issuingAuthority: SVK
          dateOfExpiry: "261019"
          checkDigitsValidity:
            compositeCheckDigitValid: true
            documentNumberCheckDigitValid: true
            dateOfBirthCheckDigitValid: true
            dateOfExpiryCheckDigitValid: true
          nationality: SVK
          gender: M
          surname: DOE
          documentNumber: "123456789"
          givenNames: JOHN
          optionalDataSecondLine: "2222"
          dateOfBirth: "841102"
          optionalDataFirstLine: "2222"
        td3:
          documentCode: P
          issuingAuthority: SVK
          dateOfExpiry: "261019"
          checkDigitsValidity:
            compositeCheckDigitValid: true
            documentNumberCheckDigitValid: true
            dateOfBirthCheckDigitValid: true
            personalNumberCheckDigitValid: true
            dateOfExpiryCheckDigitValid: true
          nationality: SVK
          gender: M
          surname: DOE
          documentNumber: "123456789"
          givenNames: JOHN
          dateOfBirth: "841102"
          personalNumberOrOptionalDataSecondLine: "2222"
        td2:
          documentCode: P
          issuingAuthority: SVK
          dateOfExpiry: "261019"
          checkDigitsValidity:
            compositeCheckDigitValid: true
            documentNumberCheckDigitValid: true
            dateOfBirthCheckDigitValid: true
            dateOfExpiryCheckDigitValid: true
          nationality: SVK
          gender: M
          surname: DOE
          documentNumber: "123456789"
          givenNames: JOHN
          optionalDataSecondLine: "2222"
          dateOfBirth: "841102"
      properties:
        td1:
          $ref: "#/components/schemas/Td1Mrz"
        td2:
          $ref: "#/components/schemas/Td2Mrz"
        td3:
          $ref: "#/components/schemas/Td3Mrz"
      readOnly: true
      type: object
    MultiValueAttribute:
      description: Values for the given textual attribute retrieved by:- OCR from
        different sources on the document photo.- Reading from the document's chip
      example:
        visualZone: visualZone
        chip: chip
        mrz: mrz
        visualZoneDuplicates:
        - visualZoneDuplicates
        - visualZoneDuplicates
        barcode: barcode
      properties:
        visualZone:
          description: The attribute value obtained from the document's visual zone.
          readOnly: true
          type: string
        visualZoneDuplicates:
          description: "The attribute is a duplicated field type on the document,\
            \ the value is obtained from the document's visual zone."
          items:
            description: "The attribute is a duplicated field type on the document,\
              \ the value is obtained from the document's visual zone."
            readOnly: true
            type: string
          readOnly: true
          type: array
        mrz:
          description: The attribute value obtained from the document's machine readable
            zone.
          readOnly: true
          type: string
        chip:
          description: The attribute value read from the document's chip.
          readOnly: true
          type: string
        barcode:
          description: The attribute value obtained from the document's barcode.
          readOnly: true
          type: string
      readOnly: true
      type: object
    MultiValueAttributeWithoutMrz:
      description: Values for the given textual attribute retrieved by:- OCR from
        different sources on the document photo.- Reading from the document's chip
      example:
        visualZone: visualZone
        chip: chip
        visualZoneDuplicates:
        - visualZoneDuplicates
        - visualZoneDuplicates
        barcode: barcode
      properties:
        visualZone:
          description: The attribute value obtained from the document's visual zone.
          readOnly: true
          type: string
        visualZoneDuplicates:
          description: "The attribute is a duplicated field type on the document,\
            \ the value is obtained from the document's visual zone."
          items:
            description: "The attribute is a duplicated field type on the document,\
              \ the value is obtained from the document's visual zone."
            readOnly: true
            type: string
          readOnly: true
          type: array
        chip:
          description: The attribute value obtained from the document's chip.
          readOnly: true
          type: string
        barcode:
          description: The attribute value obtained from the document's barcode.
          readOnly: true
          type: string
      readOnly: true
      type: object
    Td1Mrz:
      description: Parsed TD1 machine readable zone
      example:
        documentCode: P
        issuingAuthority: SVK
        dateOfExpiry: "261019"
        checkDigitsValidity:
          compositeCheckDigitValid: true
          documentNumberCheckDigitValid: true
          dateOfBirthCheckDigitValid: true
          dateOfExpiryCheckDigitValid: true
        nationality: SVK
        gender: M
        surname: DOE
        documentNumber: "123456789"
        givenNames: JOHN
        optionalDataSecondLine: "2222"
        dateOfBirth: "841102"
        optionalDataFirstLine: "2222"
      properties:
        documentCode:
          description: Document's code
          example: P
          readOnly: true
          type: string
        issuingAuthority:
          description: Document's issuing authority
          example: SVK
          readOnly: true
          type: string
        surname:
          description: Holder's surname
          example: DOE
          readOnly: true
          type: string
        givenNames:
          description: Holder's given names
          example: JOHN
          readOnly: true
          type: string
        documentNumber:
          description: Document's number
          example: "123456789"
          readOnly: true
          type: string
        nationality:
          description: Holder's nationality
          example: SVK
          readOnly: true
          type: string
        dateOfBirth:
          description: "Holder's date of the birth, format: `YYMMDD`"
          example: "841102"
          readOnly: true
          type: string
        gender:
          description: "Holder's gender, format: `M` for male, `F` for female, empty\
            \ string for undefined gender."
          example: M
          readOnly: true
          type: string
        dateOfExpiry:
          description: "Document's date of the expiration, format: `YYMMDD`"
          example: "261019"
          readOnly: true
          type: string
        optionalDataFirstLine:
          description: Optional data - first line
          example: "2222"
          readOnly: true
          type: string
        optionalDataSecondLine:
          description: Optional data - second line
          example: "2222"
          readOnly: true
          type: string
        checkDigitsValidity:
          $ref: "#/components/schemas/Td1MrzCheckDigitsValidity"
      readOnly: true
      required:
      - checkDigitsValidity
      - dateOfBirth
      - dateOfExpiry
      - documentCode
      - documentNumber
      - gender
      - givenNames
      - issuingAuthority
      - nationality
      - surname
      type: object
    Td1MrzCheckDigitsValidity:
      description: Validity of MRZ check digits
      example:
        compositeCheckDigitValid: true
        documentNumberCheckDigitValid: true
        dateOfBirthCheckDigitValid: true
        dateOfExpiryCheckDigitValid: true
      properties:
        documentNumberCheckDigitValid:
          description: Check digit's validity of the document's number
          example: true
          readOnly: true
          type: boolean
        dateOfBirthCheckDigitValid:
          description: Check digit's validity of the holder's date of the birth
          example: true
          readOnly: true
          type: boolean
        dateOfExpiryCheckDigitValid:
          description: Check digit's validity of the holder's date of the expiration
          example: true
          readOnly: true
          type: boolean
        compositeCheckDigitValid:
          description: Composite check digit's validity
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - compositeCheckDigitValid
      - dateOfBirthCheckDigitValid
      - dateOfExpiryCheckDigitValid
      - documentNumberCheckDigitValid
      type: object
    Td2Mrz:
      description: Parsed TD2 machine readable zone
      example:
        documentCode: P
        issuingAuthority: SVK
        dateOfExpiry: "261019"
        checkDigitsValidity:
          compositeCheckDigitValid: true
          documentNumberCheckDigitValid: true
          dateOfBirthCheckDigitValid: true
          dateOfExpiryCheckDigitValid: true
        nationality: SVK
        gender: M
        surname: DOE
        documentNumber: "123456789"
        givenNames: JOHN
        optionalDataSecondLine: "2222"
        dateOfBirth: "841102"
      properties:
        documentCode:
          description: Document's code
          example: P
          readOnly: true
          type: string
        issuingAuthority:
          description: Document's issuing authority
          example: SVK
          readOnly: true
          type: string
        surname:
          description: Holder's surname
          example: DOE
          readOnly: true
          type: string
        givenNames:
          description: Holder's given names
          example: JOHN
          readOnly: true
          type: string
        documentNumber:
          description: Document's number
          example: "123456789"
          readOnly: true
          type: string
        nationality:
          description: Holder's nationality
          example: SVK
          readOnly: true
          type: string
        dateOfBirth:
          description: "Holder's date of the birth, format: `YYMMDD`"
          example: "841102"
          readOnly: true
          type: string
        gender:
          description: "Holder's gender, format: `M` for male, `F` for female, empty\
            \ string for undefined gender."
          example: M
          readOnly: true
          type: string
        dateOfExpiry:
          description: "Document's date of the expiration, format: `YYMMDD`"
          example: "261019"
          readOnly: true
          type: string
        optionalDataSecondLine:
          description: Optional data - second line
          example: "2222"
          readOnly: true
          type: string
        checkDigitsValidity:
          $ref: "#/components/schemas/Td2MrzCheckDigitsValidity"
      readOnly: true
      required:
      - checkDigitsValidity
      - dateOfBirth
      - dateOfExpiry
      - documentCode
      - documentNumber
      - gender
      - givenNames
      - issuingAuthority
      - nationality
      - surname
      type: object
    Td2MrzCheckDigitsValidity:
      description: Validity of MRZ check digits
      example:
        compositeCheckDigitValid: true
        documentNumberCheckDigitValid: true
        dateOfBirthCheckDigitValid: true
        dateOfExpiryCheckDigitValid: true
      properties:
        documentNumberCheckDigitValid:
          description: Check digit's validity of the document's number
          example: true
          readOnly: true
          type: boolean
        dateOfBirthCheckDigitValid:
          description: Check digit's validity of the holder's date of the birth
          example: true
          readOnly: true
          type: boolean
        dateOfExpiryCheckDigitValid:
          description: Check digit's validity of the holder's date of the expiration
          example: true
          readOnly: true
          type: boolean
        compositeCheckDigitValid:
          description: Composite check digit's validity
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - compositeCheckDigitValid
      - dateOfBirthCheckDigitValid
      - dateOfExpiryCheckDigitValid
      - documentNumberCheckDigitValid
      type: object
    Td3Mrz:
      description: Parsed TD3 machine readable zone
      example:
        documentCode: P
        issuingAuthority: SVK
        dateOfExpiry: "261019"
        checkDigitsValidity:
          compositeCheckDigitValid: true
          documentNumberCheckDigitValid: true
          dateOfBirthCheckDigitValid: true
          personalNumberCheckDigitValid: true
          dateOfExpiryCheckDigitValid: true
        nationality: SVK
        gender: M
        surname: DOE
        documentNumber: "123456789"
        givenNames: JOHN
        dateOfBirth: "841102"
        personalNumberOrOptionalDataSecondLine: "2222"
      properties:
        documentCode:
          description: Document's code
          example: P
          readOnly: true
          type: string
        issuingAuthority:
          description: Document's issuing authority
          example: SVK
          readOnly: true
          type: string
        surname:
          description: Holder's surname
          example: DOE
          readOnly: true
          type: string
        givenNames:
          description: Holder's given names
          example: JOHN
          readOnly: true
          type: string
        documentNumber:
          description: Document's number
          example: "123456789"
          readOnly: true
          type: string
        nationality:
          description: Holder's nationality
          example: SVK
          readOnly: true
          type: string
        dateOfBirth:
          description: "Holder's date of the birth, format: `YYMMDD`"
          example: "841102"
          readOnly: true
          type: string
        gender:
          description: "Holder's gender, format: `M` for male, `F` for female, empty\
            \ string for undefined gender."
          example: M
          readOnly: true
          type: string
        dateOfExpiry:
          description: "Document's date of the expiration, format: `YYMMDD`"
          example: "261019"
          readOnly: true
          type: string
        personalNumberOrOptionalDataSecondLine:
          description: Holder's personal number or other optional data
          example: "2222"
          readOnly: true
          type: string
        checkDigitsValidity:
          $ref: "#/components/schemas/Td3MrzCheckDigitsValidity"
      readOnly: true
      required:
      - checkDigitsValidity
      - dateOfBirth
      - dateOfExpiry
      - documentCode
      - documentNumber
      - gender
      - givenNames
      - issuingAuthority
      - nationality
      - surname
      type: object
    Td3MrzCheckDigitsValidity:
      description: Validity of MRZ check digits
      example:
        compositeCheckDigitValid: true
        documentNumberCheckDigitValid: true
        dateOfBirthCheckDigitValid: true
        personalNumberCheckDigitValid: true
        dateOfExpiryCheckDigitValid: true
      properties:
        documentNumberCheckDigitValid:
          description: Check digit's validity of the document's number
          example: true
          readOnly: true
          type: boolean
        dateOfBirthCheckDigitValid:
          description: Check digit's validity of the holder's date of the birth
          example: true
          readOnly: true
          type: boolean
        dateOfExpiryCheckDigitValid:
          description: Check digit's validity of the holder's date of the expiration
          example: true
          readOnly: true
          type: boolean
        personalNumberCheckDigitValid:
          description: Check digit's validity of the holder's personal number
          example: true
          readOnly: true
          type: boolean
        compositeCheckDigitValid:
          description: Composite check digit's validity
          example: true
          readOnly: true
          type: boolean
      readOnly: true
      required:
      - compositeCheckDigitValid
      - dateOfBirthCheckDigitValid
      - dateOfExpiryCheckDigitValid
      - documentNumberCheckDigitValid
      - personalNumberCheckDigitValid
      type: object
    DocumentPageQuality:
      example:
        fine: false
        warnings: DOCUMENT_CLOSE_TO_IMAGE_BORDER
        details:
          brightness:
            score: 0.45
            level: LOW
          sharpness:
            score: 0.45
            level: LOW
          hotspots:
            score: 0.45
            level: LOW
        issues: BRIGHTNESS_HIGH
      properties:
        fine:
          description: The quality check result
          example: false
          readOnly: true
          type: boolean
        issues:
          description: The list of the quality check issues if the quality check failed
          example: BRIGHTNESS_HIGH
          items:
            description: The list of the quality check issues if the quality check
              failed
            enum:
            - BRIGHTNESS_HIGH
            - BRIGHTNESS_LOW
            - HOTSPOTS_SCORE_HIGH
            - SHARPNESS_LOW
            - DOCUMENT_SMALL
            - DOCUMENT_OUT_OF_IMAGE
            example: BRIGHTNESS_HIGH
            type: string
          type: array
        warnings:
          description: The list of warnings from the quality check
          example: DOCUMENT_CLOSE_TO_IMAGE_BORDER
          items:
            description: The list of warnings from the quality check
            enum:
            - DOCUMENT_CLOSE_TO_IMAGE_BORDER
            example: DOCUMENT_CLOSE_TO_IMAGE_BORDER
            readOnly: true
            type: string
          readOnly: true
          type: array
        details:
          $ref: "#/components/schemas/QualityDetails"
      readOnly: true
      required:
      - details
      - fine
      type: object
    QualityCheckDetail:
      description: Quality check detail
      example:
        score: 0.45
        level: LOW
      properties:
        score:
          description: Quality parameter score
          example: 0.45
          format: double
          maximum: 1
          minimum: 0
          readOnly: true
          type: number
        level:
          description: Quality parameter level
          enum:
          - LOW
          - MEDIUM
          - HIGH
          example: LOW
          readOnly: true
          type: string
      readOnly: true
      required:
      - level
      - score
      type: object
    QualityDetails:
      description: Quality check details
      example:
        brightness:
          score: 0.45
          level: LOW
        sharpness:
          score: 0.45
          level: LOW
        hotspots:
          score: 0.45
          level: LOW
      properties:
        sharpness:
          $ref: "#/components/schemas/QualityCheckDetail"
        brightness:
          $ref: "#/components/schemas/QualityCheckDetail"
        hotspots:
          $ref: "#/components/schemas/QualityCheckDetail"
      readOnly: true
      required:
      - brightness
      - hotspots
      - sharpness
      type: object
    ActuatorInfo_build:
      description: The application build info
      example:
        artifact: digital-identity-service
        name: digital-identity-service
        version: 1.0.0
        group: com.innovatrics.dot
      properties:
        artifact:
          example: digital-identity-service
          readOnly: true
          type: string
        name:
          example: digital-identity-service
          readOnly: true
          type: string
        group:
          example: com.innovatrics.dot
          readOnly: true
          type: string
        version:
          example: 1.0.0
          readOnly: true
          type: string
      readOnly: true
      required:
      - artifact
      - group
      - name
      - version
      type: object
    ActuatorInfo_iface_license:
      description: The SAM license info
      example:
        month: "3"
        year: "2024"
        day: "4"
      properties:
        year:
          example: "2024"
          readOnly: true
          type: string
        month:
          example: "3"
          readOnly: true
          type: string
        day:
          example: "4"
          readOnly: true
          type: string
      readOnly: true
      required:
      - day
      - month
      - year
      type: object
    ActuatorInfo_iface:
      description: The IFace info
      example:
        license:
          month: "3"
          year: "2024"
          day: "4"
        version: 4.18.0
      properties:
        version:
          example: 4.18.0
          readOnly: true
          type: string
        license:
          $ref: "#/components/schemas/ActuatorInfo_iface_license"
      readOnly: true
      required:
      - license
      - version
      type: object
    ActuatorInfo_sam:
      description: The SAM info
      example:
        version: 1.28.1
      properties:
        version:
          example: 1.28.1
          readOnly: true
          type: string
      readOnly: true
      required:
      - version
      type: object
  securitySchemes:
    api:
      in: header
      scheme: bearer
      type: http

